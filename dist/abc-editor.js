// Generated by psc-bundle 0.10.7
var PS = {};
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["applicativeArray"] = applicativeArray;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["join"] = join;
  exports["bindArray"] = bindArray;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (__superclass_Control$dotMonad$dotMonad_0, liftEff) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.liftEff = liftEff;
  };                                                   
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (__superclass_Data$dotFunctor$dotFunctor_0, alt) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.alt = alt;
  };
  var altArray = new Alt(function () {
      return Data_Functor.functorArray;
  }, Data_Semigroup.append(Data_Semigroup.semigroupArray));
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
  exports["altArray"] = altArray;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };
  var plusArray = new Plus(function () {
      return Control_Alt.altArray;
  }, [  ]);
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotPlus$dotPlus_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
  };
  var alternativeArray = new Alternative(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Plus.plusArray;
  });
  exports["Alternative"] = Alternative;
  exports["alternativeArray"] = alternativeArray;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqArray"] = eqArray;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (__superclass_Data$dotSemiring$dotSemiring_0, sub) {
      this["__superclass_Data.Semiring.Semiring_0"] = __superclass_Data$dotSemiring$dotSemiring_0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $24 = compare(dictOrd)(a1)(a2);
              if ($24 instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $25 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()));
              if ($25) {
                  return Data_Semiring.one(dictRing["__superclass_Data.Semiring.Semiring_0"]());
              };
              if (!$25) {
                  return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing["__superclass_Data.Semiring.Semiring_0"]()));
              };
              throw new Error("Failed pattern match at Data.Ord line 164, column 12 - line 164, column 49: " + [ $25.constructor.name ]);
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $28 = compare(dictOrd)(x)(y);
              if ($28 instanceof Data_Ordering.LT) {
                  return y;
              };
              if ($28 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($28 instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 123, column 3 - line 126, column 12: " + [ $28.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $29 = compare(dictOrd)(x)(y);
              if ($29 instanceof Data_Ordering.LT) {
                  return x;
              };
              if ($29 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($29 instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 114, column 3 - line 117, column 12: " + [ $29.constructor.name ]);
          };
      };
  };
  var ordArray = function (dictOrd) {
      return new Ord(function () {
          return Data_Eq.eqArray(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, (function () {
          var toDelta = function (x) {
              return function (y) {
                  var $30 = compare(dictOrd)(x)(y);
                  if ($30 instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if ($30 instanceof Data_Ordering.LT) {
                      return 1;
                  };
                  if ($30 instanceof Data_Ordering.GT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Ord line 61, column 7 - line 66, column 1: " + [ $30.constructor.name ]);
              };
          };
          return function (xs) {
              return function (ys) {
                  return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
              };
          };
      })());
  }; 
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  exports["Ord"] = Ord;
  exports["clamp"] = clamp;
  exports["compare"] = compare;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["max"] = max;
  exports["min"] = min;
  exports["signum"] = signum;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordArray"] = ordArray;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  exports.intDiv = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      return x % y;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var CommutativeRing = function (__superclass_Data$dotRing$dotRing_0) {
      this["__superclass_Data.Ring.Ring_0"] = __superclass_Data$dotRing$dotRing_0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var EuclideanRing = function (__superclass_Data$dotCommutativeRing$dotCommutativeRing_0, degree, div, mod) {
      this["__superclass_Data.CommutativeRing.CommutativeRing_0"] = __superclass_Data$dotCommutativeRing$dotCommutativeRing_0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function (__copy_dictEq) {
      return function (__copy_dictEuclideanRing) {
          return function (__copy_a) {
              return function (__copy_b) {
                  var dictEq = __copy_dictEq;
                  var dictEuclideanRing = __copy_dictEuclideanRing;
                  var a = __copy_a;
                  var b = __copy_b;
                  tco: while (true) {
                      var $12 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]())["__superclass_Data.Ring.Ring_0"]())["__superclass_Data.Semiring.Semiring_0"]()));
                      if ($12) {
                          return a;
                      };
                      if (!$12) {
                          var __tco_dictEq = dictEq;
                          var __tco_dictEuclideanRing = dictEuclideanRing;
                          var __tco_a = b;
                          var __tco_b = mod(dictEuclideanRing)(a)(b);
                          dictEq = __tco_dictEq;
                          dictEuclideanRing = __tco_dictEuclideanRing;
                          a = __tco_a;
                          b = __tco_b;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.EuclideanRing line 80, column 3 - line 82, column 27: " + [ $12.constructor.name ]);
                  };
              };
          };
      };
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["gcd"] = gcd;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Boolean = PS["Data.Boolean"];        
  var Monoid = function (__superclass_Data$dotSemigroup$dotSemigroup_0, mempty) {
      this["__superclass_Data.Semigroup.Semigroup_0"] = __superclass_Data$dotSemigroup$dotSemigroup_0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];        
  var Bounded = function (__superclass_Data$dotOrd$dotOrd_0, bottom, top) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var semigroupMaybe = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe line 177, column 3 - line 177, column 23: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 220, column 1 - line 220, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar34) {
                  return $dollar34;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 271, column 1 - line 271, column 21: " + [ v.constructor.name ]);
          })());
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 69, column 3 - line 69, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 128, column 3 - line 128, column 24: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var First = function (x) {
      return x;
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });                                  
  var newtypeFirst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, First);
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  exports["First"] = First;
  exports["newtypeFirst"] = newtypeFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeConj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Conj);
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["newtypeConj"] = newtypeConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Dual = function (x) {
      return x;
  };
  var semigroupDual = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v1)(v);
          };
      });
  };
  var newtypeDual = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Dual);
  var monoidDual = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, Data_Monoid.mempty(dictMonoid));
  };
  exports["Dual"] = Dual;
  exports["newtypeDual"] = newtypeDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;
})(PS["Data.Monoid.Dual"] = PS["Data.Monoid.Dual"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];        
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function ($11) {
              return v(v1($11));
          };
      };
  });
  var newtypeEndo = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Endo);
  var monoidEndo = new Data_Monoid.Monoid(function () {
      return semigroupEndo;
  }, Control_Category.id(Control_Category.categoryFn));
  exports["Endo"] = Endo;
  exports["newtypeEndo"] = newtypeEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($169) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($169));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v.acc)(Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  }; 
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(Data_Newtype.unwrap(Data_Monoid_Dual.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($170) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(c)($170)));
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($171) {
                      return Data_Monoid_Endo.Endo(c($171));
                  })(xs))(u);
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return function (p) {
              return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)))(p);
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["all"] = all;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldlDefault"] = foldlDefault;
  exports["foldr"] = foldr;
  exports["foldrDefault"] = foldrDefault;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["sequence_"] = sequence_;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 37, column 3 - line 37, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 230, column 1 - line 230, column 26: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 44, column 3 - line 44, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 80, column 3 - line 80, column 28: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Show = PS["Data.Show"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (__superclass_Control$dotMonad$dotMonad_0, tailRecM) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRec = function (f) {
      var go = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Loop) {
                  var __tco_v = f(v.value0);
                  v = __tco_v;
                  continue tco;
              };
              if (v instanceof Done) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 93, column 1 - line 96, column 18: " + [ v.constructor.name ]);
          };
      };
      return function ($50) {
          return go(f($50));
      };
  }; 
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Done(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                  return new Done(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 108, column 7 - line 108, column 33: " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 32, column 3 - line 32, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRec"] = tailRec;
  exports["tailRecM"] = tailRecM;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecEither"] = monadRecEither;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var oneOf = function (dictAlternative) {
      return function (v) {
          return Control_Alt.alt((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(Control_Applicative.pure(dictAlternative["__superclass_Control.Applicative.Applicative_0"]())(v.value0))(v.value1);
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return new NonEmpty(f(v.value0), Data_Functor.map(dictFunctor)(f)(v.value1));
          };
      });
  };
  var foldl1 = function (dictFoldable) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
          };
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["foldl1"] = foldl1;
  exports["oneOf"] = oneOf;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              return function ($259) {
                  return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                      var $139 = Data_Eq.eq(dictEq)(a)(v.value0);
                      if ($139) {
                          return new Data_Maybe.Just(v.value1);
                      };
                      if (!$139) {
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Data.Tuple line 176, column 55 - line 176, column 90: " + [ $139.constructor.name ]);
                  })($259));
              };
          };
      };
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["lookup"] = lookup;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["functorTuple"] = functorTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($128) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($128));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var b = __copy_b;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      var __tco_b = f(b)(v.value0);
                      var __tco_v = v.value1;
                      b = __tco_b;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 66, column 3 - line 69, column 34: " + [ b.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          return function (as) {
              var rev = function (__copy_acc) {
                  return function (__copy_v) {
                      var acc = __copy_acc;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons) {
                              var __tco_acc = new Cons(v.value0, acc);
                              var __tco_v = v.value1;
                              acc = __tco_acc;
                              v = __tco_v;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 62, column 3 - line 65, column 40: " + [ acc.constructor.name, v.constructor.name ]);
                      };
                  };
              };
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)(as));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var __tco_acc = new Data_List_Types.Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 359, column 1 - line 362, column 36: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var manyRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (p) {
              var go = function (acc) {
                  return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(Control_Alt.alt((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(Data_Functor.map(((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (v) {
                      return Control_Applicative.pure(dictAlternative["__superclass_Control.Applicative.Applicative_0"]())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v1) {
                          return new Data_List_Types.Cons(v1, acc);
                      })(function (v1) {
                          return reverse(acc);
                      })(v));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var index = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v instanceof Data_List_Types.Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_List_Types.Cons && v1 === 0) {
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Data_List_Types.Cons) {
                  var __tco_v = v.value1;
                  var __tco_v1 = v1 - 1 | 0;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match at Data.List line 275, column 1 - line 275, column 22: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 224, column 1 - line 224, column 19: " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var findIndex = function (fn) {
      var go = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v1 instanceof Data_List_Types.Cons) {
                      if (fn(v1.value0)) {
                          return new Data_Maybe.Just(v);
                      };
                      if (Data_Boolean.otherwise) {
                          var __tco_v = v + 1 | 0;
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                  };
                  if (v1 instanceof Data_List_Types.Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List line 295, column 3 - line 296, column 44: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      return go(0);
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  exports["elemIndex"] = elemIndex;
  exports["findIndex"] = findIndex;
  exports["fromFoldable"] = fromFoldable;
  exports["head"] = head;
  exports["index"] = index;
  exports["length"] = length;
  exports["manyRec"] = manyRec;
  exports["null"] = $$null;
  exports["reverse"] = reverse;
  exports["singleton"] = singleton;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.pow = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return Math.pow(x,y) | 0;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["remainder"] = $foreign.remainder;
  exports["round"] = $foreign.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 63, column 1 - line 68, column 43: " + [ x.constructor.name ]);
  };
  var round = function ($2) {
      return unsafeClamp($$Math.round($2));
  };
  exports["fromNumber"] = fromNumber;
  exports["fromString"] = fromString;
  exports["fromStringAs"] = fromStringAs;
  exports["round"] = round;
  exports["pow"] = $foreign.pow;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];        
  var Ratio = (function () {
      function Ratio(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ratio.create = function (value0) {
          return function (value1) {
              return new Ratio(value0, value1);
          };
      };
      return Ratio;
  })();
  var semiringRatio = function (dictSemiring) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return new Ratio(Data_Semiring.add(dictSemiring)(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value1))(Data_Semiring.mul(dictSemiring)(v.value1)(v1.value0)), Data_Semiring.mul(dictSemiring)(v.value1)(v1.value1));
          };
      }, function (v) {
          return function (v1) {
              return new Ratio(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring)(v.value1)(v1.value1));
          };
      }, new Ratio(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring)), new Ratio(Data_Semiring.zero(dictSemiring), Data_Semiring.one(dictSemiring)));
  };
  var ringRatio = function (dictRing) {
      return new Data_Ring.Ring(function () {
          return semiringRatio(dictRing["__superclass_Data.Semiring.Semiring_0"]());
      }, function (v) {
          return function (v1) {
              return new Ratio(Data_Ring.sub(dictRing)(Data_Semiring.mul(dictRing["__superclass_Data.Semiring.Semiring_0"]())(v.value0)(v1.value1))(Data_Semiring.mul(dictRing["__superclass_Data.Semiring.Semiring_0"]())(v.value1)(v1.value0)), Data_Semiring.mul(dictRing["__superclass_Data.Semiring.Semiring_0"]())(v.value1)(v1.value1));
          };
      });
  };
  exports["Ratio"] = Ratio;
  exports["semiringRatio"] = semiringRatio;
  exports["ringRatio"] = ringRatio;
})(PS["Data.Ratio"] = PS["Data.Ratio"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Field = PS["Data.Field"];        
  var Rational = function (x) {
      return x;
  };
  var toNumber = function (v) {
      return Data_Int.toNumber(v.value0) / Data_Int.toNumber(v.value1);
  }; 
  var reduce = function (v) {
      var g = Data_EuclideanRing.gcd(Data_Eq.eqInt)(Data_EuclideanRing.euclideanRingInt)(v.value0)(v.value1);
      var b$prime = v.value1 / g | 0;
      return Rational(new Data_Ratio.Ratio((v.value0 / g | 0) * Data_Ord.signum(Data_Ord.ordInt)(Data_Ring.ringInt)(b$prime) | 0, Data_EuclideanRing.degree(Data_EuclideanRing.euclideanRingInt)(b$prime)));
  };
  var semiringRational = new Data_Semiring.Semiring(function (v) {
      return function (v1) {
          return reduce(Rational(Data_Semiring.add(Data_Ratio.semiringRatio(Data_Semiring.semiringInt))(v)(v1)));
      };
  }, function (v) {
      return function (v1) {
          return reduce(Rational(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Semiring.semiringInt))(v)(v1)));
      };
  }, Data_Semiring.one(Data_Ratio.semiringRatio(Data_Semiring.semiringInt)), Data_Semiring.zero(Data_Ratio.semiringRatio(Data_Semiring.semiringInt)));
  var ringRational = new Data_Ring.Ring(function () {
      return semiringRational;
  }, function (v) {
      return function (v1) {
          return reduce(Rational(Data_Ring.sub(Data_Ratio.ringRatio(Data_Ring.ringInt))(v)(v1)));
      };
  });
  var rational = function (x) {
      return function (y) {
          return reduce(Rational(new Data_Ratio.Ratio(x, y)));
      };
  };
  var fromInt = function (i) {
      return Rational(new Data_Ratio.Ratio(i, 1));
  };
  exports["Rational"] = Rational;
  exports["fromInt"] = fromInt;
  exports["rational"] = rational;
  exports["toNumber"] = toNumber;
  exports["semiringRational"] = semiringRational;
  exports["ringRational"] = ringRational;
})(PS["Data.Rational"] = PS["Data.Rational"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Show = PS["Data.Show"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Thin = (function () {
      function Thin() {

      };
      Thin.value = new Thin();
      return Thin;
  })();
  var ThinThin = (function () {
      function ThinThin() {

      };
      ThinThin.value = new ThinThin();
      return ThinThin;
  })();
  var ThinThick = (function () {
      function ThinThick() {

      };
      ThinThick.value = new ThinThick();
      return ThinThick;
  })();
  var ThickThin = (function () {
      function ThickThin() {

      };
      ThickThin.value = new ThickThin();
      return ThickThin;
  })();
  var Begin = (function () {
      function Begin() {

      };
      Begin.value = new Begin();
      return Begin;
  })();
  var End = (function () {
      function End() {

      };
      End.value = new End();
      return End;
  })();
  var BeginAndEnd = (function () {
      function BeginAndEnd() {

      };
      BeginAndEnd.value = new BeginAndEnd();
      return BeginAndEnd;
  })();
  var A = (function () {
      function A() {

      };
      A.value = new A();
      return A;
  })();
  var B = (function () {
      function B() {

      };
      B.value = new B();
      return B;
  })();
  var C = (function () {
      function C() {

      };
      C.value = new C();
      return C;
  })();
  var D = (function () {
      function D() {

      };
      D.value = new D();
      return D;
  })();
  var E = (function () {
      function E() {

      };
      E.value = new E();
      return E;
  })();
  var F = (function () {
      function F() {

      };
      F.value = new F();
      return F;
  })();
  var G = (function () {
      function G() {

      };
      G.value = new G();
      return G;
  })();
  var Major = (function () {
      function Major() {

      };
      Major.value = new Major();
      return Major;
  })();
  var Minor = (function () {
      function Minor() {

      };
      Minor.value = new Minor();
      return Minor;
  })();
  var Ionian = (function () {
      function Ionian() {

      };
      Ionian.value = new Ionian();
      return Ionian;
  })();
  var Dorian = (function () {
      function Dorian() {

      };
      Dorian.value = new Dorian();
      return Dorian;
  })();
  var Phrygian = (function () {
      function Phrygian() {

      };
      Phrygian.value = new Phrygian();
      return Phrygian;
  })();
  var Lydian = (function () {
      function Lydian() {

      };
      Lydian.value = new Lydian();
      return Lydian;
  })();
  var Mixolydian = (function () {
      function Mixolydian() {

      };
      Mixolydian.value = new Mixolydian();
      return Mixolydian;
  })();
  var Aeolian = (function () {
      function Aeolian() {

      };
      Aeolian.value = new Aeolian();
      return Aeolian;
  })();
  var Locrian = (function () {
      function Locrian() {

      };
      Locrian.value = new Locrian();
      return Locrian;
  })();
  var LeftArrow = (function () {
      function LeftArrow(value0) {
          this.value0 = value0;
      };
      LeftArrow.create = function (value0) {
          return new LeftArrow(value0);
      };
      return LeftArrow;
  })();
  var RightArrow = (function () {
      function RightArrow(value0) {
          this.value0 = value0;
      };
      RightArrow.create = function (value0) {
          return new RightArrow(value0);
      };
      return RightArrow;
  })();
  var AboveNextSymbol = (function () {
      function AboveNextSymbol() {

      };
      AboveNextSymbol.value = new AboveNextSymbol();
      return AboveNextSymbol;
  })();
  var BelowNextSymbol = (function () {
      function BelowNextSymbol() {

      };
      BelowNextSymbol.value = new BelowNextSymbol();
      return BelowNextSymbol;
  })();
  var LeftOfNextSymbol = (function () {
      function LeftOfNextSymbol() {

      };
      LeftOfNextSymbol.value = new LeftOfNextSymbol();
      return LeftOfNextSymbol;
  })();
  var RightOfNextSymbol = (function () {
      function RightOfNextSymbol() {

      };
      RightOfNextSymbol.value = new RightOfNextSymbol();
      return RightOfNextSymbol;
  })();
  var Discretional = (function () {
      function Discretional() {

      };
      Discretional.value = new Discretional();
      return Discretional;
  })();
  var Sharp = (function () {
      function Sharp() {

      };
      Sharp.value = new Sharp();
      return Sharp;
  })();
  var Flat = (function () {
      function Flat() {

      };
      Flat.value = new Flat();
      return Flat;
  })();
  var DoubleSharp = (function () {
      function DoubleSharp() {

      };
      DoubleSharp.value = new DoubleSharp();
      return DoubleSharp;
  })();
  var DoubleFlat = (function () {
      function DoubleFlat() {

      };
      DoubleFlat.value = new DoubleFlat();
      return DoubleFlat;
  })();
  var Natural = (function () {
      function Natural() {

      };
      Natural.value = new Natural();
      return Natural;
  })();
  var KeyAccidental = function (x) {
      return x;
  };
  var Area = (function () {
      function Area(value0) {
          this.value0 = value0;
      };
      Area.create = function (value0) {
          return new Area(value0);
      };
      return Area;
  })();
  var Book = (function () {
      function Book(value0) {
          this.value0 = value0;
      };
      Book.create = function (value0) {
          return new Book(value0);
      };
      return Book;
  })();
  var Composer = (function () {
      function Composer(value0) {
          this.value0 = value0;
      };
      Composer.create = function (value0) {
          return new Composer(value0);
      };
      return Composer;
  })();
  var Discography = (function () {
      function Discography(value0) {
          this.value0 = value0;
      };
      Discography.create = function (value0) {
          return new Discography(value0);
      };
      return Discography;
  })();
  var FileUrl = (function () {
      function FileUrl(value0) {
          this.value0 = value0;
      };
      FileUrl.create = function (value0) {
          return new FileUrl(value0);
      };
      return FileUrl;
  })();
  var Group = (function () {
      function Group(value0) {
          this.value0 = value0;
      };
      Group.create = function (value0) {
          return new Group(value0);
      };
      return Group;
  })();
  var History = (function () {
      function History(value0) {
          this.value0 = value0;
      };
      History.create = function (value0) {
          return new History(value0);
      };
      return History;
  })();
  var Instruction = (function () {
      function Instruction(value0) {
          this.value0 = value0;
      };
      Instruction.create = function (value0) {
          return new Instruction(value0);
      };
      return Instruction;
  })();
  var Key = (function () {
      function Key(value0) {
          this.value0 = value0;
      };
      Key.create = function (value0) {
          return new Key(value0);
      };
      return Key;
  })();
  var UnitNoteLength = (function () {
      function UnitNoteLength(value0) {
          this.value0 = value0;
      };
      UnitNoteLength.create = function (value0) {
          return new UnitNoteLength(value0);
      };
      return UnitNoteLength;
  })();
  var Meter = (function () {
      function Meter(value0) {
          this.value0 = value0;
      };
      Meter.create = function (value0) {
          return new Meter(value0);
      };
      return Meter;
  })();
  var Macro = (function () {
      function Macro(value0) {
          this.value0 = value0;
      };
      Macro.create = function (value0) {
          return new Macro(value0);
      };
      return Macro;
  })();
  var Notes = (function () {
      function Notes(value0) {
          this.value0 = value0;
      };
      Notes.create = function (value0) {
          return new Notes(value0);
      };
      return Notes;
  })();
  var Origin = (function () {
      function Origin(value0) {
          this.value0 = value0;
      };
      Origin.create = function (value0) {
          return new Origin(value0);
      };
      return Origin;
  })();
  var Parts = (function () {
      function Parts(value0) {
          this.value0 = value0;
      };
      Parts.create = function (value0) {
          return new Parts(value0);
      };
      return Parts;
  })();
  var Tempo = (function () {
      function Tempo(value0) {
          this.value0 = value0;
      };
      Tempo.create = function (value0) {
          return new Tempo(value0);
      };
      return Tempo;
  })();
  var Rhythm = (function () {
      function Rhythm(value0) {
          this.value0 = value0;
      };
      Rhythm.create = function (value0) {
          return new Rhythm(value0);
      };
      return Rhythm;
  })();
  var Remark = (function () {
      function Remark(value0) {
          this.value0 = value0;
      };
      Remark.create = function (value0) {
          return new Remark(value0);
      };
      return Remark;
  })();
  var Source = (function () {
      function Source(value0) {
          this.value0 = value0;
      };
      Source.create = function (value0) {
          return new Source(value0);
      };
      return Source;
  })();
  var SymbolLine = (function () {
      function SymbolLine(value0) {
          this.value0 = value0;
      };
      SymbolLine.create = function (value0) {
          return new SymbolLine(value0);
      };
      return SymbolLine;
  })();
  var Title = (function () {
      function Title(value0) {
          this.value0 = value0;
      };
      Title.create = function (value0) {
          return new Title(value0);
      };
      return Title;
  })();
  var UserDefined = (function () {
      function UserDefined(value0) {
          this.value0 = value0;
      };
      UserDefined.create = function (value0) {
          return new UserDefined(value0);
      };
      return UserDefined;
  })();
  var Voice = (function () {
      function Voice(value0) {
          this.value0 = value0;
      };
      Voice.create = function (value0) {
          return new Voice(value0);
      };
      return Voice;
  })();
  var WordsAfter = (function () {
      function WordsAfter(value0) {
          this.value0 = value0;
      };
      WordsAfter.create = function (value0) {
          return new WordsAfter(value0);
      };
      return WordsAfter;
  })();
  var WordsAligned = (function () {
      function WordsAligned(value0) {
          this.value0 = value0;
      };
      WordsAligned.create = function (value0) {
          return new WordsAligned(value0);
      };
      return WordsAligned;
  })();
  var ReferenceNumber = (function () {
      function ReferenceNumber(value0) {
          this.value0 = value0;
      };
      ReferenceNumber.create = function (value0) {
          return new ReferenceNumber(value0);
      };
      return ReferenceNumber;
  })();
  var Transcription = (function () {
      function Transcription(value0) {
          this.value0 = value0;
      };
      Transcription.create = function (value0) {
          return new Transcription(value0);
      };
      return Transcription;
  })();
  var FieldContinuation = (function () {
      function FieldContinuation(value0) {
          this.value0 = value0;
      };
      FieldContinuation.create = function (value0) {
          return new FieldContinuation(value0);
      };
      return FieldContinuation;
  })();
  var Comment = (function () {
      function Comment(value0) {
          this.value0 = value0;
      };
      Comment.create = function (value0) {
          return new Comment(value0);
      };
      return Comment;
  })();
  var UnsupportedHeader = (function () {
      function UnsupportedHeader() {

      };
      UnsupportedHeader.value = new UnsupportedHeader();
      return UnsupportedHeader;
  })();
  var Barline = (function () {
      function Barline(value0) {
          this.value0 = value0;
      };
      Barline.create = function (value0) {
          return new Barline(value0);
      };
      return Barline;
  })();
  var Note = (function () {
      function Note(value0) {
          this.value0 = value0;
      };
      Note.create = function (value0) {
          return new Note(value0);
      };
      return Note;
  })();
  var BrokenRhythmPair = (function () {
      function BrokenRhythmPair(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BrokenRhythmPair.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BrokenRhythmPair(value0, value1, value2);
              };
          };
      };
      return BrokenRhythmPair;
  })();
  var Rest = (function () {
      function Rest(value0) {
          this.value0 = value0;
      };
      Rest.create = function (value0) {
          return new Rest(value0);
      };
      return Rest;
  })();
  var Tuplet = (function () {
      function Tuplet(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuplet.create = function (value0) {
          return function (value1) {
              return new Tuplet(value0, value1);
          };
      };
      return Tuplet;
  })();
  var Decoration = (function () {
      function Decoration(value0) {
          this.value0 = value0;
      };
      Decoration.create = function (value0) {
          return new Decoration(value0);
      };
      return Decoration;
  })();
  var Slur = (function () {
      function Slur(value0) {
          this.value0 = value0;
      };
      Slur.create = function (value0) {
          return new Slur(value0);
      };
      return Slur;
  })();
  var GraceNote = (function () {
      function GraceNote(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GraceNote.create = function (value0) {
          return function (value1) {
              return new GraceNote(value0, value1);
          };
      };
      return GraceNote;
  })();
  var Annotation = (function () {
      function Annotation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Annotation.create = function (value0) {
          return function (value1) {
              return new Annotation(value0, value1);
          };
      };
      return Annotation;
  })();
  var ChordSymbol = (function () {
      function ChordSymbol(value0) {
          this.value0 = value0;
      };
      ChordSymbol.create = function (value0) {
          return new ChordSymbol(value0);
      };
      return ChordSymbol;
  })();
  var Chord = (function () {
      function Chord(value0) {
          this.value0 = value0;
      };
      Chord.create = function (value0) {
          return new Chord(value0);
      };
      return Chord;
  })();
  var Inline = (function () {
      function Inline(value0) {
          this.value0 = value0;
      };
      Inline.create = function (value0) {
          return new Inline(value0);
      };
      return Inline;
  })();
  var Spacer = (function () {
      function Spacer(value0) {
          this.value0 = value0;
      };
      Spacer.create = function (value0) {
          return new Spacer(value0);
      };
      return Spacer;
  })();
  var Ignore = (function () {
      function Ignore() {

      };
      Ignore.value = new Ignore();
      return Ignore;
  })();
  var Continuation = (function () {
      function Continuation() {

      };
      Continuation.value = new Continuation();
      return Continuation;
  })();
  var Score = (function () {
      function Score(value0) {
          this.value0 = value0;
      };
      Score.create = function (value0) {
          return new Score(value0);
      };
      return Score;
  })();
  var BodyInfo = (function () {
      function BodyInfo(value0) {
          this.value0 = value0;
      };
      BodyInfo.create = function (value0) {
          return new BodyInfo(value0);
      };
      return BodyInfo;
  })();
  var showPitchClass = new Data_Show.Show(function (v) {
      if (v instanceof A) {
          return "A";
      };
      if (v instanceof B) {
          return "B";
      };
      if (v instanceof C) {
          return "C";
      };
      if (v instanceof D) {
          return "D";
      };
      if (v instanceof E) {
          return "E";
      };
      if (v instanceof F) {
          return "F";
      };
      if (v instanceof G) {
          return "G";
      };
      throw new Error("Failed pattern match at Data.Abc line 204, column 3 - line 205, column 3: " + [ v.constructor.name ]);
  });
  var showAccidental = new Data_Show.Show(function (v) {
      if (v instanceof Sharp) {
          return "^";
      };
      if (v instanceof Flat) {
          return "_";
      };
      if (v instanceof DoubleSharp) {
          return "^^";
      };
      if (v instanceof DoubleFlat) {
          return "__";
      };
      if (v instanceof Natural) {
          return "=";
      };
      throw new Error("Failed pattern match at Data.Abc line 183, column 5 - line 184, column 5: " + [ v.constructor.name ]);
  });
  var newtypeKeyAccidental = new Data_Newtype.Newtype(function (n) {
      return n;
  }, KeyAccidental);
  var middlecOctave = 5;
  var eqPitchCLass = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof A && y instanceof A) {
              return true;
          };
          if (x instanceof B && y instanceof B) {
              return true;
          };
          if (x instanceof C && y instanceof C) {
              return true;
          };
          if (x instanceof D && y instanceof D) {
              return true;
          };
          if (x instanceof E && y instanceof E) {
              return true;
          };
          if (x instanceof F && y instanceof F) {
              return true;
          };
          if (x instanceof G && y instanceof G) {
              return true;
          };
          return false;
      };
  });
  var eqAccidental = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Sharp && y instanceof Sharp) {
              return true;
          };
          if (x instanceof Flat && y instanceof Flat) {
              return true;
          };
          if (x instanceof DoubleSharp && y instanceof DoubleSharp) {
              return true;
          };
          if (x instanceof DoubleFlat && y instanceof DoubleFlat) {
              return true;
          };
          if (x instanceof Natural && y instanceof Natural) {
              return true;
          };
          return false;
      };
  });
  var eqKeyAccidental = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(eqAccidental)(x.accidental)(y.accidental) && Data_Eq.eq(eqPitchCLass)(x.pitchClass)(y.pitchClass);
      };
  });
  exports["Sharp"] = Sharp;
  exports["Flat"] = Flat;
  exports["DoubleSharp"] = DoubleSharp;
  exports["DoubleFlat"] = DoubleFlat;
  exports["Natural"] = Natural;
  exports["AboveNextSymbol"] = AboveNextSymbol;
  exports["BelowNextSymbol"] = BelowNextSymbol;
  exports["LeftOfNextSymbol"] = LeftOfNextSymbol;
  exports["RightOfNextSymbol"] = RightOfNextSymbol;
  exports["Discretional"] = Discretional;
  exports["Score"] = Score;
  exports["BodyInfo"] = BodyInfo;
  exports["LeftArrow"] = LeftArrow;
  exports["RightArrow"] = RightArrow;
  exports["Area"] = Area;
  exports["Book"] = Book;
  exports["Composer"] = Composer;
  exports["Discography"] = Discography;
  exports["FileUrl"] = FileUrl;
  exports["Group"] = Group;
  exports["History"] = History;
  exports["Instruction"] = Instruction;
  exports["Key"] = Key;
  exports["UnitNoteLength"] = UnitNoteLength;
  exports["Meter"] = Meter;
  exports["Macro"] = Macro;
  exports["Notes"] = Notes;
  exports["Origin"] = Origin;
  exports["Parts"] = Parts;
  exports["Tempo"] = Tempo;
  exports["Rhythm"] = Rhythm;
  exports["Remark"] = Remark;
  exports["Source"] = Source;
  exports["SymbolLine"] = SymbolLine;
  exports["Title"] = Title;
  exports["UserDefined"] = UserDefined;
  exports["Voice"] = Voice;
  exports["WordsAfter"] = WordsAfter;
  exports["WordsAligned"] = WordsAligned;
  exports["ReferenceNumber"] = ReferenceNumber;
  exports["Transcription"] = Transcription;
  exports["FieldContinuation"] = FieldContinuation;
  exports["Comment"] = Comment;
  exports["UnsupportedHeader"] = UnsupportedHeader;
  exports["KeyAccidental"] = KeyAccidental;
  exports["Major"] = Major;
  exports["Minor"] = Minor;
  exports["Ionian"] = Ionian;
  exports["Dorian"] = Dorian;
  exports["Phrygian"] = Phrygian;
  exports["Lydian"] = Lydian;
  exports["Mixolydian"] = Mixolydian;
  exports["Aeolian"] = Aeolian;
  exports["Locrian"] = Locrian;
  exports["Barline"] = Barline;
  exports["Note"] = Note;
  exports["BrokenRhythmPair"] = BrokenRhythmPair;
  exports["Rest"] = Rest;
  exports["Tuplet"] = Tuplet;
  exports["Decoration"] = Decoration;
  exports["Slur"] = Slur;
  exports["GraceNote"] = GraceNote;
  exports["Annotation"] = Annotation;
  exports["ChordSymbol"] = ChordSymbol;
  exports["Chord"] = Chord;
  exports["Inline"] = Inline;
  exports["Spacer"] = Spacer;
  exports["Ignore"] = Ignore;
  exports["Continuation"] = Continuation;
  exports["A"] = A;
  exports["B"] = B;
  exports["C"] = C;
  exports["D"] = D;
  exports["E"] = E;
  exports["F"] = F;
  exports["G"] = G;
  exports["Begin"] = Begin;
  exports["End"] = End;
  exports["BeginAndEnd"] = BeginAndEnd;
  exports["Thin"] = Thin;
  exports["ThinThin"] = ThinThin;
  exports["ThinThick"] = ThinThick;
  exports["ThickThin"] = ThickThin;
  exports["middlecOctave"] = middlecOctave;
  exports["showAccidental"] = showAccidental;
  exports["eqAccidental"] = eqAccidental;
  exports["showPitchClass"] = showPitchClass;
  exports["eqPitchCLass"] = eqPitchCLass;
  exports["newtypeKeyAccidental"] = newtypeKeyAccidental;
  exports["eqKeyAccidental"] = eqKeyAccidental;
})(PS["Data.Abc"] = PS["Data.Abc"] || {});
(function(exports) {
    "use strict";

  function _codePointAt (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          var codePointArray = Array.from(s);
          var isWithinRange  = i >= 0 && i < codePointArray.length;

          return isWithinRange ? just(codePointArray[i].codePointAt(0)) : nothing;
        };
      };
    };
  }

  function _codePointAtP (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.codePointAt(i)) : nothing;
        };
      };
    };
  }

  function endsWith (searchString) {
    return function (s) {
      return s.endsWith(searchString);
    };
  }

  function endsWithP (searchString) {
    return function (position) {
      return function (s) {
        return s.endsWith(searchString, position);
      };
    };
  }

  function escapeRegex (str) {
    return str.replace(/[.*+?^${}()|[\]\-\\]/g, "\\$&");
  }

  function includes (searchString) {
    return function (str) {
      return str.includes(searchString);
    };
  }

  function includesP (needle) {
    return function (position) {
      return function (haystack) {
        // For negative `position` values, we search from the beginning of the
        // string. This is in accordance with the native
        // `String.prototype.include` function.
        var pos = Math.max(0, position);

        // Converting to arrays takes care of any surrogate code points
        var needleA    = Array.from(needle);
        var haystackA  = Array.from(haystack).slice(pos);
        var needleALen = needleA.length;

        var maxIndex = haystackA.length + 1 - needleALen;
        var found    = false;
        var i;

        // Naive implementation, at some point we should check whether Boyer-Moore
        // or Knuth-Morris-Pratt are worthwhile
        for (i = 0; i < maxIndex; i++) {
          if (needleA.every(function (e, j) { return e === haystackA[i+j]; })) {
            found = true;
            break;
          }
        }

        return found;
      };
    };
  }

  function length (str) {
    return Array.from(str).length;
  }

  function lines (str) {
    // See http://www.unicode.org/reports/tr18/#RL1.6
    return str.split(/\r\n|[\n\v\f\r\u0085\u2028\u2029]/);
  }

  function normalize (str) {
    return str.normalize();
  }

  function _normalizeP (normalizationForm) {
    return function (str) {
      return str.normalize(normalizationForm);
    };
  }

  function _repeat (just) {
    return function (nothing) {
      return function (n) {
        return function (str) {
          var result;

          try {
            result = just(str.repeat(n));
          }
          catch (error) {
            result = nothing;
          }

          return result;
        };
      };
    };
  }

  function startsWith (searchString) {
    return function (s) {
      return s.startsWith(searchString);
    };
  }

  function startsWithP (searchString) {
    return function (position) {
      return function (s) {
        return s.startsWith(searchString, position);
      };
    };
  }

  function stripChars (chars) {
    return function (s) {
      return s.replace(RegExp("[" + escapeRegex(chars) + "]", "g"), "");
    };
  }

  function toCharArray (str) {
    return Array.from(str);
  }

  function unsafeCodePointAt (i) {
    return function (s) {
      var codePointArray = Array.from(s);
      var isWithinRange = i >= 0 && i < codePointArray.length;

      if (isWithinRange) {
        return codePointArray[i].codePointAt(0);
      }
      else {
        throw new Error("Data.String.Utils.unsafeCodePointAt: Invalid index");
      }
    };
  }

  function unsafeCodePointAtP (i) {
    return function (s) {
      if (i >= 0 && i < s.length) {
        return s.codePointAt(i);
      }
      else {
        throw new Error("Data.String.Utils.unsafeCodePointAt': Invalid index");
      }
    };
  }

  function unsafeRepeat (n) {
    return function (str) {
      try {
        return str.repeat(n);
      }
      catch (error) {
        throw new Error("Data.String.Utils.unsafeRepeat: Invalid count");
      }
    };
  }

  function words (s) {
    return s.split(/\s+/);
  }                                        
  exports.includes           = includes; 
  exports.length             = length; 
  exports.startsWith         = startsWith;
  exports.toCharArray        = toCharArray;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function(exports) {
    "use strict";

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.singleton = function (c) {
    return c;
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_indexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (v) {
      return function (str) {
          var $36 = indexOf(v)(str);
          if ($36 instanceof Data_Maybe.Just && $36.value0 === 0) {
              return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                      
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["charAt"] = charAt;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["stripPrefix"] = stripPrefix;
  exports["drop"] = $foreign.drop;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["length"] = $foreign.length;
  exports["singleton"] = $foreign.singleton;
  exports["take"] = $foreign.take;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
    "use strict";

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null) {
            return nothing;
          } else {
            var list = [];
            for (var i = 0; i < m.length; i++) {
              list.push(m[i] == null ? nothing : just(m[i]));
            }
            return just(list);
          }
        };
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String = PS["Data.String"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Data_Functor = PS["Data.Functor"];
  var Control_MonadZero = PS["Control.MonadZero"];        
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false, 
      ignoreCase: false, 
      multiline: false, 
      sticky: false, 
      unicode: false
  });
  exports["RegexFlags"] = RegexFlags;
  exports["noFlags"] = noFlags;
})(PS["Data.String.Regex.Flags"] = PS["Data.String.Regex.Flags"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                          
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          if (!v.value0.global) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 59, column 4 - line 59, column 32: " + [ v.value0.global.constructor.name ]);
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          if (!v.value0.ignoreCase) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 60, column 4 - line 60, column 36: " + [ v.value0.ignoreCase.constructor.name ]);
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          if (!v.value0.multiline) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 61, column 4 - line 61, column 35: " + [ v.value0.multiline.constructor.name ]);
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          if (!v.value0.sticky) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 62, column 4 - line 62, column 32: " + [ v.value0.sticky.constructor.name ]);
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          if (!v.value0.unicode) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 4 - line 63, column 33: " + [ v.value0.unicode.constructor.name ]);
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["match"] = match;
  exports["regex"] = regex;
  exports["renderFlags"] = renderFlags;
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      // jshint maxparams: 2
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var $56 = comp(x)(y);
                  if ($56 instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if ($56 instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if ($56 instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array line 467, column 15 - line 472, column 1: " + [ $56.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($85) {
          return Data_Maybe.maybe([  ])(singleton)(f($85));
      });
  };
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["null"] = $$null;
  exports["singleton"] = singleton;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["uncons"] = uncons;
  exports["cons"] = $foreign.cons;
  exports["drop"] = $foreign.drop;
  exports["filter"] = $foreign.filter;
  exports["length"] = $foreign.length;
  exports["slice"] = $foreign.slice;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.String.Utils"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var mapChars = function (f) {
      return function ($4) {
          return Data_String.fromCharArray(Data_Functor.map(Data_Functor.functorArray)(f)($foreign.toCharArray($4)));
      };
  };                                      
  var filter = function (p) {
      return function ($5) {
          return Data_String.fromCharArray(Data_Array.filter(p)($foreign.toCharArray($5)));
      };
  };
  exports["filter"] = filter;
  exports["mapChars"] = mapChars;
  exports["includes"] = $foreign.includes;
  exports["length"] = $foreign.length;
  exports["startsWith"] = $foreign.startsWith;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Show = PS["Data.Show"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Alt = PS["Control.Alt"];
  var Data_Boolean = PS["Data.Boolean"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var ParseError = (function () {
      function ParseError(value0) {
          this.value0 = value0;
      };
      ParseError.create = function (value0) {
          return new ParseError(value0);
      };
      return ParseError;
  })();
  var unParser = function (v) {
      return v;
  };
  var $$try = function (v) {
      return function (v1) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v2) {
              var $25 = {};
              for (var $26 in v2) {
                  if ({}.hasOwnProperty.call(v2, $26)) {
                      $25[$26] = v2[$26];
                  };
              };
              $25.pos = v1.pos;
              return $25;
          })(v(v1));
      };
  }; 
  var functorParser = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function ($70) {
              return Data_Functor.map(Data_Either.functorEither)(function (v1) {
                  return {
                      result: f(v1.result), 
                      suffix: v1.suffix
                  };
              })(v($70));
          };
      };
  });
  var fail = function (msg) {
      return function (v) {
          return new Data_Either.Left({
              pos: v.pos, 
              error: new ParseError(msg)
          });
      };
  }; 
  var applyParser = new Control_Apply.Apply(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(v1(v2.suffix))(function (v3) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          result: v2.result(v3.result), 
                          suffix: v3.suffix
                      });
                  });
              });
          };
      };
  });
  var bindParser = new Control_Bind.Bind(function () {
      return applyParser;
  }, function (v) {
      return function (f) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v1) {
                  return unParser(f(v1.result))(v1.suffix);
              });
          };
      };
  });
  var applicativeParser = new Control_Applicative.Applicative(function () {
      return applyParser;
  }, function (a) {
      return function (s) {
          return new Data_Either.Right({
              result: a, 
              suffix: s
          });
      };
  });
  var monadParser = new Control_Monad.Monad(function () {
      return applicativeParser;
  }, function () {
      return bindParser;
  });
  var monadRecParser = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadParser;
  }, function (f) {
      return function (a) {
          var split = function (v) {
              if (v.result instanceof Control_Monad_Rec_Class.Loop) {
                  return new Control_Monad_Rec_Class.Loop({
                      state: v.result.value0, 
                      str: v.suffix
                  });
              };
              if (v.result instanceof Control_Monad_Rec_Class.Done) {
                  return new Control_Monad_Rec_Class.Done({
                      result: v.result.value0, 
                      suffix: v.suffix
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.StringParser line 85, column 7 - line 85, column 70: " + [ v.constructor.name ]);
          };
          return function (str) {
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEither)(function (st) {
                  return Data_Functor.map(Data_Either.functorEither)(split)(unParser(f(st.state))(st.str));
              })({
                  state: a, 
                  str: str
              });
          };
      };
  });
  var altParser = new Control_Alt.Alt(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              var $66 = v(s);
              if ($66 instanceof Data_Either.Left) {
                  if (s.pos === $66.value0.pos) {
                      return v1(s);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Either.Left({
                          error: $66.value0.error, 
                          pos: $66.value0.pos
                      });
                  };
              };
              return $66;
          };
      };
  });
  var plusParser = new Control_Plus.Plus(function () {
      return altParser;
  }, fail("No alternative"));
  var alternativeParser = new Control_Alternative.Alternative(function () {
      return applicativeParser;
  }, function () {
      return plusParser;
  });
  exports["ParseError"] = ParseError;
  exports["fail"] = fail;
  exports["try"] = $$try;
  exports["unParser"] = unParser;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["altParser"] = altParser;
  exports["plusParser"] = plusParser;
  exports["alternativeParser"] = alternativeParser;
  exports["bindParser"] = bindParser;
  exports["monadParser"] = monadParser;
  exports["monadRecParser"] = monadRecParser;
})(PS["Text.Parsing.StringParser"] = PS["Text.Parsing.StringParser"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Function = PS["Data.Function"];        
  var withError = function (p) {
      return function (msg) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Text_Parsing_StringParser.fail(msg));
      };
  };
  var option = function (a) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
      };
  };
  var optionMaybe = function (p) {
      return option(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(p));
  };
  var manyTill = function (p) {
      return function (end) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(end)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value)))(many1Till(p)(end));
      };
  };
  var many1Till = function (p) {
      return function (end) {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(manyTill(p)(end))(function (v1) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Data_List_Types.Cons(v, v1));
              });
          });
      };
  };
  var many = Data_List.manyRec(Text_Parsing_StringParser.monadRecParser)(Text_Parsing_StringParser.alternativeParser);
  var many1 = function (p) {
      return Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_Types.Cons.create)(p))(many(p));
  };
  var sepBy1 = function (p) {
      return function (sep) {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(many(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(sep)(p)))(function (v1) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Data_List_Types.Cons(v, v1));
              });
          });
      };
  };
  var sepBy = function (p) {
      return function (sep) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(sepBy1(p)(sep))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value));
      };
  };
  var choice = function (dictFoldable) {
      return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_StringParser.altParser))(Text_Parsing_StringParser.fail("Nothing to parse"));
  };
  var between = function (open) {
      return function (close) {
          return function (p) {
              return Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(open)(p))(close);
          };
      };
  };
  exports["between"] = between;
  exports["choice"] = choice;
  exports["many"] = many;
  exports["many1"] = many1;
  exports["many1Till"] = many1Till;
  exports["manyTill"] = manyTill;
  exports["option"] = option;
  exports["optionMaybe"] = optionMaybe;
  exports["sepBy"] = sepBy;
  exports["sepBy1"] = sepBy1;
  exports["withError"] = withError;
})(PS["Text.Parsing.StringParser.Combinators"] = PS["Text.Parsing.StringParser.Combinators"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Data_Array = PS["Data.Array"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = PS["Text.Parsing.StringParser.Combinators"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Bind = PS["Control.Bind"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];        
  var string = function (nt) {
      return function (s) {
          if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String["indexOf'"](nt)(s.pos)(s.str))(new Data_Maybe.Just(s.pos))) {
              return new Data_Either.Right({
                  result: nt, 
                  suffix: {
                      str: s.str, 
                      pos: s.pos + Data_String.length(nt) | 0
                  }
              });
          };
          return new Data_Either.Left({
              pos: s.pos, 
              error: new Text_Parsing_StringParser.ParseError("Expected '" + (nt + "'."))
          });
      };
  };
  var regex = function (pat) {
      var pattern = (function () {
          var $14 = Data_String.stripPrefix("^")(pat);
          if ($14 instanceof Data_Maybe.Nothing) {
              return "^" + pat;
          };
          return pat;
      })();
      var matchRegex = function (r) {
          return function (v) {
              var remainder = Data_String.drop(v.pos)(v.str);
              var $16 = Data_Array.uncons(Data_Maybe.fromMaybe([  ])(Data_String_Regex.match(r)(remainder)));
              if ($16 instanceof Data_Maybe.Just && $16.value0.head instanceof Data_Maybe.Just) {
                  return new Data_Either.Right({
                      result: $16.value0.head.value0, 
                      suffix: {
                          str: v.str, 
                          pos: v.pos + Data_String.length($16.value0.head.value0) | 0
                      }
                  });
              };
              return new Data_Either.Left({
                  pos: v.pos, 
                  error: new Text_Parsing_StringParser.ParseError("no match")
              });
          };
      };
      var $23 = Data_String_Regex.regex(pattern)(Data_String_Regex_Flags.noFlags);
      if ($23 instanceof Data_Either.Left) {
          return Text_Parsing_StringParser.fail("Text.Parsing.StringParser.String.regex': illegal regex " + pat);
      };
      if ($23 instanceof Data_Either.Right) {
          return matchRegex($23.value0);
      };
      throw new Error("Failed pattern match at Text.Parsing.StringParser.String line 121, column 3 - line 125, column 19: " + [ $23.constructor.name ]);
  };
  var eof = function (s) {
      if (s.pos < Data_String.length(s.str)) {
          return new Data_Either.Left({
              pos: s.pos, 
              error: new Text_Parsing_StringParser.ParseError("Expected EOF")
          });
      };
      return new Data_Either.Right({
          result: Data_Unit.unit, 
          suffix: s
      });
  };
  var anyChar = function (v) {
      var $30 = Data_String.charAt(v.pos)(v.str);
      if ($30 instanceof Data_Maybe.Just) {
          return new Data_Either.Right({
              result: $30.value0, 
              suffix: {
                  str: v.str, 
                  pos: v.pos + 1 | 0
              }
          });
      };
      if ($30 instanceof Data_Maybe.Nothing) {
          return new Data_Either.Left({
              pos: v.pos, 
              error: new Text_Parsing_StringParser.ParseError("Unexpected EOF")
          });
      };
      throw new Error("Failed pattern match at Text.Parsing.StringParser.String line 45, column 3 - line 47, column 64: " + [ $30.constructor.name ]);
  };  
  var satisfy = function (f) {
      return Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (v) {
          var $39 = f(v);
          if ($39) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v);
          };
          if (!$39) {
              return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(v) + " did not satisfy predicate"));
          };
          throw new Error("Failed pattern match at Text.Parsing.StringParser.String line 68, column 3 - line 72, column 1: " + [ $39.constructor.name ]);
      }));
  };
  var $$char = function (c) {
      return Text_Parsing_StringParser_Combinators.withError(satisfy(function (v) {
          return v === c;
      }))("Could not match character " + Data_Show.show(Data_Show.showChar)(c));
  };
  exports["anyChar"] = anyChar;
  exports["char"] = $$char;
  exports["eof"] = eof;
  exports["regex"] = regex;
  exports["satisfy"] = satisfy;
  exports["string"] = string;
})(PS["Text.Parsing.StringParser.String"] = PS["Text.Parsing.StringParser.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Data_Either = PS["Data.Either"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String_Utils = PS["Data.String.Utils"];
  var Data_String = PS["Data.String"];
  var Data_Int = PS["Data.Int"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Tuple = PS["Data.Tuple"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_String = PS["Text.Parsing.StringParser.String"];
  var Text_Parsing_StringParser_Combinators = PS["Text.Parsing.StringParser.Combinators"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Apply = PS["Control.Apply"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];
  var Data_Ring = PS["Data.Ring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];        
  var TempoDesignation = (function () {
      function TempoDesignation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TempoDesignation.create = function (value0) {
          return function (value1) {
              return new TempoDesignation(value0, value1);
          };
      };
      return TempoDesignation;
  })();
  var tupletLength = Text_Parsing_StringParser_String.regex("[2-9]");
  var tup = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Control_Bind.join(Data_Maybe.bindMaybe))(Text_Parsing_StringParser_Combinators.optionMaybe(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String["char"](":"))(Text_Parsing_StringParser_Combinators.optionMaybe(tupletLength))));
  var toTupletInt = function (s) {
      return Data_Maybe.fromMaybe(3)(Data_Int.fromString(s));
  };
  var tab = Text_Parsing_StringParser_String["char"]("\x09");
  var strToEol = Text_Parsing_StringParser_String.regex("[^\x0d\x0a]*");
  var space = Text_Parsing_StringParser_String["char"](" ");
  var whiteSpace = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_String.singleton))(Text_Parsing_StringParser_Combinators.many(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ space, tab ])));
  var unsupportedHeaderCode = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.regex("[a-qt-vx-zEJ]:"))(whiteSpace);
  var unsupportedHeader = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.UnsupportedHeader.value)(unsupportedHeaderCode))(strToEol))("unsupported header");
  var slur = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Slur.create)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_String["char"]("("))(Text_Parsing_StringParser_String["char"](")"))))("slur");
  var shortDecoration = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_String.regex("[\\.~HLMOPSTuv]"))("short decoration");
  var sharpOrFlat = Data_Functor.map(Text_Parsing_StringParser.functorParser)(function (x) {
      var $6 = x === "#";
      if ($6) {
          return Data_Abc.Sharp.value;
      };
      if (!$6) {
          return Data_Abc.Flat.value;
      };
      throw new Error("Failed pattern match at Data.Abc.Parser line 932, column 13 - line 935, column 21: " + [ $6.constructor.name ]);
  })(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_String["char"]("#"))(Text_Parsing_StringParser_String["char"]("b")));
  var scoreSpace = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ tab, Text_Parsing_StringParser_String["char"]("y"), space ]);
  var spacer = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Spacer.create)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List.length)(Text_Parsing_StringParser_Combinators.many1(scoreSpace))))("space");
  var scientificPitchNotation = function (pc) {
      return function (oct) {
          var $7 = Data_String_Utils.includes(pc)("ABCDEFG");
          if ($7) {
              return Data_Abc.middlecOctave + oct | 0;
          };
          if (!$7) {
              return (Data_Abc.middlecOctave + 1 | 0) + oct | 0;
          };
          throw new Error("Failed pattern match at Data.Abc.Parser line 1149, column 5 - line 1154, column 32: " + [ $7.constructor.name ]);
      };
  };
  var runParser1 = function (v) {
      return function (s) {
          var formatErr = function (v1) {
              return {
                  pos: v1.pos, 
                  error: v1.error.value0
              };
          };
          return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(formatErr)(function (v1) {
              return v1.result;
          })(v({
              str: s, 
              pos: 0
          }));
      };
  };
  var quotedString = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.string("\""))(Text_Parsing_StringParser_String.regex("(\\\\\"|[^\"\x0a])*")))(Text_Parsing_StringParser_String.string("\"")))("quoted string");
  var spacedQuotedString = Text_Parsing_StringParser["try"](Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(quotedString))(whiteSpace));
  var pitch = Text_Parsing_StringParser_String.regex("[A-Ga-g]");
  var phrygian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Phrygian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[P|p][H|h][R|r][A-Za-z]*"));
  var octaveShift = function (s) {
      var up = Data_String_Utils.length(Data_String_Utils.filter(Data_Eq.eq(Data_Eq.eqChar)("'"))(s));
      var down = Data_String_Utils.length(Data_String_Utils.filter(Data_Eq.eq(Data_Eq.eqChar)(","))(s));
      return up - down | 0;
  };
  var nometer = Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Maybe.Nothing.value)(Text_Parsing_StringParser_String.string("none"));
  var newline = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_String.satisfy(Data_Eq.eq(Data_Eq.eqChar)("\x0a")))("expected newline");
  var moveOctave = Data_Functor.map(Text_Parsing_StringParser.functorParser)(octaveShift)(Text_Parsing_StringParser_String.regex("[',]*"));
  var mixolydian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Mixolydian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[M|m][I|i][X|x][A-Za-z]*"));
  var minor = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Minor.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[M|m][A-Za-z]*"));
  var maybeTie = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.optionMaybe(Text_Parsing_StringParser_String["char"]("-")))("tie");
  var manyTill1 = Text_Parsing_StringParser_Combinators.manyTill;
  var major = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Major.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[M|m][A|a][J|j][A-Za-z]*"));
  var lydian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Lydian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[L|l][Y|y][D|d][A-Za-z]*"));
  var lookupPitch = function (p) {
      var $14 = Data_String.toUpper(p);
      if ($14 === "A") {
          return Data_Abc.A.value;
      };
      if ($14 === "B") {
          return Data_Abc.B.value;
      };
      if ($14 === "C") {
          return Data_Abc.C.value;
      };
      if ($14 === "D") {
          return Data_Abc.D.value;
      };
      if ($14 === "E") {
          return Data_Abc.E.value;
      };
      if ($14 === "F") {
          return Data_Abc.F.value;
      };
      if ($14 === "G") {
          return Data_Abc.G.value;
      };
      return Data_Abc.C.value;
  };
  var longDecoration = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_String["char"]("!"))(Text_Parsing_StringParser_String["char"]("!"))(Text_Parsing_StringParser_String.regex("[^\x0d\x0a!]*")))("long decoration");
  var locrian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Locrian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[L|l][O|o][C|c][A-Za-z]*"));
  var keyName = Text_Parsing_StringParser_String.regex("[A-G]");
  var ionian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Ionian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[I|i][O|o][N|n][A-Za-z]*"));
  var inlineInfo = function (isInline) {
      var pattern = (function () {
          if (isInline) {
              return "[^\x0d\x0a\\[\\]]*";
          };
          if (!isInline) {
              return "[^\x0d\x0a]*";
          };
          throw new Error("Failed pattern match at Data.Abc.Parser line 629, column 13 - line 633, column 5: " + [ isInline.constructor.name ]);
      })();
      return Text_Parsing_StringParser_String.regex(pattern);
  };
  var ignore = Text_Parsing_StringParser_Combinators.withError(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Ignore.value)(Text_Parsing_StringParser_String.regex("[#@;`\\*\\?]+")))("ignored character");
  var headerCode = function (c) {
      var pattern = Data_String.fromCharArray([ c, ":" ]);
      return Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.string(pattern))(whiteSpace);
  };
  var history = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.History.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("H"))(strToEol)))("H header");
  var instruction = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Instruction.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("I"))(inlineInfo(isInline))))("I header");
  };
  var macro = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Macro.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("m"))(inlineInfo(isInline))))("m header");
  };
  var notes = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Notes.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("N"))(inlineInfo(isInline))))("N header");
  };
  var origin = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Origin.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("O"))(strToEol)))("O header");
  var parts = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Parts.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("P"))(inlineInfo(isInline))))("P header");
  };
  var remark = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Remark.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("r"))(inlineInfo(isInline))))("r header");
  };
  var rhythm = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Rhythm.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("R"))(inlineInfo(isInline))))("R header");
  };
  var source = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Source.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("S"))(strToEol)))("S header");
  var symbolLine = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.SymbolLine.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("s"))(inlineInfo(isInline))))("s header");
  };
  var title = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Title.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("T"))(inlineInfo(isInline))))("T header");
  };
  var transcription = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Transcription.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("Z"))(strToEol)))("Z header");
  var userDefined = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.UserDefined.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("U"))(inlineInfo(isInline))))("U header");
  };
  var voice = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Voice.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("V"))(inlineInfo(isInline))))("V header");
  };
  var wordsAfter = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.WordsAfter.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("W"))(inlineInfo(isInline))))("W header");
  };
  var wordsAligned = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.WordsAligned.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("w"))(inlineInfo(isInline))))("w header");
  };
  var tuneBodyOnlyInfo = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ symbolLine(isInline), wordsAligned(isInline) ]))("tune body only info");
  };
  var group = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Group.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("G"))(strToEol)))("G header");
  var fileUrl = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.FileUrl.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("F"))(strToEol)))("F header");
  var fieldContinuation = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.FieldContinuation.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("+"))(strToEol)))("field continuation");
  var endOfLine = Text_Parsing_StringParser_String.regex("\x0d\x0a");
  var dorian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Dorian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[D|d][O|o][R|r][A-Za-z]*"));
  var discography = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Discography.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("D"))(strToEol)))("D header");
  var decoration = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Decoration.create)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(shortDecoration)(longDecoration)))("decoration");
  var cutTime = Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(new Data_Maybe.Just(new Data_Tuple.Tuple(2, 2)))(Text_Parsing_StringParser_String.string("C|"));
  var crlf = Text_Parsing_StringParser_Combinators.withError(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)("\x0a")(endOfLine))("expected crlf");
  var eol = Control_Alt.alt(Text_Parsing_StringParser.altParser)(newline)(crlf);
  var continuation = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Continuation.value)(Text_Parsing_StringParser_String["char"]("\\")))(Text_Parsing_StringParser_String.regex("[^\x0d\x0a]*")))("continuation");
  var composer = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Composer.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("C"))(strToEol)))("C header");
  var commonTime = Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(new Data_Maybe.Just(new Data_Tuple.Tuple(4, 4)))(Text_Parsing_StringParser_String["char"]("C"));
  var comment = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Comment.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.regex("%"))(strToEol)))("comment");
  var chordSymbol = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.ChordSymbol.create)(quotedString))("chord symbol");
  var buildTupletSignature = function (ps) {
      return function (mq) {
          return function (mr) {
              var p = toTupletInt(ps);
              var qdefault = (function () {
                  if (p === 2) {
                      return 3;
                  };
                  if (p === 3) {
                      return 2;
                  };
                  if (p === 4) {
                      return 3;
                  };
                  if (p === 6) {
                      return 2;
                  };
                  if (p === 8) {
                      return 3;
                  };
                  return 2;
              })();
              var q = Data_Maybe.fromMaybe(qdefault)(Data_Functor.map(Data_Maybe.functorMaybe)(toTupletInt)(mq));
              var r = Data_Maybe.fromMaybe(p)(Data_Functor.map(Data_Maybe.functorMaybe)(toTupletInt)(mr));
              return {
                  p: p, 
                  q: q, 
                  r: r
              };
          };
      };
  };
  var tupletSignature = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTupletSignature)(tupletLength))(tup))(tup))(whiteSpace);
  var buildTempoSignature3 = function (bpm) {
      var noteLengths = Data_List.singleton(Data_Rational.rational(1)(4));
      return {
          noteLengths: noteLengths, 
          bpm: bpm, 
          marking: Data_Maybe.Nothing.value
      };
  };
  var buildTempoSignature = function (marking) {
      return function (td) {
          return {
              noteLengths: td.value0, 
              bpm: td.value1, 
              marking: marking
          };
      };
  };
  var buildTempoSignature2 = function (marking) {
      return function (td) {
          return buildTempoSignature(new Data_Maybe.Just(marking))(td);
      };
  };
  var buildRationalFromSlashList = function (xs) {
      var f = function (i) {
          return Data_Rational.rational(1)(Data_Int.pow(2)(i));
      };
      return f(Data_List.length(xs));
  };
  var manySlashes = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildRationalFromSlashList)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_Types.Cons.create)(Text_Parsing_StringParser_String["char"]("/")))(Text_Parsing_StringParser_Combinators.many1(Text_Parsing_StringParser_String["char"]("/"))));
  var buildNote = function (macc) {
      return function (pitchStr) {
          return function (octave) {
              return function (ml) {
                  return function (mt) {
                      var tied = (function () {
                          if (mt instanceof Data_Maybe.Just) {
                              return true;
                          };
                          return false;
                      })();
                      var spn = scientificPitchNotation(pitchStr)(octave);
                      var p = lookupPitch(Data_String.toUpper(pitchStr));
                      var l = Data_Maybe.fromMaybe(Data_Rational.rational(1)(1))(ml);
                      return {
                          pitchClass: p, 
                          accidental: macc, 
                          octave: spn, 
                          duration: l, 
                          tied: tied
                      };
                  };
              };
          };
      };
  };
  var buildKeySignature = function (pStr) {
      return function (ma) {
          return function (mm) {
              return {
                  pitchClass: lookupPitch(pStr), 
                  accidental: ma, 
                  mode: Data_Maybe.fromMaybe(Data_Abc.Major.value)(mm)
              };
          };
      };
  };
  var buildKeyAccidental = function (a) {
      return function (pitchStr) {
          return {
              pitchClass: lookupPitch(pitchStr), 
              accidental: a
          };
      };
  };
  var buildKey = function (code) {
      return function (ks) {
          return function (kas) {
              return new Data_Abc.Key({
                  keySignature: ks, 
                  modifications: kas
              });
          };
      };
  };
  var buildChord = function (ns) {
      return function (ml) {
          var l = Data_Maybe.fromMaybe(Data_Rational.fromInt(1))(ml);
          return {
              notes: ns, 
              duration: l
          };
      };
  };
  var buildBrokenOperator = function (s) {
      var $22 = Data_String_Utils.startsWith("<")(s);
      if ($22) {
          return new Data_Abc.LeftArrow(Data_String_Utils.length(s));
      };
      if (!$22) {
          return new Data_Abc.RightArrow(Data_String_Utils.length(s));
      };
      throw new Error("Failed pattern match at Data.Abc.Parser line 1084, column 5 - line 1087, column 30: " + [ $22.constructor.name ]);
  };
  var buildBarline = function (s) {
      return function (i) {
          var thickness = (function () {
              var $23 = Data_String_Utils.includes("|]")(s);
              if ($23) {
                  return Data_Abc.ThinThick.value;
              };
              if (!$23) {
                  var $24 = Data_String_Utils.includes("[|")(s);
                  if ($24) {
                      return Data_Abc.ThickThin.value;
                  };
                  if (!$24) {
                      var $25 = Data_String_Utils.includes("||")(s);
                      if ($25) {
                          return Data_Abc.ThinThin.value;
                      };
                      if (!$25) {
                          return Data_Abc.Thin.value;
                      };
                      throw new Error("Failed pattern match at Data.Abc.Parser line 1044, column 18 - line 1047, column 21: " + [ $25.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Abc.Parser line 1042, column 18 - line 1047, column 21: " + [ $24.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Abc.Parser line 1040, column 13 - line 1047, column 21: " + [ $23.constructor.name ]);
          })();
          var f = function (c) {
              if (c === "[") {
                  return "|";
              };
              if (c === "]") {
                  return "|";
              };
              return c;
          };
          var normalised = Data_String_Utils.mapChars(f)(s);
          var repeatCount = Data_String_Utils.length(Data_String_Utils.filter(function (c) {
              return c === ":";
          })(normalised));
          var repeat = (function () {
              var $27 = repeatCount === 0;
              if ($27) {
                  return Data_Maybe.Nothing.value;
              };
              if (!$27) {
                  var $28 = repeatCount === 1;
                  if ($28) {
                      var $29 = Data_String_Utils.includes(":|")(normalised);
                      if ($29) {
                          return new Data_Maybe.Just(Data_Abc.End.value);
                      };
                      if (!$29) {
                          return new Data_Maybe.Just(Data_Abc.Begin.value);
                      };
                      throw new Error("Failed pattern match at Data.Abc.Parser line 1073, column 17 - line 1076, column 31: " + [ $29.constructor.name ]);
                  };
                  if (!$28) {
                      return new Data_Maybe.Just(Data_Abc.BeginAndEnd.value);
                  };
                  throw new Error("Failed pattern match at Data.Abc.Parser line 1072, column 18 - line 1078, column 33: " + [ $28.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Abc.Parser line 1070, column 13 - line 1078, column 33: " + [ $27.constructor.name ]);
          })();
          return new Data_Abc.Barline({
              thickness: thickness, 
              repeat: repeat, 
              iteration: i
          });
      };
  };
  var buildBar = function (t) {
      return function (r) {
          return function (i) {
              return {
                  thickness: t, 
                  repeat: r, 
                  iteration: i
              };
          };
      };
  };
  var buildAnnotation = function (s) {
      var firstChar = Data_String.charAt(0)(s);
      var placement = (function () {
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === "^") {
              return Data_Abc.AboveNextSymbol.value;
          };
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === "_") {
              return Data_Abc.BelowNextSymbol.value;
          };
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === "<") {
              return Data_Abc.LeftOfNextSymbol.value;
          };
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === ">") {
              return Data_Abc.RightOfNextSymbol.value;
          };
          return Data_Abc.Discretional.value;
      })();
      return new Data_Abc.Annotation(placement, s);
  };
  var buildAccidental = function (s) {
      if (s === "^^") {
          return Data_Abc.DoubleSharp.value;
      };
      if (s === "__") {
          return Data_Abc.DoubleFlat.value;
      };
      if (s === "^") {
          return Data_Abc.Sharp.value;
      };
      if (s === "_") {
          return Data_Abc.Flat.value;
      };
      return Data_Abc.Natural.value;
  };
  var buildAbcTune = function (hs) {
      return function (b) {
          return {
              headers: hs, 
              body: b
          };
      };
  };
  var brokenRhythmOperator = Text_Parsing_StringParser_String.regex("(<+|>+)");
  var brokenRhythmTie = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBrokenOperator)(brokenRhythmOperator))(whiteSpace);
  var book = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Book.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("B"))(strToEol)))("B Header");
  var barSeparator = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser_String.string("[|"), Text_Parsing_StringParser_String.string("|]:"), Text_Parsing_StringParser_String.string("|]"), Text_Parsing_StringParser_String.string("]|:"), Text_Parsing_StringParser_String.string("]|"), Text_Parsing_StringParser_String.string(":[|"), Text_Parsing_StringParser_String.string("|:"), Text_Parsing_StringParser_String.string(":|:"), Text_Parsing_StringParser_String.string(":||:"), Text_Parsing_StringParser_String.string(":|]"), Text_Parsing_StringParser_String.string(":||"), Text_Parsing_StringParser_String.string(":|"), Text_Parsing_StringParser_String.string("::"), Text_Parsing_StringParser_String.string("||:"), Text_Parsing_StringParser_String.string("||"), Text_Parsing_StringParser_String.string("|") ]);
  var area = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Area.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("A"))(strToEol)))("A header");
  var anyInt = Text_Parsing_StringParser_String.regex("(0|[1-9][0-9]*)");
  var $$int = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Functor.map(Data_Functor.functorFn)(Data_Maybe.fromMaybe(1))(Data_Int.fromString))(anyInt))("expected a positive integer");
  var anyRat = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Rational.rational)(Text_Parsing_StringParser_Combinators.option(1)($$int)))(Text_Parsing_StringParser_String["char"]("/")))(Text_Parsing_StringParser_Combinators.option(2)($$int));
  var degenerateBarRepeat = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Barline.create)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBar(Data_Abc.Thin.value)(Data_Maybe.Nothing.value))(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(Text_Parsing_StringParser_String["char"]("[")))($$int))));
  var degenerateTempo = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTempoSignature3)($$int);
  var integralAsRational = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Rational.fromInt)($$int);
  var noteDur = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](manySlashes), Text_Parsing_StringParser["try"](anyRat), integralAsRational ]);
  var rest = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Rest.create)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.fromMaybe(Data_Rational.fromInt(1)))(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.regex("[XxZz]"))(Text_Parsing_StringParser_Combinators.optionMaybe(noteDur)))))("rest");
  var meterSignature = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Tuple.Tuple.create)($$int))(Text_Parsing_StringParser_String["char"]("/")))($$int))(whiteSpace));
  var meterDefinition = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ cutTime, commonTime, meterSignature, nometer ]);
  var meter = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Meter.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("M"))(meterDefinition)))("M header");
  var rational = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Rational.rational)($$int))(Text_Parsing_StringParser_String["char"]("/")))($$int);
  var headerRational = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(rational)(whiteSpace);
  var noteDuration = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(rational)(whiteSpace);
  var unitNoteLength = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.UnitNoteLength.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("L"))(noteDuration)))("L header");
  var referenceNumber = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.ReferenceNumber.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("X"))($$int)))("x header");
  var tuneInfo = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ area, book, composer, discography, fileUrl, group, history, origin, source, referenceNumber, transcription, unsupportedHeader ]))("tune info");
  var repeatSection = $$int;
  var normalBarline = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBarline)(barSeparator))(Text_Parsing_StringParser_Combinators.optionMaybe(repeatSection)))("barline");
  var barline = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ normalBarline, degenerateBarRepeat ]);
  var tempoDesignation = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(TempoDesignation.create)(Text_Parsing_StringParser_Combinators.many1(headerRational)))(Text_Parsing_StringParser_String["char"]("=")))($$int);
  var prefixedTempoDesignation = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTempoSignature2)(spacedQuotedString))(tempoDesignation);
  var suffixedTempoDesignation = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Function.flip(buildTempoSignature2))(tempoDesignation))(spacedQuotedString);
  var unlabelledTempoDesignation = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTempoSignature(Data_Maybe.Nothing.value))(tempoDesignation);
  var tempoSignature = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](suffixedTempoDesignation), Text_Parsing_StringParser["try"](unlabelledTempoDesignation), degenerateTempo, prefixedTempoDesignation ]))(whiteSpace);
  var tempo = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Tempo.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("Q"))(tempoSignature)))("Q header");
  var annotationString = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String.string("\""))(Text_Parsing_StringParser_String.regex("[\\^\\>\\<-@](\\\\\"|[^\"\x0a])*")))(Text_Parsing_StringParser_String.string("\"")))("annotation");
  var annotation = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildAnnotation)(annotationString))("annotation");
  var aeolian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Aeolian.value)(whiteSpace))(Text_Parsing_StringParser_String.regex("[A|a][E|e][O|o][A-Za-z]*"));
  var mode = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](major), ionian, dorian, phrygian, lydian, mixolydian, aeolian, locrian, minor ]);
  var keySignature = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildKeySignature)(keyName))(Text_Parsing_StringParser_Combinators.optionMaybe(sharpOrFlat)))(whiteSpace))(Text_Parsing_StringParser_Combinators.optionMaybe(mode));
  var accidental = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildAccidental)(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser_String.string("^^"), Text_Parsing_StringParser_String.string("__"), Text_Parsing_StringParser_String.string("^"), Text_Parsing_StringParser_String.string("_"), Text_Parsing_StringParser_String.string("=") ]));
  var keyAccidental = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildKeyAccidental)(accidental))(pitch);
  var keyAccidentals = Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(Text_Parsing_StringParser_Combinators.sepBy(keyAccidental)(space));
  var key = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildKey)(headerCode("K")))(keySignature))(keyAccidentals))("K header");
  var anywhereInfo = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ instruction(isInline), key, unitNoteLength, meter, macro(isInline), notes(isInline), parts(isInline), tempo, rhythm(isInline), remark(isInline), title(isInline), userDefined(isInline), voice(isInline), wordsAfter(isInline), fieldContinuation, comment ]))("anywhere info");
  };
  var informationField = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ anywhereInfo(isInline), tuneInfo ]))("header");
  };
  var header = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(informationField(false))(eol);
  var headers = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.many(header))("headers");
  var tuneBodyInfo = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ tuneBodyOnlyInfo(isInline), anywhereInfo(isInline) ]))("tune body info");
  };
  var inline = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Inline.create)(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_String["char"]("["))(Text_Parsing_StringParser_String["char"]("]"))(tuneBodyInfo(true))))("inline header");
  var tuneBodyHeader = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.BodyInfo.create)(tuneBodyInfo(true)))(eol))("tune body header");
  var maybeAccidental = Text_Parsing_StringParser_Combinators.optionMaybe(accidental);
  var acciaccatura = Data_Functor.map(Text_Parsing_StringParser.functorParser)(function (v) {
      return true;
  })(Text_Parsing_StringParser_Combinators.optionMaybe(Text_Parsing_StringParser_String["char"]("/")));
  var abcNote = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildNote)(maybeAccidental))(pitch))(moveOctave))(Text_Parsing_StringParser_Combinators.optionMaybe(noteDur)))(maybeTie))("ABC note");
  var brokenRhythmPair = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.BrokenRhythmPair.create)(abcNote))(brokenRhythmTie))(abcNote))("broken rhythm pair");
  var grace = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.GraceNote.create)(acciaccatura))(Text_Parsing_StringParser_Combinators.many1(abcNote));
  var graceNote = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_String["char"]("{"))(Text_Parsing_StringParser_String["char"]("}"))(grace))("grace note");
  var note = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Note.create)(abcNote);
  var tuplet = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Tuplet.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_String["char"]("("))(tupletSignature)))(Text_Parsing_StringParser_Combinators.many1(abcNote)))("tuplet");
  var abcChord = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildChord)(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_String["char"]("["))(Text_Parsing_StringParser_String["char"]("]"))(Text_Parsing_StringParser_Combinators.many1(abcNote))))(Text_Parsing_StringParser_Combinators.optionMaybe(noteDur)))("ABC chord");
  var chord = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Chord.create)(abcChord))("chord");
  var scoreItem = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](chord), Text_Parsing_StringParser["try"](inline), continuation, ignore, spacer, decoration, chordSymbol, annotation, graceNote, Text_Parsing_StringParser["try"](tuplet), slur, rest, Text_Parsing_StringParser["try"](brokenRhythmPair), note, barline ]))("score item");
  var score = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Score.create)(manyTill1(scoreItem)(eol));
  var body = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_Types.Cons.create)(score))(Text_Parsing_StringParser_Combinators.manyTill(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser["try"](tuneBodyHeader))(score))(Text_Parsing_StringParser_String.eof));
  var abc = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildAbcTune)(headers))(body);
  var parse = function (s) {
      var $40 = runParser1(abc)(s);
      if ($40 instanceof Data_Either.Right) {
          return new Data_Either.Right($40.value0);
      };
      if ($40 instanceof Data_Either.Left) {
          return new Data_Either.Left($40.value0);
      };
      throw new Error("Failed pattern match at Data.Abc.Parser line 1380, column 5 - line 1385, column 19: " + [ $40.constructor.name ]);
  };
  exports["parse"] = parse;
})(PS["Data.Abc.Parser"] = PS["Data.Abc.Parser"] || {});
(function(exports) {
    "use strict";

  var wrapper = function() {

    var vextab = null;
    var artist = null;
    var renderer = null;

    return {

      initialise : function (config) {
        return function () {
          return wrapper.init(config);
        }
      },

      render : function (text) {
        return function () {
          try {
             vextab.reset();
             artist.reset();
             vextab.parse(text);
             artist.render(renderer);
             return true;
          } catch (e) {
             console.log (e.message);
             return false;
          }
        }
      },

      init: function (config) {
        console.log(config);

        // var VexTab = VexTabDiv;
        var Artist = VexTabDiv.Artist;
        var Renderer = Vex.Flow.Renderer;
        var vexDiv = $(config.canvasDivId)[0];

        Artist.DEBUG = true;
        VexTab.DEBUG = false;

        try {
           // Create VexFlow Renderer from canvas element with id vexDiv
           renderer = new Renderer(vexDiv, Renderer.Backends.CANVAS);

           // Initialize VexTab artist and parser.
           artist = new Artist(config.canvasX, config.canvasY, config.canvasWidth, {scale: config.scale});
           vextab = new VexTab(artist);
           return true;
         } catch (e) {
            console.log (e.message);
            return false;
         }
      }

    }

  }();

  exports.initialise = wrapper.initialise;
  exports.render = wrapper.render;
})(PS["VexTab.Score"] = PS["VexTab.Score"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["VexTab.Score"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["initialise"] = $foreign.initialise;
  exports["render"] = $foreign.render;
})(PS["VexTab.Score"] = PS["VexTab.Score"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Abc = PS["Data.Abc"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_String = PS["Data.String"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Either = PS["Data.Either"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Function = PS["Data.Function"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var rational = function (v) {
      return Data_Show.show(Data_Show.showInt)(v.value0) + ("/" + Data_Show.show(Data_Show.showInt)(v.value1));
  };
  var pitch = function (octaveNumber) {
      return function (p) {
          var $19 = octaveNumber <= Data_Abc.middlecOctave;
          if ($19) {
              return Data_Show.show(Data_Abc.showPitchClass)(p);
          };
          if (!$19) {
              return Data_String.toLower(Data_Show.show(Data_Abc.showPitchClass)(p));
          };
          throw new Error("Failed pattern match at Data.Abc.Canonical line 156, column 5 - line 159, column 29: " + [ $19.constructor.name ]);
      };
  };
  var octave = function (i) {
      var octaveAboveMiddleC = Data_Abc.middlecOctave + 1 | 0;
      var $20 = i === Data_Abc.middlecOctave || i === octaveAboveMiddleC;
      if ($20) {
          return "";
      };
      if (!$20) {
          var $21 = i > octaveAboveMiddleC;
          if ($21) {
              return Data_String.take(i - octaveAboveMiddleC | 0)("''''''''''");
          };
          if (!$21) {
              return Data_String.take(Data_Abc.middlecOctave - i | 0)(",,,,,,,,,,");
          };
          throw new Error("Failed pattern match at Data.Abc.Canonical line 148, column 14 - line 154, column 1: " + [ $21.constructor.name ]);
      };
      throw new Error("Failed pattern match at Data.Abc.Canonical line 146, column 9 - line 154, column 1: " + [ $20.constructor.name ]);
  };
  var duration = function (v) {
      if (v.value0 === 1 && v.value1 === 1) {
          return "";
      };
      if (v.value0 === 1 && v.value1 === 2) {
          return "/";
      };
      if (v.value1 === 1) {
          return Data_Show.show(Data_Show.showInt)(v.value0);
      };
      return rational(v);
  };
  var abcNote = function (a) {
      var tie = (function () {
          if (a.tied) {
              return "-";
          };
          return "";
      })();
      var acc = Data_Maybe.fromMaybe("")(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Show.show(Data_Abc.showAccidental))(a.accidental));
      return acc + (pitch(a.octave)(a.pitchClass) + (octave(a.octave) + (duration(a.duration) + tie)));
  };
  var notes = function (ns) {
      var f = function (a) {
          return function (acc) {
              return abcNote(a) + acc;
          };
      };
      return Data_Foldable.foldr(Data_List_Types.foldableList)(f)("")(ns);
  };
  var abcChord = function (a) {
      return "[" + (notes(a.notes) + ("]" + duration(a.duration)));
  };
  exports["abcChord"] = abcChord;
  exports["abcNote"] = abcNote;
})(PS["Data.Abc.Canonical"] = PS["Data.Abc.Canonical"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return function (k) {
          return function (tree) {
              if (tree instanceof Leaf) {
                  return Data_Maybe.Nothing.value;
              };
              var comp = Data_Ord.compare(dictOrd);
              var __unused = function (dictPartial1) {
                  return function ($dollar43) {
                      return $dollar43;
                  };
              };
              return __unused()((function () {
                  if (tree instanceof Two) {
                      var $189 = comp(k)(tree.value1);
                      if ($189 instanceof Data_Ordering.EQ) {
                          return new Data_Maybe.Just(tree.value2);
                      };
                      if ($189 instanceof Data_Ordering.LT) {
                          return lookup(dictOrd)(k)(tree.value0);
                      };
                      return lookup(dictOrd)(k)(tree.value3);
                  };
                  if (tree instanceof Three) {
                      var $194 = comp(k)(tree.value1);
                      if ($194 instanceof Data_Ordering.EQ) {
                          return new Data_Maybe.Just(tree.value2);
                      };
                      var $196 = comp(k)(tree.value4);
                      if ($196 instanceof Data_Ordering.EQ) {
                          return new Data_Maybe.Just(tree.value5);
                      };
                      if ($194 instanceof Data_Ordering.LT) {
                          return lookup(dictOrd)(k)(tree.value0);
                      };
                      if ($196 instanceof Data_Ordering.GT) {
                          return lookup(dictOrd)(k)(tree.value6);
                      };
                      return lookup(dictOrd)(k)(tree.value3);
                  };
                  throw new Error("Failed pattern match at Data.Map line 149, column 10 - line 163, column 39: " + [ tree.constructor.name ]);
              })());
          };
      };
  }; 
  var fromZipper = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_tree) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var tree = __copy_tree;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof TwoRight) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 240, column 3 - line 245, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 238, column 1 - line 238, column 27: " + [ v.constructor.name, tree.constructor.name ]);
              };
          };
      };
  };
  var insert = function (dictOrd) {
      var up = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List_Types.Nil) {
                      return new Two(v1.value0, v1.value1, v1.value2, v1.value3);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          return fromZipper(dictOrd)(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, v.value0.value0, v.value0.value1, v.value0.value2));
                      };
                      if (v.value0 instanceof TwoRight) {
                          return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0, v1.value1, v1.value2, v1.value3));
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2, v1.value3), v.value0.value0, v.value0.value1, new Two(v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0), v1.value1, v1.value2, new Two(v1.value3, v.value0.value3, v.value0.value4, v.value0.value5));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3), v.value0.value4, v.value0.value5, new Two(v1.value0, v1.value1, v1.value2, v1.value3));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 276, column 5 - line 281, column 104: " + [ v.value0.constructor.name, v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 274, column 3 - line 274, column 54: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      var comp = Data_Ord.compare(dictOrd);
      var down = function (__copy_ctx) {
          return function (__copy_k) {
              return function (__copy_v) {
                  return function (__copy_v1) {
                      var ctx = __copy_ctx;
                      var k = __copy_k;
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v1 instanceof Leaf) {
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var $317 = comp(k)(v1.value1);
                              if ($317 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if ($317 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value0;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var __tco_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three) {
                              var $322 = comp(k)(v1.value1);
                              if ($322 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var $324 = comp(k)(v1.value4);
                              if ($324 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if ($322 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value0;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              if ($322 instanceof Data_Ordering.GT && $324 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value3;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var __tco_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value6;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.Map line 257, column 3 - line 257, column 52: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
          };
      };
      return down(Data_List_Types.Nil.value);
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  exports["empty"] = empty;
  exports["fromFoldable"] = fromFoldable;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_Accidentals = PS["Data.Abc.Accidentals"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];        
  var sharpScale = new Data_List_Types.Cons({
      pitchClass: Data_Abc.C.value, 
      accidental: Data_Abc.Natural.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.C.value, 
      accidental: Data_Abc.Sharp.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.D.value, 
      accidental: Data_Abc.Natural.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.D.value, 
      accidental: Data_Abc.Sharp.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.E.value, 
      accidental: Data_Abc.Natural.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.F.value, 
      accidental: Data_Abc.Natural.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.F.value, 
      accidental: Data_Abc.Sharp.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.G.value, 
      accidental: Data_Abc.Natural.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.G.value, 
      accidental: Data_Abc.Sharp.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.A.value, 
      accidental: Data_Abc.Natural.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.A.value, 
      accidental: Data_Abc.Sharp.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.B.value, 
      accidental: Data_Abc.Natural.value
  }, Data_List_Types.Nil.value))))))))))));
  var notesInChromaticScale = 12;
  var modalDistance = function (mode) {
      if (mode instanceof Data_Abc.Dorian) {
          return 10;
      };
      if (mode instanceof Data_Abc.Phrygian) {
          return 8;
      };
      if (mode instanceof Data_Abc.Lydian) {
          return 7;
      };
      if (mode instanceof Data_Abc.Mixolydian) {
          return 5;
      };
      if (mode instanceof Data_Abc.Aeolian) {
          return 3;
      };
      if (mode instanceof Data_Abc.Minor) {
          return 3;
      };
      if (mode instanceof Data_Abc.Locrian) {
          return 1;
      };
      return 0;
  };                                                                                                                                                                                                                                                               
  var maccToAcc = function (macc) {
      return Data_Maybe.fromMaybe(Data_Abc.Natural.value)(macc);
  };
  var lookUpScale = function (s) {
      return function (i) {
          var modi = i % notesInChromaticScale;
          var idx = (function () {
              var $6 = modi < 0;
              if ($6) {
                  return notesInChromaticScale - modi | 0;
              };
              if (!$6) {
                  return modi;
              };
              throw new Error("Failed pattern match at Data.Abc.Notation line 674, column 7 - line 677, column 13: " + [ $6.constructor.name ]);
          })();
          return Data_Maybe.fromMaybe({
              pitchClass: Data_Abc.C.value, 
              accidental: Data_Abc.Natural.value
          })(Data_List.index(s)(idx));
      };
  };
  var getHeaderMap = function (t) {
      var f = function (h) {
          if (h instanceof Data_Abc.Area) {
              return new Data_Tuple.Tuple("A", h);
          };
          if (h instanceof Data_Abc.Book) {
              return new Data_Tuple.Tuple("B", h);
          };
          if (h instanceof Data_Abc.Composer) {
              return new Data_Tuple.Tuple("C", h);
          };
          if (h instanceof Data_Abc.Discography) {
              return new Data_Tuple.Tuple("D", h);
          };
          if (h instanceof Data_Abc.FileUrl) {
              return new Data_Tuple.Tuple("F", h);
          };
          if (h instanceof Data_Abc.Group) {
              return new Data_Tuple.Tuple("G", h);
          };
          if (h instanceof Data_Abc.History) {
              return new Data_Tuple.Tuple("H", h);
          };
          if (h instanceof Data_Abc.Instruction) {
              return new Data_Tuple.Tuple("I", h);
          };
          if (h instanceof Data_Abc.Key) {
              return new Data_Tuple.Tuple("K", h);
          };
          if (h instanceof Data_Abc.UnitNoteLength) {
              return new Data_Tuple.Tuple("L", h);
          };
          if (h instanceof Data_Abc.Meter) {
              return new Data_Tuple.Tuple("M", h);
          };
          if (h instanceof Data_Abc.Macro) {
              return new Data_Tuple.Tuple("m", h);
          };
          if (h instanceof Data_Abc.Notes) {
              return new Data_Tuple.Tuple("N", h);
          };
          if (h instanceof Data_Abc.Origin) {
              return new Data_Tuple.Tuple("O", h);
          };
          if (h instanceof Data_Abc.Parts) {
              return new Data_Tuple.Tuple("P", h);
          };
          if (h instanceof Data_Abc.Tempo) {
              return new Data_Tuple.Tuple("Q", h);
          };
          if (h instanceof Data_Abc.Rhythm) {
              return new Data_Tuple.Tuple("R", h);
          };
          if (h instanceof Data_Abc.Remark) {
              return new Data_Tuple.Tuple("r", h);
          };
          if (h instanceof Data_Abc.Source) {
              return new Data_Tuple.Tuple("S", h);
          };
          if (h instanceof Data_Abc.SymbolLine) {
              return new Data_Tuple.Tuple("s", h);
          };
          if (h instanceof Data_Abc.Title) {
              return new Data_Tuple.Tuple("T", h);
          };
          if (h instanceof Data_Abc.UserDefined) {
              return new Data_Tuple.Tuple("U", h);
          };
          if (h instanceof Data_Abc.Voice) {
              return new Data_Tuple.Tuple("V", h);
          };
          if (h instanceof Data_Abc.WordsAfter) {
              return new Data_Tuple.Tuple("W", h);
          };
          if (h instanceof Data_Abc.WordsAligned) {
              return new Data_Tuple.Tuple("w", h);
          };
          if (h instanceof Data_Abc.ReferenceNumber) {
              return new Data_Tuple.Tuple("X", h);
          };
          if (h instanceof Data_Abc.Transcription) {
              return new Data_Tuple.Tuple("Z", h);
          };
          if (h instanceof Data_Abc.FieldContinuation) {
              return new Data_Tuple.Tuple("+", h);
          };
          if (h instanceof Data_Abc.Comment) {
              return new Data_Tuple.Tuple("-", h);
          };
          if (h instanceof Data_Abc.UnsupportedHeader) {
              return new Data_Tuple.Tuple("u", h);
          };
          throw new Error("Failed pattern match at Data.Abc.Notation line 112, column 7 - line 201, column 22: " + [ h.constructor.name ]);
      };
      var annotatedHeaders = Data_Functor.map(Data_List_Types.functorList)(f)(Data_List.reverse(t.headers));
      return Data_Map.fromFoldable(Data_Ord.ordChar)(Data_List_Types.foldableList)(annotatedHeaders);
  };
  var getHeader = function (code) {
      return function (t) {
          return Data_Map.lookup(Data_Ord.ordChar)(code)(getHeaderMap(t));
      };
  };
  var getKeySig = function (tune) {
      var $38 = getHeader("K")(tune);
      if ($38 instanceof Data_Maybe.Just && $38.value0 instanceof Data_Abc.Key) {
          return new Data_Maybe.Just($38.value0.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var getMeter = function (tune) {
      var $41 = getHeader("M")(tune);
      if ($41 instanceof Data_Maybe.Just && $41.value0 instanceof Data_Abc.Meter) {
          return new Data_Maybe.Just(Data_Maybe.fromMaybe(new Data_Tuple.Tuple(4, 4))($41.value0.value0));
      };
      return Data_Maybe.Nothing.value;
  };
  var getUnitNoteLength = function (tune) {
      var $50 = getHeader("L")(tune);
      if ($50 instanceof Data_Maybe.Just && $50.value0 instanceof Data_Abc.UnitNoteLength) {
          return new Data_Maybe.Just($50.value0.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var flatScale = new Data_List_Types.Cons({
      pitchClass: Data_Abc.C.value, 
      accidental: Data_Abc.Natural.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.D.value, 
      accidental: Data_Abc.Flat.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.D.value, 
      accidental: Data_Abc.Natural.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.E.value, 
      accidental: Data_Abc.Flat.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.E.value, 
      accidental: Data_Abc.Natural.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.F.value, 
      accidental: Data_Abc.Natural.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.G.value, 
      accidental: Data_Abc.Flat.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.G.value, 
      accidental: Data_Abc.Natural.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.A.value, 
      accidental: Data_Abc.Flat.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.A.value, 
      accidental: Data_Abc.Natural.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.B.value, 
      accidental: Data_Abc.Flat.value
  }, new Data_List_Types.Cons({
      pitchClass: Data_Abc.B.value, 
      accidental: Data_Abc.Natural.value
  }, Data_List_Types.Nil.value))))))))))));
  var dotFactor = function (i) {
      if (i === 1) {
          return Data_Rational.rational(1)(2);
      };
      if (i === 2) {
          return Data_Rational.rational(3)(4);
      };
      if (i === 3) {
          return Data_Rational.rational(7)(8);
      };
      return Data_Rational.rational(0)(1);
  };
  var accToMacc = function (acc) {
      if (acc instanceof Data_Abc.Sharp) {
          return new Data_Maybe.Just(Data_Abc.Sharp.value);
      };
      if (acc instanceof Data_Abc.Flat) {
          return new Data_Maybe.Just(Data_Abc.Flat.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var normaliseModalKey = function (ks) {
      var sourceAccidental = maccToAcc(ks.accidental);
      var scale = (function () {
          if (ks.accidental instanceof Data_Maybe.Just && ks.accidental.value0 instanceof Data_Abc.Sharp) {
              return sharpScale;
          };
          if (ks.accidental instanceof Data_Maybe.Just && ks.accidental.value0 instanceof Data_Abc.Flat) {
              return flatScale;
          };
          if (ks.pitchClass instanceof Data_Abc.F) {
              return flatScale;
          };
          return sharpScale;
      })();
      var keyAccidental = {
          pitchClass: ks.pitchClass, 
          accidental: sourceAccidental
      };
      var idx = Data_Maybe.fromMaybe(0)(Data_List.elemIndex(Data_Abc.eqKeyAccidental)(keyAccidental)(scale));
      var distance = modalDistance(ks.mode);
      var majorKeyIndex = (idx + distance | 0) % notesInChromaticScale;
      var majorKeyAcc = lookUpScale(scale)(majorKeyIndex);
      var targetAccidental = accToMacc((Data_Newtype.unwrap(Data_Abc.newtypeKeyAccidental)(majorKeyAcc)).accidental);
      var $117 = 0 === distance;
      if ($117) {
          return ks;
      };
      if (!$117) {
          return {
              pitchClass: (Data_Newtype.unwrap(Data_Abc.newtypeKeyAccidental)(majorKeyAcc)).pitchClass, 
              accidental: targetAccidental, 
              mode: Data_Abc.Major.value
          };
      };
      throw new Error("Failed pattern match at Data.Abc.Notation line 774, column 5 - line 780, column 8: " + [ $117.constructor.name ]);
  };
  exports["dotFactor"] = dotFactor;
  exports["getHeader"] = getHeader;
  exports["getKeySig"] = getKeySig;
  exports["getMeter"] = getMeter;
  exports["getUnitNoteLength"] = getUnitNoteLength;
  exports["normaliseModalKey"] = normaliseModalKey;
  exports["notesInChromaticScale"] = notesInChromaticScale;
})(PS["Data.Abc.Notation"] = PS["Data.Abc.Notation"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Show = PS["Data.Show"];        
  var Whole = (function () {
      function Whole() {

      };
      Whole.value = new Whole();
      return Whole;
  })();
  var Half = (function () {
      function Half() {

      };
      Half.value = new Half();
      return Half;
  })();
  var Quarter = (function () {
      function Quarter() {

      };
      Quarter.value = new Quarter();
      return Quarter;
  })();
  var Eighth = (function () {
      function Eighth() {

      };
      Eighth.value = new Eighth();
      return Eighth;
  })();
  var Sixteenth = (function () {
      function Sixteenth() {

      };
      Sixteenth.value = new Sixteenth();
      return Sixteenth;
  })();
  var ThirtySecond = (function () {
      function ThirtySecond() {

      };
      ThirtySecond.value = new ThirtySecond();
      return ThirtySecond;
  })();
  var SixtyFourth = (function () {
      function SixtyFourth() {

      };
      SixtyFourth.value = new SixtyFourth();
      return SixtyFourth;
  })();
  var HalfDotted = (function () {
      function HalfDotted() {

      };
      HalfDotted.value = new HalfDotted();
      return HalfDotted;
  })();
  var QuarterDotted = (function () {
      function QuarterDotted() {

      };
      QuarterDotted.value = new QuarterDotted();
      return QuarterDotted;
  })();
  var EighthDotted = (function () {
      function EighthDotted() {

      };
      EighthDotted.value = new EighthDotted();
      return EighthDotted;
  })();
  var SixteenthDotted = (function () {
      function SixteenthDotted() {

      };
      SixteenthDotted.value = new SixteenthDotted();
      return SixteenthDotted;
  })();
  var ThirtySecondDotted = (function () {
      function ThirtySecondDotted() {

      };
      ThirtySecondDotted.value = new ThirtySecondDotted();
      return ThirtySecondDotted;
  })();
  var SixtyFourthDotted = (function () {
      function SixtyFourthDotted() {

      };
      SixtyFourthDotted.value = new SixtyFourthDotted();
      return SixtyFourthDotted;
  })();
  var VNote = (function () {
      function VNote(value0) {
          this.value0 = value0;
      };
      VNote.create = function (value0) {
          return new VNote(value0);
      };
      return VNote;
  })();
  var VRest = (function () {
      function VRest(value0) {
          this.value0 = value0;
      };
      VRest.create = function (value0) {
          return new VRest(value0);
      };
      return VRest;
  })();
  var VBar = (function () {
      function VBar(value0) {
          this.value0 = value0;
      };
      VBar.create = function (value0) {
          return new VBar(value0);
      };
      return VBar;
  })();
  var VTuplet = (function () {
      function VTuplet(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      VTuplet.create = function (value0) {
          return function (value1) {
              return new VTuplet(value0, value1);
          };
      };
      return VTuplet;
  })();
  var VChord = (function () {
      function VChord(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      VChord.create = function (value0) {
          return function (value1) {
              return new VChord(value0, value1);
          };
      };
      return VChord;
  })();
  var VNotePair = (function () {
      function VNotePair(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      VNotePair.create = function (value0) {
          return function (value1) {
              return new VNotePair(value0, value1);
          };
      };
      return VNotePair;
  })();
  var VIgnore = (function () {
      function VIgnore() {

      };
      VIgnore.value = new VIgnore();
      return VIgnore;
  })();
  var Treble = (function () {
      function Treble() {

      };
      Treble.value = new Treble();
      return Treble;
  })();
  var Bass = (function () {
      function Bass() {

      };
      Bass.value = new Bass();
      return Bass;
  })();
  var VLine = (function () {
      function VLine(value0) {
          this.value0 = value0;
      };
      VLine.create = function (value0) {
          return new VLine(value0);
      };
      return VLine;
  })();
  var VContextChange = (function () {
      function VContextChange() {

      };
      VContextChange.value = new VContextChange();
      return VContextChange;
  })();
  var VEmptyLine = (function () {
      function VEmptyLine() {

      };
      VEmptyLine.value = new VEmptyLine();
      return VEmptyLine;
  })();
  var showVexDuration = new Data_Show.Show(function (v) {
      if (v instanceof Whole) {
          return ":w";
      };
      if (v instanceof Half) {
          return ":h";
      };
      if (v instanceof Quarter) {
          return ":q";
      };
      if (v instanceof Eighth) {
          return ":8";
      };
      if (v instanceof Sixteenth) {
          return ":16";
      };
      if (v instanceof ThirtySecond) {
          return ":32";
      };
      if (v instanceof SixtyFourth) {
          return ":64";
      };
      if (v instanceof HalfDotted) {
          return ":hd";
      };
      if (v instanceof QuarterDotted) {
          return ":qd";
      };
      if (v instanceof EighthDotted) {
          return ":8d";
      };
      if (v instanceof SixteenthDotted) {
          return ":16d";
      };
      if (v instanceof ThirtySecondDotted) {
          return ":32d";
      };
      if (v instanceof SixtyFourthDotted) {
          return ":64d";
      };
      throw new Error("Failed pattern match at VexTab.Abc.VexScore line 73, column 3 - line 74, column 3: " + [ v.constructor.name ]);
  });
  var showClef = new Data_Show.Show(function (v) {
      if (v instanceof Treble) {
          return "treble";
      };
      if (v instanceof Bass) {
          return "bass";
      };
      throw new Error("Failed pattern match at VexTab.Abc.VexScore line 53, column 4 - line 54, column 4: " + [ v.constructor.name ]);
  });
  exports["Treble"] = Treble;
  exports["Bass"] = Bass;
  exports["VLine"] = VLine;
  exports["VContextChange"] = VContextChange;
  exports["VEmptyLine"] = VEmptyLine;
  exports["Whole"] = Whole;
  exports["Half"] = Half;
  exports["Quarter"] = Quarter;
  exports["Eighth"] = Eighth;
  exports["Sixteenth"] = Sixteenth;
  exports["ThirtySecond"] = ThirtySecond;
  exports["SixtyFourth"] = SixtyFourth;
  exports["HalfDotted"] = HalfDotted;
  exports["QuarterDotted"] = QuarterDotted;
  exports["EighthDotted"] = EighthDotted;
  exports["SixteenthDotted"] = SixteenthDotted;
  exports["ThirtySecondDotted"] = ThirtySecondDotted;
  exports["SixtyFourthDotted"] = SixtyFourthDotted;
  exports["VNote"] = VNote;
  exports["VRest"] = VRest;
  exports["VBar"] = VBar;
  exports["VTuplet"] = VTuplet;
  exports["VChord"] = VChord;
  exports["VNotePair"] = VNotePair;
  exports["VIgnore"] = VIgnore;
  exports["showClef"] = showClef;
  exports["showVexDuration"] = showVexDuration;
})(PS["VexTab.Abc.VexScore"] = PS["VexTab.Abc.VexScore"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Int = PS["Data.Int"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_Canonical = PS["Data.Abc.Canonical"];
  var Data_Abc_Parser = PS["Data.Abc.Parser"];
  var Data_Abc_Notation = PS["Data.Abc.Notation"];
  var VexTab_Abc_VexScore = PS["VexTab.Abc.VexScore"];
  var Data_Function = PS["Data.Function"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var noteDur = function (ctx) {
      return function (d) {
          var durn = Data_Int.round(Data_Rational.toNumber(Data_Semiring.mul(Data_Rational.semiringRational)(Data_Semiring.mul(Data_Rational.semiringRational)(ctx.unitNoteLength)(d))(Data_Rational.fromInt(128))));
          if (durn === 128) {
              return new Data_Either.Right(VexTab_Abc_VexScore.Whole.value);
          };
          if (durn === 96) {
              return new Data_Either.Right(VexTab_Abc_VexScore.HalfDotted.value);
          };
          if (durn === 64) {
              return new Data_Either.Right(VexTab_Abc_VexScore.Half.value);
          };
          if (durn === 48) {
              return new Data_Either.Right(VexTab_Abc_VexScore.QuarterDotted.value);
          };
          if (durn === 32) {
              return new Data_Either.Right(VexTab_Abc_VexScore.Quarter.value);
          };
          if (durn === 24) {
              return new Data_Either.Right(VexTab_Abc_VexScore.EighthDotted.value);
          };
          if (durn === 16) {
              return new Data_Either.Right(VexTab_Abc_VexScore.Eighth.value);
          };
          if (durn === 12) {
              return new Data_Either.Right(VexTab_Abc_VexScore.SixteenthDotted.value);
          };
          if (durn === 8) {
              return new Data_Either.Right(VexTab_Abc_VexScore.Sixteenth.value);
          };
          if (durn === 6) {
              return new Data_Either.Right(VexTab_Abc_VexScore.ThirtySecondDotted.value);
          };
          if (durn === 4) {
              return new Data_Either.Right(VexTab_Abc_VexScore.ThirtySecond.value);
          };
          if (durn === 3) {
              return new Data_Either.Right(VexTab_Abc_VexScore.SixtyFourthDotted.value);
          };
          if (durn === 2) {
              return new Data_Either.Right(VexTab_Abc_VexScore.SixtyFourth.value);
          };
          return new Data_Either.Left("too long or too dotted");
      };
  };
  var note = function (ctx) {
      return function (abcNote) {
          var noteDurResult = noteDur(ctx)(abcNote.duration);
          if (noteDurResult instanceof Data_Either.Right) {
              var vexNote = {
                  pitchClass: abcNote.pitchClass, 
                  accidental: abcNote.accidental, 
                  octave: abcNote.octave - 1 | 0, 
                  duration: noteDurResult.value0, 
                  tied: ctx.tied, 
                  decoration: ctx.decoration
              };
              var newCtx = (function () {
                  var $18 = {};
                  for (var $19 in ctx) {
                      if ({}.hasOwnProperty.call(ctx, $19)) {
                          $18[$19] = ctx[$19];
                      };
                  };
                  $18.tied = abcNote.tied;
                  $18.decoration = Data_Maybe.Nothing.value;
                  return $18;
              })();
              return new Data_Either.Right(new Data_Tuple.Tuple(vexNote, newCtx));
          };
          if (noteDurResult instanceof Data_Either.Left) {
              return new Data_Either.Left("Note " + (noteDurResult.value0 + (": " + Data_Abc_Canonical.abcNote(abcNote))));
          };
          throw new Error("Failed pattern match at VexTab.Abc.Translate line 242, column 5 - line 268, column 65: " + [ noteDurResult.constructor.name ]);
      };
  };
  var normaliseMode = function (ks) {
      if (ks.mode instanceof Data_Abc.Ionian) {
          return ks;
      };
      if (ks.mode instanceof Data_Abc.Major) {
          return ks;
      };
      if (ks.mode instanceof Data_Abc.Minor) {
          return ks;
      };
      return Data_Abc_Notation.normaliseModalKey(ks);
  };
  var makeBroken = function (broken) {
      return function (n1) {
          return function (n2) {
              var up = function (i) {
                  return Data_Semiring.add(Data_Rational.semiringRational)(Data_Rational.rational(1)(1))(Data_Abc_Notation.dotFactor(i));
              };
              var down = function (i) {
                  return Data_Ring.sub(Data_Rational.ringRational)(Data_Rational.rational(1)(1))(Data_Abc_Notation.dotFactor(i));
              };
              if (broken instanceof Data_Abc.LeftArrow) {
                  var right = (function () {
                      var $25 = {};
                      for (var $26 in n2) {
                          if ({}.hasOwnProperty.call(n2, $26)) {
                              $25[$26] = n2[$26];
                          };
                      };
                      $25.duration = Data_Semiring.mul(Data_Rational.semiringRational)(n2.duration)(up(broken.value0));
                      return $25;
                  })();
                  var left = (function () {
                      var $28 = {};
                      for (var $29 in n1) {
                          if ({}.hasOwnProperty.call(n1, $29)) {
                              $28[$29] = n1[$29];
                          };
                      };
                      $28.duration = Data_Semiring.mul(Data_Rational.semiringRational)(n1.duration)(down(broken.value0));
                      return $28;
                  })();
                  return new Data_Tuple.Tuple(left, right);
              };
              if (broken instanceof Data_Abc.RightArrow) {
                  var right = (function () {
                      var $32 = {};
                      for (var $33 in n2) {
                          if ({}.hasOwnProperty.call(n2, $33)) {
                              $32[$33] = n2[$33];
                          };
                      };
                      $32.duration = Data_Semiring.mul(Data_Rational.semiringRational)(n2.duration)(down(broken.value0));
                      return $32;
                  })();
                  var left = (function () {
                      var $35 = {};
                      for (var $36 in n1) {
                          if ({}.hasOwnProperty.call(n1, $36)) {
                              $35[$36] = n1[$36];
                          };
                      };
                      $35.duration = Data_Semiring.mul(Data_Rational.semiringRational)(n1.duration)(up(broken.value0));
                      return $35;
                  })();
                  return new Data_Tuple.Tuple(left, right);
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 342, column 5 - line 361, column 30: " + [ broken.constructor.name ]);
          };
      };
  };
  var inlineHeader = function (ctx) {
      return function (h) {
          if (h instanceof Data_Abc.Key) {
              return new Data_Either.Left("inline key signature changes not supported");
          };
          if (h instanceof Data_Abc.Meter) {
              return new Data_Either.Left("inline time signature changes not supported");
          };
          if (h instanceof Data_Abc.UnitNoteLength) {
              return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VIgnore.value, (function () {
                  var $42 = {};
                  for (var $43 in ctx) {
                      if ({}.hasOwnProperty.call(ctx, $43)) {
                          $42[$43] = ctx[$43];
                      };
                  };
                  $42.unitNoteLength = h.value0;
                  return $42;
              })()));
          };
          return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VIgnore.value, ctx));
      };
  };
  var initialContext = function (t) {
      var unl = Data_Maybe.fromMaybe(Data_Rational.rational(1)(8))(Data_Abc_Notation.getUnitNoteLength(t));
      var meter = Data_Abc_Notation.getMeter(t);
      var keySig = Data_Maybe.fromMaybe({
          keySignature: {
              pitchClass: Data_Abc.C.value, 
              accidental: Data_Maybe.Nothing.value, 
              mode: Data_Abc.Major.value
          }, 
          modifications: Data_List_Types.Nil.value
      })(Data_Abc_Notation.getKeySig(t));
      return {
          modifiedKeySig: keySig, 
          meter: meter, 
          unitNoteLength: unl, 
          tied: false, 
          decoration: Data_Maybe.Nothing.value, 
          continuation: false
      };
  };
  var header = function (ctx) {
      return function (h) {
          if (h instanceof Data_Abc.Key) {
              var $47 = {};
              for (var $48 in ctx) {
                  if ({}.hasOwnProperty.call(ctx, $48)) {
                      $47[$48] = ctx[$48];
                  };
              };
              $47.modifiedKeySig = h.value0;
              return $47;
          };
          if (h instanceof Data_Abc.UnitNoteLength) {
              var $51 = {};
              for (var $52 in ctx) {
                  if ({}.hasOwnProperty.call(ctx, $52)) {
                      $51[$52] = ctx[$52];
                  };
              };
              $51.unitNoteLength = h.value0;
              return $51;
          };
          if (h instanceof Data_Abc.Meter) {
              var $55 = {};
              for (var $56 in ctx) {
                  if ({}.hasOwnProperty.call(ctx, $56)) {
                      $55[$56] = ctx[$56];
                  };
              };
              $55.meter = h.value0;
              return $55;
          };
          return ctx;
      };
  };
  var foldOverResult = function (ctx) {
      return function (aline) {
          return function (fmus) {
              var apnd = function (rvics) {
                  return function (rvic) {
                      var $59 = new Data_Tuple.Tuple(rvic, rvics);
                      if ($59.value0 instanceof Data_Either.Right && $59.value1 instanceof Data_Either.Right) {
                          var newvis = new Data_List_Types.Cons(Data_Tuple.fst($59.value0.value0), Data_Tuple.fst($59.value1.value0));
                          return new Data_Either.Right(new Data_Tuple.Tuple(newvis, Data_Tuple.snd($59.value0.value0)));
                      };
                      if ($59.value1 instanceof Data_Either.Left) {
                          return new Data_Either.Left($59.value1.value0);
                      };
                      if ($59.value0 instanceof Data_Either.Left) {
                          return new Data_Either.Left($59.value0.value0);
                      };
                      throw new Error("Failed pattern match at VexTab.Abc.Translate line 448, column 7 - line 460, column 20: " + [ $59.constructor.name ]);
                  };
              };
              var f = function (acc) {
                  return function (mus) {
                      var applicableCtx = (function () {
                          if (acc instanceof Data_Either.Right) {
                              return acc.value0.value1;
                          };
                          return ctx;
                      })();
                      return apnd(acc)(fmus(applicableCtx)(mus));
                  };
              };
              var result = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(new Data_Either.Right(new Data_Tuple.Tuple(Data_List_Types.Nil.value, ctx)))(aline);
              if (result instanceof Data_Either.Right) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(Data_List.reverse(result.value0.value0), result.value0.value1));
              };
              return result;
          };
      };
  };
  var noteList = function (ctx) {
      return function (notes) {
          return foldOverResult(ctx)(notes)(note);
      };
  };
  var firstNoteDuration = function ($170) {
      return Data_Maybe.fromMaybe(Data_Rational.rational(1)(1))(Data_List.head(Data_Functor.map(Data_List_Types.functorList)(function (v) {
          return v.duration;
      })($170)));
  };
  var music = function (ctx) {
      return function (m) {
          if (m instanceof Data_Abc.Barline) {
              var newCtx = (function () {
                  if (m.value0.iteration instanceof Data_Maybe.Just && m.value0.iteration.value0 === 1) {
                      var $80 = {};
                      for (var $81 in ctx) {
                          if ({}.hasOwnProperty.call(ctx, $81)) {
                              $80[$81] = ctx[$81];
                          };
                      };
                      $80.decoration = new Data_Maybe.Just("1");
                      return $80;
                  };
                  if (m.value0.iteration instanceof Data_Maybe.Just && m.value0.iteration.value0 === 2) {
                      var $84 = {};
                      for (var $85 in ctx) {
                          if ({}.hasOwnProperty.call(ctx, $85)) {
                              $84[$85] = ctx[$85];
                          };
                      };
                      $84.decoration = new Data_Maybe.Just("2");
                      return $84;
                  };
                  return ctx;
              })();
              return new Data_Either.Right(new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VBar(m.value0), newCtx));
          };
          if (m instanceof Data_Abc.Note) {
              return Data_Functor.map(Data_Either.functorEither)(function (v) {
                  return new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VNote(v.value0), v.value1);
              })(note(ctx)(m.value0));
          };
          if (m instanceof Data_Abc.Rest) {
              var noteDurResult = noteDur(ctx)(m.value0);
              if (noteDurResult instanceof Data_Either.Right) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VRest(noteDurResult.value0), ctx));
              };
              if (noteDurResult instanceof Data_Either.Left) {
                  return new Data_Either.Left("Rest " + (noteDurResult.value0 + (": " + "rest")));
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 148, column 9 - line 153, column 52: " + [ noteDurResult.constructor.name ]);
          };
          if (m instanceof Data_Abc.Tuplet) {
              var notesResult = noteList(ctx)(m.value1);
              if (notesResult instanceof Data_Either.Right) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VTuplet(m.value0.p, notesResult.value0.value0), ctx));
              };
              if (notesResult instanceof Data_Either.Left) {
                  return new Data_Either.Left(notesResult.value0);
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 160, column 9 - line 165, column 19: " + [ notesResult.constructor.name ]);
          };
          if (m instanceof Data_Abc.Chord) {
              var notesResult = noteList(ctx)(m.value0.notes);
              var nDur = firstNoteDuration(m.value0.notes);
              var overallDur = Data_Semiring.mul(Data_Rational.semiringRational)(m.value0.duration)(nDur);
              var chordDurResult = noteDur(ctx)(overallDur);
              var $104 = new Data_Tuple.Tuple(notesResult, chordDurResult);
              if ($104.value0 instanceof Data_Either.Right && $104.value1 instanceof Data_Either.Right) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VChord($104.value1.value0, $104.value0.value0.value0), ctx));
              };
              if ($104.value0 instanceof Data_Either.Left) {
                  return new Data_Either.Left($104.value0.value0);
              };
              if ($104.value1 instanceof Data_Either.Left) {
                  return new Data_Either.Left("Chord " + ($104.value1.value0 + (": " + Data_Abc_Canonical.abcChord(m.value0))));
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 181, column 9 - line 189, column 74: " + [ $104.constructor.name ]);
          };
          if (m instanceof Data_Abc.BrokenRhythmPair) {
              var brokenNotes = makeBroken(m.value1)(m.value0)(m.value2);
              var note1Result = note(ctx)(Data_Tuple.fst(brokenNotes));
              var ctx1 = (function () {
                  if (note1Result instanceof Data_Either.Right) {
                      return note1Result.value0.value1;
                  };
                  return ctx;
              })();
              var note2Result = note(ctx1)(Data_Tuple.snd(brokenNotes));
              var $122 = new Data_Tuple.Tuple(note1Result, note2Result);
              if ($122.value0 instanceof Data_Either.Right && $122.value1 instanceof Data_Either.Right) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VNotePair($122.value0.value0.value0, $122.value1.value0.value0), $122.value1.value0.value1));
              };
              if ($122.value0 instanceof Data_Either.Left) {
                  return new Data_Either.Left("Note " + ($122.value0.value0 + (": " + Data_Abc_Canonical.abcNote(m.value0))));
              };
              if ($122.value1 instanceof Data_Either.Left) {
                  return new Data_Either.Left("Note " + ($122.value1.value0 + (": " + Data_Abc_Canonical.abcNote(m.value2))));
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 212, column 9 - line 220, column 72: " + [ $122.constructor.name ]);
          };
          if (m instanceof Data_Abc.Decoration) {
              return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VIgnore.value, (function () {
                  var $140 = {};
                  for (var $141 in ctx) {
                      if ({}.hasOwnProperty.call(ctx, $141)) {
                          $140[$141] = ctx[$141];
                      };
                  };
                  $140.decoration = new Data_Maybe.Just(m.value0);
                  return $140;
              })()));
          };
          if (m instanceof Data_Abc.Inline) {
              return inlineHeader(ctx)(m.value0);
          };
          if (m instanceof Data_Abc.Continuation) {
              return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VIgnore.value, (function () {
                  var $145 = {};
                  for (var $146 in ctx) {
                      if ({}.hasOwnProperty.call(ctx, $146)) {
                          $145[$146] = ctx[$146];
                      };
                  };
                  $145.continuation = true;
                  return $145;
              })()));
          };
          return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VIgnore.value, ctx));
      };
  };
  var musicLine = function (ctx) {
      return function (ml) {
          return foldOverResult(ctx)(ml)(music);
      };
  };
  var vexLine = function (ctx) {
      return function (line) {
          var staveCtx = (function () {
              var $148 = {};
              for (var $149 in ctx) {
                  if ({}.hasOwnProperty.call(ctx, $149)) {
                      $148[$149] = ctx[$149];
                  };
              };
              $148.meter = Data_Maybe.Nothing.value;
              $148.continuation = false;
              return $148;
          })();
          var mKey = new Data_Maybe.Just(normaliseMode(ctx.modifiedKeySig.keySignature));
          var vexStave = (function () {
              if (ctx.continuation) {
                  return Data_Maybe.Nothing.value;
              };
              if (!ctx.continuation) {
                  return new Data_Maybe.Just({
                      clef: VexTab_Abc_VexScore.Treble.value, 
                      mKey: mKey, 
                      mMeter: ctx.meter
                  });
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 95, column 7 - line 98, column 64: " + [ ctx.continuation.constructor.name ]);
          })();
          var itemsRes = musicLine(staveCtx)(line);
          if (itemsRes instanceof Data_Either.Right) {
              return new Data_Either.Right(new Data_Tuple.Tuple(new VexTab_Abc_VexScore.VLine({
                  stave: vexStave, 
                  items: itemsRes.value0.value0
              }), itemsRes.value0.value1));
          };
          if (itemsRes instanceof Data_Either.Left) {
              return new Data_Either.Left(itemsRes.value0);
          };
          throw new Error("Failed pattern match at VexTab.Abc.Translate line 111, column 5 - line 116, column 15: " + [ itemsRes.constructor.name ]);
      };
  };
  var emptyLine = function (mLine) {
      var f = function (music$prime) {
          if (music$prime instanceof Data_Abc.Spacer) {
              return true;
          };
          if (music$prime instanceof Data_Abc.Ignore) {
              return true;
          };
          if (music$prime instanceof Data_Abc.Continuation) {
              return true;
          };
          return false;
      };
      return Data_Foldable.all(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(mLine);
  };
  var bodyPart = function (ctx) {
      return function (bp) {
          if (bp instanceof Data_Abc.Score) {
              var $160 = emptyLine(bp.value0);
              if ($160) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VEmptyLine.value, ctx));
              };
              if (!$160) {
                  return vexLine(ctx)(bp.value0);
              };
              throw new Error("Failed pattern match at VexTab.Abc.Translate line 76, column 7 - line 79, column 30: " + [ $160.constructor.name ]);
          };
          if (bp instanceof Data_Abc.BodyInfo) {
              var newCtx = header(ctx)(bp.value0);
              return new Data_Either.Right(new Data_Tuple.Tuple(VexTab_Abc_VexScore.VContextChange.value, newCtx));
          };
          throw new Error("Failed pattern match at VexTab.Abc.Translate line 74, column 3 - line 86, column 45: " + [ bp.constructor.name ]);
      };
  };
  var tuneBody = function (ctx) {
      return function (tb) {
          return foldOverResult(ctx)(tb)(bodyPart);
      };
  };
  var translate = function (t) {
      var ctx = initialContext(t);
      var result = tuneBody(ctx)(t.body);
      var $163 = Data_List["null"](ctx.modifiedKeySig.modifications);
      if ($163) {
          if (result instanceof Data_Either.Right) {
              return new Data_Either.Right(Data_Tuple.fst(result.value0));
          };
          if (result instanceof Data_Either.Left) {
              return new Data_Either.Left(result.value0);
          };
          throw new Error("Failed pattern match at VexTab.Abc.Translate line 42, column 9 - line 47, column 19: " + [ result.constructor.name ]);
      };
      if (!$163) {
          return new Data_Either.Left("modified key signatures not supported");
      };
      throw new Error("Failed pattern match at VexTab.Abc.Translate line 41, column 7 - line 51, column 1: " + [ $163.constructor.name ]);
  };
  exports["translate"] = translate;
})(PS["VexTab.Abc.Translate"] = PS["VexTab.Abc.Translate"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_List = PS["Data.List"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Abc = PS["Data.Abc"];
  var VexTab_Abc_VexScore = PS["VexTab.Abc.VexScore"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Types = PS["Data.List.Types"];        
  var Staved = (function () {
      function Staved() {

      };
      Staved.value = new Staved();
      return Staved;
  })();
  var Tupleted = (function () {
      function Tupleted() {

      };
      Tupleted.value = new Tupleted();
      return Tupleted;
  })();
  var Chordal = (function () {
      function Chordal() {

      };
      Chordal.value = new Chordal();
      return Chordal;
  })();
  var vexDecoration = function (v) {
      var isTopPosition = v.octave > 4;
      var formatDecoration = function (isTop) {
          return function (vexCode) {
              var position = (function () {
                  if (isTop) {
                      return "/top";
                  };
                  if (!isTop) {
                      return "/bottom";
                  };
                  throw new Error("Failed pattern match at VexTab.Abc.Canonical line 254, column 11 - line 258, column 7: " + [ isTop.constructor.name ]);
              })();
              return " $.a" + (vexCode + (position + ".$"));
          };
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === ".") {
          return formatDecoration(isTopPosition)(".");
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === "H") {
          return formatDecoration(true)("@a");
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === "L") {
          return formatDecoration(true)(">");
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === "u") {
          return formatDecoration(true)("|");
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === "v") {
          return formatDecoration(true)("m");
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === "1") {
          return " $.top.$ $1\u2500\u2500\u2500$";
      };
      if (v.decoration instanceof Data_Maybe.Just && v.decoration.value0 === "2") {
          return " $.top.$ $2\u2500\u2500\u2500$";
      };
      return "";
  };
  var vexBar = function (b) {
      if (b.repeat instanceof Data_Maybe.Just && b.repeat.value0 instanceof Data_Abc.Begin) {
          return " =|:";
      };
      if (b.repeat instanceof Data_Maybe.Just && b.repeat.value0 instanceof Data_Abc.End) {
          return " =:|";
      };
      if (b.repeat instanceof Data_Maybe.Just && b.repeat.value0 instanceof Data_Abc.BeginAndEnd) {
          return " =::";
      };
      if (b.repeat instanceof Data_Maybe.Nothing) {
          if (b.thickness instanceof Data_Abc.Thin) {
              return " |";
          };
          return " =||";
      };
      throw new Error("Failed pattern match at VexTab.Abc.Canonical line 202, column 3 - line 220, column 1: " + [ b.repeat.constructor.name ]);
  };
  var options = "options beam-rests=false\x0d\x0a";
  var nicelySpace = function (xs) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(xs);
  };
  var mode = function (m) {
      if (m instanceof Data_Abc.Major) {
          return "";
      };
      if (m instanceof Data_Abc.Minor) {
          return "m";
      };
      if (m instanceof Data_Abc.Ionian) {
          return "";
      };
      if (m instanceof Data_Abc.Aeolian) {
          return "m";
      };
      return "error not supported";
  };
  var headerAccidental = function (ma) {
      if (ma instanceof Data_Maybe.Just && ma.value0 instanceof Data_Abc.Sharp) {
          return "#";
      };
      if (ma instanceof Data_Maybe.Just && ma.value0 instanceof Data_Abc.Flat) {
          return "b";
      };
      return "";
  };
  var eol = "\x0d\x0a";
  var vexStave = function (mvs) {
      if (mvs instanceof Data_Maybe.Just) {
          var time = (function () {
              if (mvs.value0.mMeter instanceof Data_Maybe.Just) {
                  return "time=" + (Data_Show.show(Data_Show.showInt)(Data_Tuple.fst(mvs.value0.mMeter.value0)) + ("/" + Data_Show.show(Data_Show.showInt)(Data_Tuple.snd(mvs.value0.mMeter.value0))));
              };
              return "";
          })();
          var key = (function () {
              if (mvs.value0.mKey instanceof Data_Maybe.Just) {
                  var md = mode(mvs.value0.mKey.value0.mode);
                  var accidental$prime = headerAccidental(mvs.value0.mKey.value0.accidental);
                  return "key=" + (Data_Show.show(Data_Abc.showPitchClass)(mvs.value0.mKey.value0.pitchClass) + (accidental$prime + md));
              };
              return "";
          })();
          var clef = "clef=" + Data_Show.show(VexTab_Abc_VexScore.showClef)(mvs.value0.clef);
          return nicelySpace([ "stave notation=true", clef, key, time, eol, "notes" ]);
      };
      if (mvs instanceof Data_Maybe.Nothing) {
          return " notes";
      };
      throw new Error("Failed pattern match at VexTab.Abc.Canonical line 65, column 3 - line 95, column 1: " + [ mvs.constructor.name ]);
  };
  var accidental = function (a) {
      if (a instanceof Data_Abc.Sharp) {
          return "#";
      };
      if (a instanceof Data_Abc.Flat) {
          return "@";
      };
      if (a instanceof Data_Abc.DoubleSharp) {
          return "##";
      };
      if (a instanceof Data_Abc.DoubleFlat) {
          return "@@";
      };
      if (a instanceof Data_Abc.Natural) {
          return "n";
      };
      throw new Error("Failed pattern match at VexTab.Abc.Canonical line 184, column 3 - line 200, column 1: " + [ a.constructor.name ]);
  };
  var vexNote = function (ctx) {
      return function (vnote) {
          var tie = (function () {
              if (vnote.tied) {
                  return "T";
              };
              if (!vnote.tied) {
                  return "";
              };
              throw new Error("Failed pattern match at VexTab.Abc.Canonical line 161, column 7 - line 166, column 5: " + [ vnote.tied.constructor.name ]);
          })();
          var dur = Data_Show.show(VexTab_Abc_VexScore.showVexDuration)(vnote.duration);
          var decor = vexDecoration(vnote);
          var accident = Data_Maybe.fromMaybe("")(Data_Functor.map(Data_Maybe.functorMaybe)(accidental)(vnote.accidental));
          var pitch = Data_Show.show(Data_Abc.showPitchClass)(vnote.pitchClass) + (accident + ("/" + Data_Show.show(Data_Show.showInt)(vnote.octave)));
          if (ctx instanceof Chordal) {
              return pitch;
          };
          if (ctx instanceof Tupleted) {
              return nicelySpace([ dur, pitch ]);
          };
          if (vnote.tied) {
              return nicelySpace([ "", dur, tie, pitch ]) + decor;
          };
          if (!vnote.tied) {
              return nicelySpace([ "", dur, pitch ]) + decor;
          };
          throw new Error("Failed pattern match at VexTab.Abc.Canonical line 177, column 9 - line 180, column 50: " + [ vnote.tied.constructor.name ]);
      };
  };
  var vexItem = function (vi) {
      if (vi instanceof VexTab_Abc_VexScore.VBar) {
          return vexBar(vi.value0);
      };
      if (vi instanceof VexTab_Abc_VexScore.VNote) {
          return vexNote(Staved.value)(vi.value0);
      };
      if (vi instanceof VexTab_Abc_VexScore.VRest) {
          var dur = Data_Show.show(VexTab_Abc_VexScore.showVexDuration)(vi.value0);
          return nicelySpace([ "", dur, "##" ]);
      };
      if (vi instanceof VexTab_Abc_VexScore.VTuplet) {
          return " " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(" ")(Data_Functor.map(Data_List_Types.functorList)(vexNote(Tupleted.value))(vi.value1)) + (" ^" + (Data_Show.show(Data_Show.showInt)(vi.value0) + ("," + (Data_Show.show(Data_Show.showInt)(Data_List.length(vi.value1)) + "^")))));
      };
      if (vi instanceof VexTab_Abc_VexScore.VChord) {
          var chordDur = Data_Show.show(VexTab_Abc_VexScore.showVexDuration)(vi.value0);
          return " " + (chordDur + (" ( " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(" ")(Data_Functor.map(Data_List_Types.functorList)(vexNote(Chordal.value))(vi.value1)) + " )")));
      };
      if (vi instanceof VexTab_Abc_VexScore.VNotePair) {
          return vexNote(Staved.value)(vi.value0) + vexNote(Staved.value)(vi.value1);
      };
      if (vi instanceof VexTab_Abc_VexScore.VIgnore) {
          return "";
      };
      throw new Error("Failed pattern match at VexTab.Abc.Canonical line 101, column 3 - line 145, column 1: " + [ vi.constructor.name ]);
  };
  var vexItems = function (vis) {
      return Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(vexItem)(vis);
  };
  var vexLine = function (vl) {
      return vexStave(vl.stave) + (vexItems(vl.items) + "\x0d\x0a");
  };
  var vexBodyPart = function (bp) {
      if (bp instanceof VexTab_Abc_VexScore.VLine) {
          return vexLine(bp.value0);
      };
      return "";
  };
  var toScoreText = function (score) {
      var f = function (acc) {
          return function (vl) {
              return acc + vexBodyPart(vl);
          };
      };
      return options + Data_Foldable.foldl(Data_List_Types.foldableList)(f)("")(score);
  };
  exports["toScoreText"] = toScoreText;
})(PS["VexTab.Abc.Canonical"] = PS["VexTab.Abc.Canonical"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Either = PS["Data.Either"];
  var Data_Abc = PS["Data.Abc"];
  var VexTab_Score = PS["VexTab.Score"];
  var VexTab_Abc_Translate = PS["VexTab.Abc.Translate"];
  var VexTab_Abc_Canonical = PS["VexTab.Abc.Canonical"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];        
  var renderTune = function (tune) {
      var vexText = VexTab_Abc_Translate.translate(tune);
      if (vexText instanceof Data_Either.Right) {
          return function __do() {
              var v = VexTab_Score.render(VexTab_Abc_Canonical.toScoreText(vexText.value0))();
              return v;
          };
      };
      if (vexText instanceof Data_Either.Left) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(false);
      };
      throw new Error("Failed pattern match at VexTab.Abc.Score line 18, column 5 - line 24, column 19: " + [ vexText.constructor.name ]);
  };
  exports["renderTune"] = renderTune;
})(PS["VexTab.Abc.Score"] = PS["VexTab.Abc.Score"] || {});
(function(exports) {

  function loadTextFileImpl(onSuccess) {
      return function () {
        // console.log("inside load text file effects function ");
        var selectedFile = document.getElementById('fileinput').files[0];
        var reader = new FileReader();

        reader.onload = function(event) {
          var contents = event.target.result;
          var filespec = {contents:contents, name:selectedFile.name};
          // console.log("reader.onload File contents: " + contents);
          onSuccess (filespec)();
        };

        if (typeof selectedFile != 'undefined') {
           reader.readAsText(selectedFile);
        }
      }
  }

  function saveTextFile(filespec) {
    return function () {
      var a = document.createElement("a");
      // console.log("File contents: " + filespec.contents);
      var file = new Blob([filespec.contents], {type: "text/plain;charset=utf-8"});
      url = URL.createObjectURL(file);
      a.href = url;
      a.download = filespec.name;
      document.body.appendChild(a);
      a.click();
      setTimeout(function(){
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);
      }, 100);
      return true;
    };
  }



  exports.loadTextFileImpl = loadTextFileImpl;
  exports.saveTextFile = saveTextFile;
})(PS["FileIO.FileIO"] = PS["FileIO.FileIO"] || {});
(function(exports) {
  /* globals setTimeout, clearTimeout, setImmediate, clearImmediate */
  "use strict";

  exports._setTimeout = function (nonCanceler, millis, aff) {
    var set = setTimeout;
    var clear = clearTimeout;
    if (millis <= 0 && typeof setImmediate === "function") {
      set = setImmediate;
      clear = clearImmediate;
    }
    return function (success, error) {
      var canceler;

      var timeout = set(function () {
        canceler = aff(success, error);
      }, millis);

      return function (e) {
        return function (s, f) {
          if (canceler !== undefined) {
            return canceler(e)(s, f);
          } else {
            clear(timeout);
            s(true);
            return nonCanceler;
          }
        };
      };
    };
  };

  exports._unsafeInterleaveAff = function (aff) {
    return aff;
  };

  exports._makeAff = function (cb) {
    return function (success, error) {
      try {
        return cb(function (e) {
          return function () {
            error(e);
          };
        })(function (v) {
          return function () {
            success(v);
          };
        })();
      } catch (err) {
        error(err);
      }
    };
  };

  exports._pure = function (nonCanceler, v) {
    return function (success) {
      success(v);
      return nonCanceler;
    };
  };

  exports._fmap = function (f, aff) {
    return function (success, error) {
      return aff(function (v) {
        success(f(v));
      }, error);
    };
  };

  exports._bind = function (alwaysCanceler, aff, f) {
    return function (success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function () {};

      canceler1 = aff(function (v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function (e) {
        return function (s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function (bool) {
              if (bool || isCanceled) {
                s(true);
              } else {
                onCanceler = function (canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  };

  exports._runAff = function (errorT, successT, aff) {
    // If errorT or successT throw, and an Aff is comprised only of synchronous
    // effects, then it's possible for makeAff/liftEff to accidentally catch
    // it, which may end up rerunning the Aff depending on error recovery
    // behavior. To mitigate this, we observe synchronicity using mutation. If
    // an Aff is observed to be synchronous, we let the stack reset and run the
    // handlers outside of the normal callback flow.
    return function () {
      var status = 0;
      var result, success;

      var canceler = aff(function (v) {
        if (status === 2) {
          successT(v)();
        } else {
          status = 1;
          result = v;
          success = true;
        }
      }, function (e) {
        if (status === 2) {
          errorT(e)();
        } else {
          status = 1;
          result = e;
          success = false;
        }
      });

      if (status === 1) {
        if (success) {
          successT(result)();
        } else {
          errorT(result)();
        }
      } else {
        status = 2;
      }

      return canceler;
    };
  };

  exports._liftEff = function (nonCanceler, e) {
    return function (success, error) {
      var result;
      try {
        result = e();
      } catch (err) {
        error(err);
        return nonCanceler;
      }

      success(result);
      return nonCanceler;
    };
  };
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Data_Unit = PS["Data.Unit"];
  var Canceler = function (x) {
      return x;
  };
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };         
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var functorAff = new Data_Functor.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });                                        
  var cancel = function (v) {
      return v;
  };
  var launchAff = (function () {
      var lowerEx = Data_Functor.map(Control_Monad_Eff.functorEff)(function ($53) {
          return Canceler(Data_Functor.map(Data_Functor.functorFn)($foreign._unsafeInterleaveAff)(cancel($53)));
      });
      return function ($54) {
          return lowerEx(runAff(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($foreign._unsafeInterleaveAff($54)));
      };
  })();
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Data_Functor.map(functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(false));
  var alwaysCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(true));
  var later$prime = function (n) {
      return function (aff) {
          return $foreign._setTimeout(nonCanceler, n, aff);
      };
  };
  var later = later$prime(0);
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](nonCanceler))(h(e)(a));
          };
      });
  };                                                                         
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  exports["Canceler"] = Canceler;
  exports["cancel"] = cancel;
  exports["later"] = later;
  exports["launchAff"] = launchAff;
  exports["makeAff"] = makeAff;
  exports["nonCanceler"] = nonCanceler;
  exports["runAff"] = runAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["FileIO.FileIO"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];        
  var loadTextFile = Control_Monad_Aff.makeAff(function (error) {
      return function (success) {
          return $foreign.loadTextFileImpl(success);
      };
  });
  exports["loadTextFile"] = loadTextFile;
  exports["saveTextFile"] = $foreign.saveTextFile;
})(PS["FileIO.FileIO"] = PS["FileIO.FileIO"] || {});
(function(exports) {exports.start_ = function (app) {
    if (typeof window === 'object' && typeof CustomEvent === 'function') {
      var hook = HookDevtool(app);

      if (window.__pux_devtool_hook) {
        window.removeEventListener('pux:devtool:init', window.__pux_devtool_hook);
        hook();
      }

      window.__pux_devtool_hook = hook;

      // Listen for devtool and connect
      window.addEventListener('pux:devtool:init', window.__pux_devtool_hook);
    }

    return app;
  };

  function HookDevtool (app) {
    if (window.__pux_conn === undefined) {
      window.__pux_conn = {
        setState: false,
        index: 0,
        events: [app.events.get()],
        states: [app.state.get()]
      };
    }

    var conn = window.__pux_conn;

    return function () {
      window.dispatchEvent(new CustomEvent('pux:state:change', {
        detail: {
          index: conn.index,
          length: conn.states.length,
          state: stateToString(conn.states[conn.index]),
          event: eventToString(conn.events[conn.index])
        }
      }));

      if (app.__devtool_connected) return;
      app.__devtool_connected = true;

      app.events.subscribe(function (ev) {
        conn.events.push(ev);
        conn.states.push(app.state.get());
        conn.index = conn.states.length - 1;

        window.dispatchEvent(new CustomEvent('pux:state:change', {
          detail: {
            index: conn.index,
            length: conn.states.length,
            state: stateToString(conn.states[conn.index]),
            event: eventToString(ev)
          }
        }));
      });

      app.state.subscribe(function (st) {
        if (conn.setState) {
          conn.setState = false;
          window.dispatchEvent(new CustomEvent('pux:state:change', {
            detail: {
              index: conn.index,
              length: conn.states.length,
              state: stateToString(st),
              event: eventToString(conn.events[conn.index])
            }
          }));
        }
      });

      if (window.__pux_handler) {
        window.removeEventListener('pux:state:first', window.__pux_handler);
        window.removeEventListener('pux:state:prev', window.__pux_handler);
        window.removeEventListener('pux:state:next', window.__pux_handler);
        window.removeEventListener('pux:state:last', window.__pux_handler);
      }

      window.__pux_handler = function (ev) {
        if (ev.type === 'pux:state:first') {
          conn.setState = true;
          conn.index = 0;
          app.state.set(conn.states[0]);
        } else if (ev.type === 'pux:state:prev') {
          conn.setState = true;
          if (conn.states[conn.index - 1]) conn.index--;
          app.state.set(conn.states[conn.index]);
        } else if (ev.type === 'pux:state:next') {
          conn.setState = true;
          if (conn.states[conn.index + 1]) conn.index++;
          app.state.set(conn.states[conn.index]);
        } else if (ev.type === 'pux:state:last') {
          conn.setState = true;
          conn.index = conn.states.length - 1;
          app.state.set(conn.states[conn.index]);
        }
      }

      window.addEventListener('pux:state:first', window.__pux_handler);
      window.addEventListener('pux:state:prev', window.__pux_handler);
      window.addEventListener('pux:state:next', window.__pux_handler);
      window.addEventListener('pux:state:last', window.__pux_handler);
    }
  }

  function eventToString (a) {
    a = a.value0 ? a.value0 : a;

    function toString(a) {
      var name = a.constructor.name.match(/(String|Number|Boolean)/) ? a : a.constructor.name;
      var str = [name];
      if (a.constructor.name === 'Object') {
        return JSON.stringify(stateToJSON(a));
      }
      Object.keys(a).forEach(function (key) {
        if (key[0] === 'v' && key[4] === 'e') {
          str.push('(' + toString(a[key]) + ')');
        }
      });
      return str.join(' ');
    }

    return toString(a);
  };

  function eventToJSON (a) {
    function toJSON(a, obj) {
      if (a.constructor.name.match(/(String|Number|Boolean)/)) {
        return a;
      } else if (a.constructor.name === 'Object') {
        Object.keys(a).forEach(function (key) {
          obj[key] = toJSON(a[key], obj[key] || {});
        });
      } else if (a.constructor.name === 'Array') {
        return a.map(function (b) {
          return toJSON(b, {});
        });
      } else {
        obj[a.constructor.name] = {};
        if (a.value0 && !a.value1) {
          obj[a.constructor.name] = toJSON(a.value0, obj[a.constructor.name] || {});
        } else {
          Object.keys(a).forEach(function (key) {
            if (key[0] === 'v' && key[4] === 'e') {
              obj[a.constructor.name][key[5]] = toJSON(a[key], obj[a.constructor.name][key[5]] || {});
            }
          });
        }
      }
      return obj;
    }

    return toJSON(a, {});
  };

  function stateToString (s) {
    return JSON.stringify(s, function (key, val) {
      if (!val.constructor.name.match(/(Object|Boolean|Array|String|Number|Date|Symbol)/)) {
        return eventToJSON(val);
      }
      return val;
    }, 2)
  };
})(PS["Pux"] = PS["Pux"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var unsafeCoerceAff = Unsafe_Coerce.unsafeCoerce;
  exports["unsafeCoerceAff"] = unsafeCoerceAff;
})(PS["Control.Monad.Aff.Unsafe"] = PS["Control.Monad.Aff.Unsafe"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };

  exports.merge = function(sig1) {
    return function(sig2) {
      var out = make(sig1.get());
      sig2.subscribe(out.set);
      sig1.subscribe(out.set);
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports["dropRepeats'"] = function(sig) {
    var val = sig.get();
    var out = make(val);
    sig.subscribe(function(newval) {
      if (val !== newval) {
        val = newval;
        out.set(val);
      }
    });
    return out;
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Signal"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var mergeMany = function (dictFunctor) {
      return function (dictFoldable) {
          return function (sigs) {
              var mergeMaybe = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return v;
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return v1;
                      };
                      if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                          return new Data_Maybe.Just($foreign.merge(v.value0)(v1.value0));
                      };
                      throw new Error("Failed pattern match at Signal line 53, column 9 - line 53, column 33: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(mergeMaybe)(Data_Maybe.Nothing.value)(Data_Functor.map(dictFunctor)(Data_Maybe.Just.create)(sigs));
          };
      };
  };
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var flippedMap = function (dictFunctor) {
      return Data_Function.flip(Data_Functor.map(dictFunctor));
  };
  exports["flippedMap"] = flippedMap;
  exports["mergeMany"] = mergeMany;
  exports["functorSignal"] = functorSignal;
  exports["constant"] = $foreign.constant;
  exports["dropRepeats'"] = $foreign["dropRepeats'"];
  exports["foldp"] = $foreign.foldp;
  exports["runSignal"] = $foreign.runSignal;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];        
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["channel"] = channel;
  exports["send"] = send;
  exports["subscribe"] = $foreign.subscribe;
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List_Types = PS["Data.List.Types"];        
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              var __tco_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              v = __tco_v;
              continue tco;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 51, column 1 - line 51, column 36: " + [ v.constructor.name ]);
      };
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NaturalTransformation = PS["Data.NaturalTransformation"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_List_Types = PS["Data.List.Types"];        
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 111, column 1 - line 111, column 22: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function (__copy_v) {
                  return function (__copy_c) {
                      return function (__copy_v1) {
                          var v = __copy_v;
                          var c = __copy_c;
                          var v1 = __copy_v1;
                          tco: while (true) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  var __tco_v = v;
                                  var __tco_c = v(c)(v1.value0);
                                  var __tco_v1 = v1.value1;
                                  v = __tco_v;
                                  c = __tco_c;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 126, column 3 - line 126, column 22: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                      };
                  };
              };
              var go = function (__copy_xs) {
                  return function (__copy_ys) {
                      var xs = __copy_xs;
                      var ys = __copy_ys;
                      tco: while (true) {
                          var $33 = Data_CatQueue.uncons(xs);
                          if ($33 instanceof Data_Maybe.Nothing) {
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if ($33 instanceof Data_Maybe.Just) {
                              var __tco_ys = new Data_List_Types.Cons(k($33.value0.value0), ys);
                              xs = $33.value0.value1;
                              ys = __tco_ys;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 121, column 14 - line 123, column 67: " + [ $33.constructor.name ]);
                      };
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $38 = Data_CatQueue["null"](v.value1);
              if ($38) {
                  return CatNil.value;
              };
              if (!$38) {
                  return foldr(link)(CatNil.value)(v.value1);
              };
              throw new Error("Failed pattern match at Data.CatList line 103, column 39 - line 103, column 89: " + [ $38.constructor.name ]);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 102, column 1 - line 102, column 24: " + [ v.constructor.name ]);
  };
  var foldMap = function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof CatNil) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof CatCons) {
                  var d = (function () {
                      var $43 = Data_CatQueue["null"](v.value1);
                      if ($43) {
                          return CatNil.value;
                      };
                      if (!$43) {
                          return foldr(link)(CatNil.value)(v.value1);
                      };
                      throw new Error("Failed pattern match at Data.CatList line 144, column 11 - line 144, column 61: " + [ $43.constructor.name ]);
                  })();
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(v.value0))(foldMap(dictMonoid)(f)(d));
              };
              throw new Error("Failed pattern match at Data.CatList line 142, column 1 - line 142, column 26: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var foldableCatList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (l) {
              return foldMap(dictMonoid)(f)(l);
          };
      };
  }, function (f) {
      return function (s) {
          return function (l) {
              return Data_Foldable.foldlDefault(foldableCatList)(f)(s)(l);
          };
      };
  }, function (f) {
      return function (s) {
          return function (l) {
              return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
          };
      };
  });
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  };
  var cons = function (a) {
      return function (cat) {
          return append(new CatCons(a, Data_CatQueue.empty))(cat);
      };
  };
  var map = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return CatNil.value;
          };
          if (v1 instanceof CatCons) {
              var d = (function () {
                  var $50 = Data_CatQueue["null"](v1.value1);
                  if ($50) {
                      return CatNil.value;
                  };
                  if (!$50) {
                      return foldr(link)(CatNil.value)(v1.value1);
                  };
                  throw new Error("Failed pattern match at Data.CatList line 138, column 11 - line 138, column 61: " + [ $50.constructor.name ]);
              })();
              return cons(v(v1.value0))(map(v)(d));
          };
          throw new Error("Failed pattern match at Data.CatList line 136, column 1 - line 136, column 22: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var functorCatList = new Data_Functor.Functor(map);
  var singleton = function (a) {
      return cons(a)(CatNil.value);
  }; 
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var monoidCatList = new Data_Monoid.Monoid(function () {
      return semigroupCatList;
  }, CatNil.value);
  var monadCatList = new Control_Monad.Monad(function () {
      return applicativeCatList;
  }, function () {
      return bindCatList;
  });
  var bindCatList = new Control_Bind.Bind(function () {
      return applyCatList;
  }, Data_Function.flip(foldMap(monoidCatList)));
  var applyCatList = new Control_Apply.Apply(function () {
      return functorCatList;
  }, Control_Monad.ap(monadCatList));
  var applicativeCatList = new Control_Applicative.Applicative(function () {
      return applyCatList;
  }, singleton);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["append"] = append;
  exports["cons"] = cons;
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
  exports["monoidCatList"] = monoidCatList;
  exports["foldableCatList"] = foldableCatList;
  exports["functorCatList"] = functorCatList;
  exports["applyCatList"] = applyCatList;
  exports["applicativeCatList"] = applicativeCatList;
  exports["bindCatList"] = bindCatList;
  exports["monadCatList"] = monadCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];        
  var EventHandler = (function () {
      function EventHandler(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      EventHandler.create = function (value0) {
          return function (value1) {
              return new EventHandler(value0, value1);
          };
      };
      return EventHandler;
  })();
  var EventHandlers = (function () {
      function EventHandlers(value0) {
          this.value0 = value0;
      };
      EventHandlers.create = function (value0) {
          return new EventHandlers(value0);
      };
      return EventHandlers;
  })();
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Attribute = (function () {
      function Attribute(value0) {
          this.value0 = value0;
      };
      Attribute.create = function (value0) {
          return new Attribute(value0);
      };
      return Attribute;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Element(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Element;
  })();
  var Content = (function () {
      function Content(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Content.create = function (value0) {
          return function (value1) {
              return new Content(value0, value1);
          };
      };
      return Content;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Attributable = function ($$with) {
      this["with"] = $$with;
  };
  var Eventable = function (withEvent) {
      this.withEvent = withEvent;
  };
  var withEvent = function (dict) {
      return dict.withEvent;
  };
  var $$with = function (dict) {
      return dict["with"];
  };
  var text = function (s) {
      return new Content(s, new Return(Data_Unit.unit));
  }; 
  var parent = function (el) {
      return function (kids) {
          return new Element(el, new Data_Maybe.Just(kids), Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Monoid.mempty(Data_CatList.monoidCatList), new Return(Data_Unit.unit));
      };
  };
  var on = function (name) {
      return function (handler) {
          return new EventHandlers(Control_Applicative.pure(Data_CatList.applicativeCatList)(new EventHandler(name, handler)));
      };
  };                                                                
  var leaf = function (el) {
      return new Element(el, Data_Maybe.Nothing.value, Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Monoid.mempty(Data_CatList.monoidCatList), new Return(Data_Unit.unit));
  };
  var functorMarkupM = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, v.value3, Data_Functor.map(functorMarkupM)(f)(v.value4));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Data_Functor.map(functorMarkupM)(f)(v.value1));
          };
          if (v instanceof Return) {
              return new Return(f(v.value0));
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 55, column 3 - line 55, column 88: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var eventableMarkupM = new Eventable(function (v) {
      return function (v1) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, Data_Semigroup.append(Data_CatList.semigroupCatList)(v.value3)(v1.value0), v.value4);
          };
          return v;
      };
  });
  var eventableMarkupMF = new Eventable(function (k) {
      return function (xs) {
          return function (m) {
              return withEvent(eventableMarkupM)(k(m))(xs);
          };
      };
  });
  var attribute = function (key) {
      return function (value) {
          return new Attribute(Control_Applicative.pure(Data_CatList.applicativeCatList)(new Attr(key, value)));
      };
  };
  var attributableMarkupM = new Attributable(function (v) {
      return function (v1) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, Data_Semigroup.append(Data_CatList.semigroupCatList)(v.value2)(v1.value0), v.value3, v.value4);
          };
          return v;
      };
  });
  var attributableMarkupMF = new Attributable(function (k) {
      return function (xs) {
          return function (m) {
              return $$with(attributableMarkupM)(k(m))(xs);
          };
      };
  });
  var monadMarkupM = new Control_Monad.Monad(function () {
      return applicativeMarkupM;
  }, function () {
      return bindMarkupM;
  });
  var bindMarkupM = new Control_Bind.Bind(function () {
      return applyMarkupM;
  }, function (v) {
      return function (f) {
          if (v instanceof Element) {
              return new Element(v.value0, v.value1, v.value2, v.value3, Control_Bind.bind(bindMarkupM)(v.value4)(f));
          };
          if (v instanceof Content) {
              return new Content(v.value0, Control_Bind.bind(bindMarkupM)(v.value1)(f));
          };
          if (v instanceof Return) {
              return f(v.value0);
          };
          throw new Error("Failed pattern match at Text.Smolder.Markup line 66, column 3 - line 66, column 90: " + [ v.constructor.name, f.constructor.name ]);
      };
  });
  var applyMarkupM = new Control_Apply.Apply(function () {
      return functorMarkupM;
  }, Control_Monad.ap(monadMarkupM));
  var applicativeMarkupM = new Control_Applicative.Applicative(function () {
      return applyMarkupM;
  }, Return.create);
  exports["Attr"] = Attr;
  exports["EventHandler"] = EventHandler;
  exports["EventHandlers"] = EventHandlers;
  exports["Element"] = Element;
  exports["Content"] = Content;
  exports["Return"] = Return;
  exports["Attributable"] = Attributable;
  exports["Eventable"] = Eventable;
  exports["attribute"] = attribute;
  exports["leaf"] = leaf;
  exports["on"] = on;
  exports["parent"] = parent;
  exports["text"] = text;
  exports["with"] = $$with;
  exports["withEvent"] = withEvent;
  exports["functorMarkupM"] = functorMarkupM;
  exports["applyMarkupM"] = applyMarkupM;
  exports["applicativeMarkupM"] = applicativeMarkupM;
  exports["bindMarkupM"] = bindMarkupM;
  exports["monadMarkupM"] = monadMarkupM;
  exports["attributableMarkupM"] = attributableMarkupM;
  exports["attributableMarkupMF"] = attributableMarkupMF;
  exports["eventableMarkupM"] = eventableMarkupM;
  exports["eventableMarkupMF"] = eventableMarkupMF;
})(PS["Text.Smolder.Markup"] = PS["Text.Smolder.Markup"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Pux"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Unsafe = PS["Control.Monad.Aff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var noEffects = function (state) {
      return {
          state: state, 
          effects: [  ]
      };
  };
  var start = function (config) {
      return function __do() {
          var v = Signal_Channel.channel(Data_List_Types.Nil.value)();
          var mapAffect = function (affect) {
              return Control_Monad_Aff.launchAff(Control_Monad_Aff_Unsafe.unsafeCoerceAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(affect)(function (v1) {
                  return Control_Monad_Aff.later((function () {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Signal_Channel.send(v)(Data_List.singleton(v1.value0)));
                      };
                      throw new Error("Failed pattern match at Pux line 62, column 17 - line 64, column 59: " + [ v1.constructor.name ]);
                  })());
              })));
          };
          var foldState = function (effModel) {
              return function (ev) {
                  return config.foldp(ev)(effModel.state);
              };
          };
          var foldEvents = function (evs) {
              return function (effModel) {
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(foldState)(noEffects(effModel.state))(evs);
              };
          };
          var evSignal = Signal_Channel.subscribe(v);
          var input = Data_Maybe.fromJust()(Signal.mergeMany(Data_List_Types.functorList)(Data_List_Types.foldableList)(Data_List.reverse(new Data_List_Types.Cons(evSignal, Data_Functor.map(Data_List_Types.functorList)(Data_Functor.map(Signal.functorSignal)(Data_List.singleton))(Data_List.fromFoldable(Data_Foldable.foldableArray)(config.inputs))))));
          var effModelSignal = Signal.foldp(foldEvents)(noEffects(config.initialState))(input);
          var effectsSignal = Signal.flippedMap(Signal.functorSignal)(effModelSignal)(function ($9) {
              return Data_Functor.map(Data_Functor.functorArray)(mapAffect)((function (v1) {
                  return v1.effects;
              })($9));
          });
          var stateSignal = Signal["dropRepeats'"](Signal.flippedMap(Signal.functorSignal)(effModelSignal)(function (v1) {
              return v1.state;
          }));
          var htmlSignal = Signal.flippedMap(Signal.functorSignal)(stateSignal)(config.view);
          Signal.runSignal(Signal.flippedMap(Signal.functorSignal)(effectsSignal)(Data_Foldable.sequence_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)))();
          return $foreign.start_({
              markup: htmlSignal, 
              state: stateSignal, 
              events: input, 
              input: v
          });
      };
  };
  exports["noEffects"] = noEffects;
  exports["start"] = start;
})(PS["Pux"] = PS["Pux"] || {});
(function(exports) {exports.targetValue = function (ev) {
    if (ev.target === undefined) return '';
    return ev.target.value;
  };
})(PS["Pux.DOM.Events"] = PS["Pux.DOM.Events"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Pux.DOM.Events"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var onInput = Text_Smolder_Markup.on("onInput");                  
  var onClick = Text_Smolder_Markup.on("onClick");
  var onChange = Text_Smolder_Markup.on("onChange");
  exports["onChange"] = onChange;
  exports["onClick"] = onClick;
  exports["onInput"] = onInput;
  exports["targetValue"] = $foreign.targetValue;
})(PS["Pux.DOM.Events"] = PS["Pux.DOM.Events"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Control_Category = PS["Control.Category"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];        
  var This = (function () {
      function This(value0) {
          this.value0 = value0;
      };
      This.create = function (value0) {
          return new This(value0);
      };
      return This;
  })();
  var That = (function () {
      function That(value0) {
          this.value0 = value0;
      };
      That.create = function (value0) {
          return new That(value0);
      };
      return That;
  })();
  var Both = (function () {
      function Both(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Both.create = function (value0) {
          return function (value1) {
              return new Both(value0, value1);
          };
      };
      return Both;
  })();
  var theseRight = function (v) {
      if (v instanceof Both) {
          return new Data_Maybe.Just(v.value1);
      };
      if (v instanceof That) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var theseLeft = function (v) {
      if (v instanceof Both) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof This) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var semigroupThese = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  if (v instanceof This && v1 instanceof This) {
                      return new This(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
                  };
                  if (v instanceof This && v1 instanceof That) {
                      return new Both(v.value0, v1.value0);
                  };
                  if (v instanceof This && v1 instanceof Both) {
                      return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
                  };
                  if (v instanceof That && v1 instanceof This) {
                      return new Both(v1.value0, v.value0);
                  };
                  if (v instanceof That && v1 instanceof That) {
                      return new That(Data_Semigroup.append(dictSemigroup1)(v.value0)(v1.value0));
                  };
                  if (v instanceof That && v1 instanceof Both) {
                      return new Both(v1.value0, Data_Semigroup.append(dictSemigroup1)(v.value0)(v1.value1));
                  };
                  if (v instanceof Both && v1 instanceof This) {
                      return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1);
                  };
                  if (v instanceof Both && v1 instanceof That) {
                      return new Both(v.value0, Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value0));
                  };
                  if (v instanceof Both && v1 instanceof Both) {
                      return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.These line 25, column 3 - line 25, column 43: " + [ v.constructor.name, v1.constructor.name ]);
              };
          });
      };
  };
  exports["This"] = This;
  exports["That"] = That;
  exports["Both"] = Both;
  exports["theseLeft"] = theseLeft;
  exports["theseRight"] = theseRight;
  exports["semigroupThese"] = semigroupThese;
})(PS["Data.These"] = PS["Data.These"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Category = PS["Control.Category"];        
  var IsString = function (fromString) {
      this.fromString = fromString;
  };
  var isStringString = new IsString(Control_Category.id(Control_Category.categoryFn));
  var fromString = function (dict) {
      return dict.fromString;
  };
  exports["IsString"] = IsString;
  exports["fromString"] = fromString;
  exports["isStringString"] = isStringString;
})(PS["CSS.String"] = PS["CSS.String"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var HSLA = (function () {
      function HSLA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      HSLA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new HSLA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return HSLA;
  })();
  var modPos = function (x) {
      return function (y) {
          return $$Math.remainder($$Math.remainder(x)(y) + y)(y);
      };
  };
  var rgba = function (red$prime) {
      return function (green$prime) {
          return function (blue$prime) {
              return function (alpha) {
                  var red = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(red$prime);
                  var r = Data_Int.toNumber(red) / 255.0;
                  var green = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(green$prime);
                  var g = Data_Int.toNumber(green) / 255.0;
                  var blue = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(blue$prime);
                  var maxChroma = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.max(Data_Ord.ordInt)(red)(green))(blue);
                  var minChroma = Data_Ord.min(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(red)(green))(blue);
                  var chroma = maxChroma - minChroma | 0;
                  var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                  var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                  var saturation = (function () {
                      if (chroma === 0) {
                          return 0.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                      };
                      throw new Error("Failed pattern match at Color line 118, column 1 - line 146, column 75: " + [  ]);
                  })();
                  var b = Data_Int.toNumber(blue) / 255.0;
                  var hue$prime = function (v) {
                      if (v === 0) {
                          return 0.0;
                      };
                      if (maxChroma === red) {
                          return modPos((g - b) / chroma$prime)(6.0);
                      };
                      if (maxChroma === green) {
                          return (b - r) / chroma$prime + 2.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return (r - g) / chroma$prime + 4.0;
                      };
                      throw new Error("Failed pattern match at Color line 118, column 1 - line 146, column 75: " + [ v.constructor.name ]);
                  };
                  var hue = 60.0 * hue$prime(chroma);
                  return new HSLA(hue, saturation, lightness, alpha);
              };
          };
      };
  };
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return rgba(r)(g)(b)(1.0);
          };
      };
  };
  var cssStringHSLA = function (v) {
      var toString = function (n) {
          return Data_Show.show(Data_Show.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
      };
      var saturation = toString(v.value1 * 100.0) + "%";
      var lightness = toString(v.value2 * 100.0) + "%";
      var hue = toString(v.value0);
      var alpha = Data_Show.show(Data_Show.showNumber)(v.value3);
      var $72 = v.value3 === 1.0;
      if ($72) {
          return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
      };
      if (!$72) {
          return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
      };
      throw new Error("Failed pattern match at Color line 378, column 3 - line 382, column 3: " + [ $72.constructor.name ]);
  };
  exports["cssStringHSLA"] = cssStringHSLA;
  exports["rgb"] = rgb;
  exports["rgba"] = rgba;
})(PS["Color"] = PS["Color"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["Profunctor"] = Profunctor;
  exports["dimap"] = dimap;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Strong = function (__superclass_Data$dotProfunctor$dotProfunctor_0, first, second) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  exports["Strong"] = Strong;
  exports["first"] = first;
  exports["second"] = second;
  exports["strongFn"] = strongFn;
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var CSS_String = PS["CSS.String"];
  var Color = PS["Color"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Show = PS["Data.Show"];
  var Control_Alternative = PS["Control.Alternative"];        
  var Prefixed = (function () {
      function Prefixed(value0) {
          this.value0 = value0;
      };
      Prefixed.create = function (value0) {
          return new Prefixed(value0);
      };
      return Prefixed;
  })();
  var Plain = (function () {
      function Plain(value0) {
          this.value0 = value0;
      };
      Plain.create = function (value0) {
          return new Plain(value0);
      };
      return Plain;
  })();
  var Value = function (x) {
      return x;
  };
  var Key = function (x) {
      return x;
  };
  var Val = function (value) {
      this.value = value;
  };
  var value = function (dict) {
      return dict.value;
  };                                                                       
  var semigroupPrefixed = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Plain && v1 instanceof Plain) {
              return Plain.create(v.value0 + v1.value0);
          };
          if (v instanceof Plain && v1 instanceof Prefixed) {
              return Prefixed.create(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (v2) {
                  return v.value0 + v2;
              }))(v1.value0));
          };
          if (v instanceof Prefixed && v1 instanceof Plain) {
              return Prefixed.create(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (v2) {
                  return v1.value0 + v2;
              }))(v.value0));
          };
          if (v instanceof Prefixed && v1 instanceof Prefixed) {
              return Prefixed.create(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0));
          };
          throw new Error("Failed pattern match at CSS.Property line 26, column 3 - line 26, column 46: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var semigroupValue = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Value(Data_Semigroup.append(semigroupPrefixed)(v)(v1));
      };
  });
  var plain = function (v) {
      if (v instanceof Prefixed) {
          return Data_Maybe.fromMaybe("")(Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)("")(v.value0));
      };
      if (v instanceof Plain) {
          return v.value0;
      };
      throw new Error("Failed pattern match at CSS.Property line 35, column 1 - line 35, column 50: " + [ v.constructor.name ]);
  };                                     
  var isStringPrefixed = new CSS_String.IsString(Plain.create);
  var isStringValue = new CSS_String.IsString(function ($145) {
      return Value(CSS_String.fromString(isStringPrefixed)($145));
  });
  var valColor = new Val(function ($147) {
      return CSS_String.fromString(isStringValue)(Color.cssStringHSLA($147));
  });
  var valNumber = new Val(function ($150) {
      return CSS_String.fromString(isStringValue)(Data_Show.show(Data_Show.showNumber)($150));
  });                                                           
  var valTuple = function (dictVal) {
      return function (dictVal1) {
          return new Val(function (v) {
              return Data_Semigroup.append(semigroupValue)(value(dictVal)(v.value0))(Data_Semigroup.append(semigroupValue)(CSS_String.fromString(isStringValue)(" "))(value(dictVal1)(v.value1)));
          });
      };
  };
  var valUnit = new Val(function (u) {
      return CSS_String.fromString(isStringValue)("");
  });
  var isStringKey = new CSS_String.IsString(function ($151) {
      return Key(CSS_String.fromString(isStringPrefixed)($151));
  });
  var cast = function (v) {
      return v;
  };
  exports["Key"] = Key;
  exports["Prefixed"] = Prefixed;
  exports["Plain"] = Plain;
  exports["Value"] = Value;
  exports["Val"] = Val;
  exports["cast"] = cast;
  exports["plain"] = plain;
  exports["value"] = value;
  exports["isStringPrefixed"] = isStringPrefixed;
  exports["semigroupPrefixed"] = semigroupPrefixed;
  exports["isStringKey"] = isStringKey;
  exports["isStringValue"] = isStringValue;
  exports["semigroupValue"] = semigroupValue;
  exports["valUnit"] = valUnit;
  exports["valTuple"] = valTuple;
  exports["valNumber"] = valNumber;
  exports["valColor"] = valColor;
})(PS["CSS.Property"] = PS["CSS.Property"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Generic = PS["Data.Generic"];
  var Data_String = PS["Data.String"];
  var CSS_String = PS["CSS.String"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Id = (function () {
      function Id(value0) {
          this.value0 = value0;
      };
      Id.create = function (value0) {
          return new Id(value0);
      };
      return Id;
  })();
  var Class = (function () {
      function Class(value0) {
          this.value0 = value0;
      };
      Class.create = function (value0) {
          return new Class(value0);
      };
      return Class;
  })();
  var Attr = (function () {
      function Attr(value0) {
          this.value0 = value0;
      };
      Attr.create = function (value0) {
          return new Attr(value0);
      };
      return Attr;
  })();
  var AttrVal = (function () {
      function AttrVal(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttrVal.create = function (value0) {
          return function (value1) {
              return new AttrVal(value0, value1);
          };
      };
      return AttrVal;
  })();
  var AttrBegins = (function () {
      function AttrBegins(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttrBegins.create = function (value0) {
          return function (value1) {
              return new AttrBegins(value0, value1);
          };
      };
      return AttrBegins;
  })();
  var AttrEnds = (function () {
      function AttrEnds(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttrEnds.create = function (value0) {
          return function (value1) {
              return new AttrEnds(value0, value1);
          };
      };
      return AttrEnds;
  })();
  var AttrContains = (function () {
      function AttrContains(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttrContains.create = function (value0) {
          return function (value1) {
              return new AttrContains(value0, value1);
          };
      };
      return AttrContains;
  })();
  var AttrSpace = (function () {
      function AttrSpace(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttrSpace.create = function (value0) {
          return function (value1) {
              return new AttrSpace(value0, value1);
          };
      };
      return AttrSpace;
  })();
  var AttrHyph = (function () {
      function AttrHyph(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttrHyph.create = function (value0) {
          return function (value1) {
              return new AttrHyph(value0, value1);
          };
      };
      return AttrHyph;
  })();
  var Pseudo = (function () {
      function Pseudo(value0) {
          this.value0 = value0;
      };
      Pseudo.create = function (value0) {
          return new Pseudo(value0);
      };
      return Pseudo;
  })();
  var PseudoFunc = (function () {
      function PseudoFunc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PseudoFunc.create = function (value0) {
          return function (value1) {
              return new PseudoFunc(value0, value1);
          };
      };
      return PseudoFunc;
  })();
  var Star = (function () {
      function Star() {

      };
      Star.value = new Star();
      return Star;
  })();
  var Elem = (function () {
      function Elem(value0) {
          this.value0 = value0;
      };
      Elem.create = function (value0) {
          return new Elem(value0);
      };
      return Elem;
  })();
  var PathChild = (function () {
      function PathChild(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PathChild.create = function (value0) {
          return function (value1) {
              return new PathChild(value0, value1);
          };
      };
      return PathChild;
  })();
  var Deep = (function () {
      function Deep(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Deep.create = function (value0) {
          return function (value1) {
              return new Deep(value0, value1);
          };
      };
      return Deep;
  })();
  var Adjacent = (function () {
      function Adjacent(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Adjacent.create = function (value0) {
          return function (value1) {
              return new Adjacent(value0, value1);
          };
      };
      return Adjacent;
  })();
  var Combined = (function () {
      function Combined(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Combined.create = function (value0) {
          return function (value1) {
              return new Combined(value0, value1);
          };
      };
      return Combined;
  })();
  var Selector = (function () {
      function Selector(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Selector.create = function (value0) {
          return function (value1) {
              return new Selector(value0, value1);
          };
      };
      return Selector;
  })();
  var $$with = function (v) {
      return function (v1) {
          return new Selector(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1), v.value1);
      };
  };
  var star = new Selector([  ], Star.value);
  var eqPredicate = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Id && y instanceof Id) {
              return x.value0 === y.value0;
          };
          if (x instanceof Class && y instanceof Class) {
              return x.value0 === y.value0;
          };
          if (x instanceof Attr && y instanceof Attr) {
              return x.value0 === y.value0;
          };
          if (x instanceof AttrVal && y instanceof AttrVal) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof AttrBegins && y instanceof AttrBegins) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof AttrEnds && y instanceof AttrEnds) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof AttrContains && y instanceof AttrContains) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof AttrSpace && y instanceof AttrSpace) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof AttrHyph && y instanceof AttrHyph) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof Pseudo && y instanceof Pseudo) {
              return x.value0 === y.value0;
          };
          if (x instanceof PseudoFunc && y instanceof PseudoFunc) {
              return x.value0 === y.value0 && Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(x.value1)(y.value1);
          };
          return false;
      };
  });
  var ordPredicate = new Data_Ord.Ord(function () {
      return eqPredicate;
  }, function (x) {
      return function (y) {
          if (x instanceof Id && y instanceof Id) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          if (x instanceof Id) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Id) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Class && y instanceof Class) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          if (x instanceof Class) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Class) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Attr && y instanceof Attr) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          if (x instanceof Attr) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Attr) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AttrVal && y instanceof AttrVal) {
              var $374 = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if ($374 instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if ($374 instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof AttrVal) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AttrVal) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AttrBegins && y instanceof AttrBegins) {
              var $383 = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if ($383 instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if ($383 instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof AttrBegins) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AttrBegins) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AttrEnds && y instanceof AttrEnds) {
              var $392 = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if ($392 instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if ($392 instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof AttrEnds) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AttrEnds) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AttrContains && y instanceof AttrContains) {
              var $401 = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if ($401 instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if ($401 instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof AttrContains) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AttrContains) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AttrSpace && y instanceof AttrSpace) {
              var $410 = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if ($410 instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if ($410 instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof AttrSpace) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AttrSpace) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AttrHyph && y instanceof AttrHyph) {
              var $419 = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if ($419 instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if ($419 instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof AttrHyph) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AttrHyph) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Pseudo && y instanceof Pseudo) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          if (x instanceof Pseudo) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Pseudo) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PseudoFunc && y instanceof PseudoFunc) {
              var $432 = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if ($432 instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if ($432 instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordArray(Data_Ord.ordString))(x.value1)(y.value1);
          };
          throw new Error("Failed pattern match at CSS.Selector line 24, column 1 - line 24, column 46: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var element = function (e) {
      return new Selector([  ], new Elem(e));
  };
  var deep = function (a) {
      return function (b) {
          return new Selector([  ], new Deep(a, b));
      };
  };
  var child = function (a) {
      return function (b) {
          return new Selector([  ], new PathChild(a, b));
      };
  };
  exports["Star"] = Star;
  exports["Elem"] = Elem;
  exports["PathChild"] = PathChild;
  exports["Deep"] = Deep;
  exports["Adjacent"] = Adjacent;
  exports["Combined"] = Combined;
  exports["Id"] = Id;
  exports["Class"] = Class;
  exports["Attr"] = Attr;
  exports["AttrVal"] = AttrVal;
  exports["AttrBegins"] = AttrBegins;
  exports["AttrEnds"] = AttrEnds;
  exports["AttrContains"] = AttrContains;
  exports["AttrSpace"] = AttrSpace;
  exports["AttrHyph"] = AttrHyph;
  exports["Pseudo"] = Pseudo;
  exports["PseudoFunc"] = PseudoFunc;
  exports["Selector"] = Selector;
  exports["child"] = child;
  exports["deep"] = deep;
  exports["element"] = element;
  exports["star"] = star;
  exports["with"] = $$with;
  exports["eqPredicate"] = eqPredicate;
  exports["ordPredicate"] = ordPredicate;
})(PS["CSS.Selector"] = PS["CSS.Selector"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];        
  var MonadTell = function (__superclass_Control$dotMonad$dotMonad_0, tell) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.tell = tell;
  };
  var tell = function (dict) {
      return dict.tell;
  };
  exports["MonadTell"] = MonadTell;
  exports["tell"] = tell;
})(PS["Control.Monad.Writer.Class"] = PS["Control.Monad.Writer.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Unit = PS["Data.Unit"];        
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };
  var mapWriterT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorWriterT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
      });
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return new Control_Apply.Apply(function () {
              return functorWriterT(dictApply["__superclass_Data.Functor.Functor_0"]());
          }, function (v) {
              return function (v1) {
                  var k = function (v3) {
                      return function (v4) {
                          return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                      };
                  };
                  return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(k)(v))(v1);
              };
          });
      };
  };
  var bindWriterT = function (dictSemigroup) {
      return function (dictBind) {
          return new Control_Bind.Bind(function () {
              return applyWriterT(dictSemigroup)(dictBind["__superclass_Control.Apply.Apply_0"]());
          }, function (v) {
              return function (k) {
                  return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
                      var $81 = k(v1.value0);
                      return Data_Functor.map((dictBind["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(function (v2) {
                          return new Data_Tuple.Tuple(v2.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v2.value1));
                      })($81);
                  }));
              };
          });
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return new Control_Applicative.Applicative(function () {
              return applyWriterT(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(dictApplicative["__superclass_Control.Apply.Apply_0"]());
          }, function (a) {
              return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          });
      };
  };
  var monadWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeWriterT(dictMonoid)(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
          }, function () {
              return bindWriterT(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(dictMonad["__superclass_Control.Bind.Bind_1"]());
          });
      };
  };
  var monadTellWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadWriterT(dictMonoid)(dictMonad);
          }, function ($114) {
              return WriterT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Tuple.Tuple.create(Data_Unit.unit)($114)));
          });
      };
  };
  exports["WriterT"] = WriterT;
  exports["mapWriterT"] = mapWriterT;
  exports["runWriterT"] = runWriterT;
  exports["functorWriterT"] = functorWriterT;
  exports["applyWriterT"] = applyWriterT;
  exports["applicativeWriterT"] = applicativeWriterT;
  exports["bindWriterT"] = bindWriterT;
  exports["monadWriterT"] = monadWriterT;
  exports["monadTellWriterT"] = monadTellWriterT;
})(PS["Control.Monad.Writer.Trans"] = PS["Control.Monad.Writer.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var runWriter = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Writer_Trans.runWriterT($0));
  };
  var execWriter = function (m) {
      return Data_Tuple.snd(runWriter(m));
  };
  exports["execWriter"] = execWriter;
  exports["runWriter"] = runWriter;
})(PS["Control.Monad.Writer"] = PS["Control.Monad.Writer"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Writer = PS["Control.Monad.Writer"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var CSS_Property = PS["CSS.Property"];
  var CSS_Selector = PS["CSS.Selector"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Identity = PS["Data.Identity"];
  var Self = (function () {
      function Self(value0) {
          this.value0 = value0;
      };
      Self.create = function (value0) {
          return new Self(value0);
      };
      return Self;
  })();
  var Root = (function () {
      function Root(value0) {
          this.value0 = value0;
      };
      Root.create = function (value0) {
          return new Root(value0);
      };
      return Root;
  })();
  var Pop = (function () {
      function Pop(value0) {
          this.value0 = value0;
      };
      Pop.create = function (value0) {
          return new Pop(value0);
      };
      return Pop;
  })();
  var Child = (function () {
      function Child(value0) {
          this.value0 = value0;
      };
      Child.create = function (value0) {
          return new Child(value0);
      };
      return Child;
  })();
  var Sub = (function () {
      function Sub(value0) {
          this.value0 = value0;
      };
      Sub.create = function (value0) {
          return new Sub(value0);
      };
      return Sub;
  })();
  var Property = (function () {
      function Property(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Property.create = function (value0) {
          return function (value1) {
              return new Property(value0, value1);
          };
      };
      return Property;
  })();
  var Nested = (function () {
      function Nested(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Nested.create = function (value0) {
          return function (value1) {
              return new Nested(value0, value1);
          };
      };
      return Nested;
  })();
  var Query = (function () {
      function Query(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Query.create = function (value0) {
          return function (value1) {
              return new Query(value0, value1);
          };
      };
      return Query;
  })();
  var Face = (function () {
      function Face(value0) {
          this.value0 = value0;
      };
      Face.create = function (value0) {
          return new Face(value0);
      };
      return Face;
  })();
  var Keyframe = (function () {
      function Keyframe(value0) {
          this.value0 = value0;
      };
      Keyframe.create = function (value0) {
          return new Keyframe(value0);
      };
      return Keyframe;
  })();
  var Import = (function () {
      function Import(value0) {
          this.value0 = value0;
      };
      Import.create = function (value0) {
          return new Import(value0);
      };
      return Import;
  })();
  var S = function (x) {
      return x;
  };
  var runS = function (v) {
      return Control_Monad_Writer.execWriter(v);
  };
  var rule = function ($424) {
      return S(Control_Monad_Writer_Class.tell(Control_Monad_Writer_Trans.monadTellWriterT(Data_Monoid.monoidArray)(Data_Identity.monadIdentity))(Data_Array.singleton($424)));
  };
  var key = function (dictVal) {
      return function (k) {
          return function (v) {
              return rule(new Property(CSS_Property.cast(k), CSS_Property.value(dictVal)(v)));
          };
      };
  }; 
  var functorStyleM = new Data_Functor.Functor(function (f) {
      return function (v) {
          return S(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Data_Identity.functorIdentity))(f)(v));
      };
  });
  var applyStyleM = new Control_Apply.Apply(function () {
      return functorStyleM;
  }, function (v) {
      return function (v1) {
          return S(Control_Apply.apply(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Data_Identity.applyIdentity))(v)(v1));
      };
  });
  var bindStyleM = new Control_Bind.Bind(function () {
      return applyStyleM;
  }, function (v) {
      return function (f) {
          return S(Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Data_Identity.bindIdentity))(v)(function ($428) {
              return (function (v1) {
                  return v1;
              })(f($428));
          }));
      };
  });
  exports["Self"] = Self;
  exports["Root"] = Root;
  exports["Pop"] = Pop;
  exports["Child"] = Child;
  exports["Sub"] = Sub;
  exports["Property"] = Property;
  exports["Nested"] = Nested;
  exports["Query"] = Query;
  exports["Face"] = Face;
  exports["Keyframe"] = Keyframe;
  exports["Import"] = Import;
  exports["S"] = S;
  exports["key"] = key;
  exports["rule"] = rule;
  exports["runS"] = runS;
  exports["functorStyleM"] = functorStyleM;
  exports["applyStyleM"] = applyStyleM;
  exports["bindStyleM"] = bindStyleM;
})(PS["CSS.Stylesheet"] = PS["CSS.Stylesheet"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_These = PS["Data.These"];
  var Data_Tuple = PS["Data.Tuple"];
  var CSS_Property = PS["CSS.Property"];
  var CSS_Selector = PS["CSS.Selector"];
  var CSS_String = PS["CSS.String"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Alternative = PS["Control.Alternative"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];        
  var Sheet = function (x) {
      return x;
  };
  var Inline = function (x) {
      return x;
  };
  var sepWith = function (s) {
      return function (a) {
          return function (b) {
              return a + (s + b);
          };
      };
  };
  var semigroupInline = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var semigroupFile = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var properties = function (xs) {
      var sheetRules = Data_Either.either(function (v) {
          return Data_Monoid.mempty(Data_Monoid.monoidString);
      })(function (v) {
          return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ v.value0, ": ", v.value1 ]);
      });
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("; ")(Data_Functor.map(Data_Functor.functorArray)(sheetRules)(xs));
  };
  var predicate = function (v) {
      if (v instanceof CSS_Selector.Id) {
          return "#" + v.value0;
      };
      if (v instanceof CSS_Selector.Class) {
          return "." + v.value0;
      };
      if (v instanceof CSS_Selector.Attr) {
          return "[" + (v.value0 + "]");
      };
      if (v instanceof CSS_Selector.AttrVal) {
          return "[" + (v.value0 + ("='" + (v.value1 + "']")));
      };
      if (v instanceof CSS_Selector.AttrBegins) {
          return "[" + (v.value0 + ("^='" + (v.value1 + "']")));
      };
      if (v instanceof CSS_Selector.AttrEnds) {
          return "[" + (v.value0 + ("$='" + (v.value1 + "']")));
      };
      if (v instanceof CSS_Selector.AttrContains) {
          return "[" + (v.value0 + ("*='" + (v.value1 + "']")));
      };
      if (v instanceof CSS_Selector.AttrSpace) {
          return "[" + (v.value0 + ("~='" + (v.value1 + "']")));
      };
      if (v instanceof CSS_Selector.AttrHyph) {
          return "[" + (v.value0 + ("|='" + (v.value1 + "']")));
      };
      if (v instanceof CSS_Selector.Pseudo) {
          return ":" + v.value0;
      };
      if (v instanceof CSS_Selector.PseudoFunc) {
          return ":" + (v.value0 + ("(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(",")(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at CSS.Render line 181, column 1 - line 181, column 40: " + [ v.constructor.name ]);
  };
  var selector$prime$prime = function (v) {
      return function (v1) {
          if (v.length === 0 && v1 instanceof CSS_Selector.Star) {
              return [ "*" ];
          };
          if (v1 instanceof CSS_Selector.Star) {
              return [ "" ];
          };
          if (v1 instanceof CSS_Selector.Elem) {
              return [ v1.value0 ];
          };
          if (v1 instanceof CSS_Selector.PathChild) {
              return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(sepWith(" > "))(selector$prime(v1.value0)))(selector$prime(v1.value1));
          };
          if (v1 instanceof CSS_Selector.Deep) {
              return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(sepWith(" "))(selector$prime(v1.value0)))(selector$prime(v1.value1));
          };
          if (v1 instanceof CSS_Selector.Adjacent) {
              return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(sepWith(" + "))(selector$prime(v1.value0)))(selector$prime(v1.value1));
          };
          if (v1 instanceof CSS_Selector.Combined) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(selector$prime(v1.value0))(selector$prime(v1.value1));
          };
          throw new Error("Failed pattern match at CSS.Render line 147, column 1 - line 147, column 27: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var selector$prime = function (v) {
      return Data_Functor.map(Data_Functor.functorArray)(function (v1) {
          return v1 + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(predicate)(Data_Array.sort(CSS_Selector.ordPredicate)(v.value0));
      })(selector$prime$prime(v.value0)(v.value1));
  };
  var selector = function ($186) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(selector$prime($186));
  };
  var nel = function (v) {
      if (v.length === 0) {
          return Data_Maybe.Nothing.value;
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
          return new Data_NonEmpty.NonEmpty(v1.head, v1.tail);
      })(Data_Array.uncons(v));
  };                                               
  var merger = function (v) {
      if (v.value0 instanceof CSS_Stylesheet.Child) {
          return Data_Maybe.maybe(v.value0.value0)(function (xs$prime) {
              return CSS_Selector.child(merger(xs$prime))(v.value0.value0);
          })(nel(v.value1));
      };
      if (v.value0 instanceof CSS_Stylesheet.Sub) {
          return Data_Maybe.maybe(v.value0.value0)(function (xs$prime) {
              return CSS_Selector.deep(merger(xs$prime))(v.value0.value0);
          })(nel(v.value1));
      };
      if (v.value0 instanceof CSS_Stylesheet.Root) {
          return Data_Maybe.maybe(v.value0.value0)(function (xs$prime) {
              return CSS_Selector.deep(v.value0.value0)(merger(xs$prime));
          })(nel(v.value1));
      };
      if (v.value0 instanceof CSS_Stylesheet.Pop) {
          return Data_Maybe.maybe(CSS_Selector.element("TODO"))(merger)(nel(Data_Array.drop(v.value0.value0)(Data_Array.cons(v.value0)(v.value1))));
      };
      if (v.value0 instanceof CSS_Stylesheet.Self) {
          return Data_Maybe.maybe(CSS_Selector["with"](CSS_Selector.star)(v.value0.value0))(function (xs$prime) {
              return CSS_Selector["with"](merger(xs$prime))(v.value0.value0);
          })(nel(v.value1));
      };
      throw new Error("Failed pattern match at CSS.Render line 173, column 3 - line 178, column 106: " + [ v.value0.constructor.name ]);
  };
  var mediaType = function (v) {
      return CSS_Property.plain(v);
  };
  var imp = function (t) {
      return Data_Maybe.Just.create(Data_These.That.create(Sheet(CSS_String.fromString(CSS_String.isStringString)("@import url(" + (t + ");\x0a")))));
  };
  var getSheet = function (v) {
      return v;
  };
  var renderedSheet = function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(function ($187) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(getSheet)(Data_These.theseRight($187));
      });
  };
  var getInline = function (v) {
      return v;
  };
  var renderedInline = function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(function ($188) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(getInline)(Data_These.theseLeft($188));
      });
  }; 
  var feature = function (v) {
      return Data_Maybe.maybe(v.value0)(function (v1) {
          return "(" + (v.value0 + (": " + (CSS_Property.plain(v1) + ")")));
      })(v.value1);
  };
  var mediaQuery = function (v) {
      return "@media " + (mediaType(v.value1) + Data_NonEmpty.foldl1(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupString))(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_Functor.functorArray))(function ($189) {
          return (function (v1) {
              return " and " + v1;
          })(feature($189));
      })(v.value2)));
  }; 
  var collect$prime = function (v) {
      return function (v1) {
          if (v instanceof CSS_Property.Plain && v1 instanceof CSS_Property.Plain) {
              return [ new Data_Either.Right(new Data_Tuple.Tuple(v.value0, v1.value0)) ];
          };
          if (v instanceof CSS_Property.Prefixed && v1 instanceof CSS_Property.Plain) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v3) {
                  return Data_Either.Right.create(new Data_Tuple.Tuple(v3.value0 + v3.value1, v1.value0));
              })(v.value0);
          };
          if (v instanceof CSS_Property.Plain && v1 instanceof CSS_Property.Prefixed) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                  return Data_Either.Right.create(new Data_Tuple.Tuple(v.value0, v2.value0 + v2.value1));
              })(v1.value0);
          };
          if (v instanceof CSS_Property.Prefixed && v1 instanceof CSS_Property.Prefixed) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                  return Data_Maybe.maybe(new Data_Either.Left(v2.value0 + v2.value1))(function ($190) {
                      return Data_Either.Right.create(Data_Tuple.Tuple.create(v2.value0 + v2.value1)((function (v3) {
                          return v2.value0 + v3;
                      })($190)));
                  })(Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)(v2.value0)(v1.value0));
              })(v.value0);
          };
          throw new Error("Failed pattern match at CSS.Render line 162, column 1 - line 162, column 51: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var collect = function (v) {
      return collect$prime(v.value0)(v.value1);
  };
  var rule$prime = function (sel) {
      return function (props) {
          var p = Control_Bind.bind(Control_Bind.bindArray)(props)(collect);
          var q = Data_Functor.map(Data_Maybe.functorMaybe)(function ($191) {
              return Data_These.This.create(Inline(properties(Data_NonEmpty.oneOf(Control_Alternative.alternativeArray)($191))));
          })(nel(p));
          var o = function (sel$prime) {
              return Data_Maybe.Just.create(Data_These.That.create(Sheet(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ selector(merger(sel$prime)), "{", properties(p), "}\x0a" ]))));
          };
          return Data_Maybe.maybe(q)(o)(nel(sel));
      };
  };
  var rules = function (sel) {
      return function (rs) {
          var queries = function (v) {
              if (v instanceof CSS_Stylesheet.Query) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
              };
              return Data_Maybe.Nothing.value;
          };
          var queryRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(Data_Tuple.uncurry(Data_Function.flip(query$prime)(sel)))(Data_Array.mapMaybe(queries)(rs));
          var property = function (v) {
              if (v instanceof CSS_Stylesheet.Property) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
              };
              return Data_Maybe.Nothing.value;
          };
          var topRules = (function () {
              var rs$prime = Data_Array.mapMaybe(property)(rs);
              var $173 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Array["null"])(rs$prime);
              if ($173) {
                  return rule$prime(sel)(rs$prime);
              };
              if (!$173) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at CSS.Render line 120, column 25 - line 122, column 39: " + [ $173.constructor.name ]);
          })();
          var nestedRules = function (a) {
              return rules(Data_Array.cons(a)(sel));
          };
          var nested = function (v) {
              if (v instanceof CSS_Stylesheet.Nested) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
              };
              return Data_Maybe.Nothing.value;
          };
          var nestedSheets = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.uncurry(nestedRules))(Data_Array.mapMaybe(nested)(rs)));
          var kframes = function (v) {
              if (v instanceof CSS_Stylesheet.Keyframe) {
                  return new Data_Maybe.Just(v.value0);
              };
              return Data_Maybe.Nothing.value;
          };
          var keyframeRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(kframe)(Data_Array.mapMaybe(kframes)(rs));
          var imports = function (v) {
              if (v instanceof CSS_Stylesheet.Import) {
                  return new Data_Maybe.Just(v.value0);
              };
              return Data_Maybe.Nothing.value;
          };
          var importRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(imp)(Data_Array.mapMaybe(imports)(rs));
          var faces = function (v) {
              if (v instanceof CSS_Stylesheet.Face) {
                  return new Data_Maybe.Just(v.value0);
              };
              return Data_Maybe.Nothing.value;
          };
          var faceRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(face)(Data_Array.mapMaybe(faces)(rs));
          return Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(topRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(importRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(keyframeRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(faceRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(nestedSheets)(queryRules)))));
      };
  };
  var query$prime = function (q) {
      return function (sel) {
          return function (rs) {
              return Data_Maybe.Just.create(Data_These.That.create(Sheet(mediaQuery(q) + (" { " + (Data_Maybe.fromMaybe("")(renderedSheet(rules(sel)(rs))) + " }\x0a")))));
          };
      };
  };
  var kframe = function (v) {
      var renderContent = " " + (v.value0 + (" { " + (Data_Foldable.intercalate(Data_NonEmpty.foldableNonEmpty(Data_Foldable.foldableArray))(Data_Monoid.monoidString)(" ")(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_Functor.functorArray))(Data_Tuple.uncurry(frame))(v.value1)) + " }\x0a")));
      var keywords = [ "@keyframes", "@-webkit-keyframes", "@-moz-keyframes", "@-o-keyframes" ];
      var allKeywordsWithContent = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
          return v1 + renderContent;
      })(keywords));
      return Data_Maybe.Just.create(Data_These.That.create(Sheet(allKeywordsWithContent)));
  };
  var frame = function (p) {
      return function (rs) {
          var x = Data_Maybe.fromMaybe("")(renderedInline(rules([  ])(rs)));
          return Data_Show.show(Data_Show.showNumber)(p) + ("% " + ("{ " + (x + " }")));
      };
  };
  var face = function (rs) {
      return Data_Maybe.Just.create(Data_These.That.create(Sheet("@font-face { " + (Data_Maybe.fromMaybe("")(renderedInline(rules([  ])(rs))) + " }\x0a"))));
  };
  var render = function ($192) {
      return rules([  ])(CSS_Stylesheet.runS($192));
  };
  exports["Inline"] = Inline;
  exports["Sheet"] = Sheet;
  exports["collect"] = collect;
  exports["face"] = face;
  exports["feature"] = feature;
  exports["frame"] = frame;
  exports["getInline"] = getInline;
  exports["getSheet"] = getSheet;
  exports["imp"] = imp;
  exports["kframe"] = kframe;
  exports["mediaQuery"] = mediaQuery;
  exports["mediaType"] = mediaType;
  exports["merger"] = merger;
  exports["nel"] = nel;
  exports["predicate"] = predicate;
  exports["properties"] = properties;
  exports["render"] = render;
  exports["renderedInline"] = renderedInline;
  exports["renderedSheet"] = renderedSheet;
  exports["rules"] = rules;
  exports["selector"] = selector;
  exports["sepWith"] = sepWith;
  exports["semigroupInline"] = semigroupInline;
  exports["semigroupFile"] = semigroupFile;
})(PS["CSS.Render"] = PS["CSS.Render"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var value = Text_Smolder_Markup.attribute("value");  
  var type$prime = Text_Smolder_Markup.attribute("type");
  var style = Text_Smolder_Markup.attribute("style");    
  var rows = Text_Smolder_Markup.attribute("rows");  
  var id = Text_Smolder_Markup.attribute("id");    
  var hidden = Text_Smolder_Markup.attribute("hidden");  
  var cols = Text_Smolder_Markup.attribute("cols");                   
  var accept = Text_Smolder_Markup.attribute("accept");
  exports["accept"] = accept;
  exports["cols"] = cols;
  exports["hidden"] = hidden;
  exports["id"] = id;
  exports["rows"] = rows;
  exports["style"] = style;
  exports["type'"] = type$prime;
  exports["value"] = value;
})(PS["Text.Smolder.HTML.Attributes"] = PS["Text.Smolder.HTML.Attributes"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var CSS_Render = PS["CSS.Render"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];        
  var style = function (css) {
      return Text_Smolder_HTML_Attributes.style(Data_Maybe.fromMaybe("")(CSS_Render.renderedInline(CSS_Render.render(css))));
  };
  exports["style"] = style;
})(PS["Pux.DOM.HTML.Attributes"] = PS["Pux.DOM.HTML.Attributes"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var textarea = Text_Smolder_Markup.parent("textarea");
  var span = Text_Smolder_Markup.parent("span");
  var p = Text_Smolder_Markup.parent("p");    
  var input = Text_Smolder_Markup.leaf("input");
  var h1 = Text_Smolder_Markup.parent("h1");
  var div = Text_Smolder_Markup.parent("div");        
  var canvas = Text_Smolder_Markup.parent("canvas");
  var button = Text_Smolder_Markup.parent("button");
  exports["button"] = button;
  exports["canvas"] = canvas;
  exports["div"] = div;
  exports["h1"] = h1;
  exports["input"] = input;
  exports["p"] = p;
  exports["span"] = span;
  exports["textarea"] = textarea;
})(PS["Text.Smolder.HTML"] = PS["Text.Smolder.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Generic = PS["Data.Generic"];
  var CSS_Common = PS["CSS.Common"];
  var CSS_Property = PS["CSS.Property"];
  var CSS_String = PS["CSS.String"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var valSize = new CSS_Property.Val(function (v) {
      return v;
  });
  var px = function (i) {
      return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("px"));
  };
  var em = function (i) {
      return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("em"));
  };
  exports["em"] = em;
  exports["px"] = px;
  exports["valSize"] = valSize;
})(PS["CSS.Size"] = PS["CSS.Size"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var tuple4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, Data_Unit.unit))));
              };
          };
      };
  };
  exports["tuple4"] = tuple4;
})(PS["Data.Tuple.Nested"] = PS["Data.Tuple.Nested"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var CSS_Size = PS["CSS.Size"];
  var CSS_String = PS["CSS.String"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var CSS_Property = PS["CSS.Property"];        
  var width = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("width"));                 
  var padding = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valUnit)))))(CSS_String.fromString(CSS_Property.isStringKey)("padding"))(Data_Tuple_Nested.tuple4(a)(b)(c)(d));
              };
          };
      };
  };                                                                                                                        
  var margin = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valUnit)))))(CSS_String.fromString(CSS_Property.isStringKey)("margin"))(Data_Tuple_Nested.tuple4(a)(b)(c)(d));
              };
          };
      };
  };
  exports["margin"] = margin;
  exports["padding"] = padding;
  exports["width"] = width;
})(PS["CSS.Geometry"] = PS["CSS.Geometry"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var CSS_Color = PS["CSS.Color"];
  var CSS_Common = PS["CSS.Common"];
  var CSS_Property = PS["CSS.Property"];
  var CSS_Size = PS["CSS.Size"];
  var CSS_String = PS["CSS.String"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Data_Generic = PS["Data.Generic"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Alternative = PS["Control.Alternative"];                                                               
  var fontSize = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("font-size"));
  var color = CSS_Stylesheet.key(CSS_Property.valColor)(CSS_String.fromString(CSS_Property.isStringKey)("color"));
  exports["color"] = color;
  exports["fontSize"] = fontSize;
})(PS["CSS.Font"] = PS["CSS.Font"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Tuple = PS["Data.Tuple"];
  var CSS_Box = PS["CSS.Box"];
  var CSS_Color = PS["CSS.Color"];
  var CSS_Common = PS["CSS.Common"];
  var CSS_Property = PS["CSS.Property"];
  var CSS_Size = PS["CSS.Size"];
  var CSS_String = PS["CSS.String"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Data_Function = PS["Data.Function"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semigroup = PS["Data.Semigroup"];                                                                   
  var backgroundColor = CSS_Stylesheet.key(CSS_Property.valColor)(CSS_String.fromString(CSS_Property.isStringKey)("background-color"));
  exports["backgroundColor"] = backgroundColor;
})(PS["CSS.Background"] = PS["CSS.Background"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var CSS_Common = PS["CSS.Common"];
  var CSS_Property = PS["CSS.Property"];
  var CSS_String = PS["CSS.String"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Function = PS["Data.Function"];
  var FloatLeft = (function () {
      function FloatLeft() {

      };
      FloatLeft.value = new FloatLeft();
      return FloatLeft;
  })();
  var FloatRight = (function () {
      function FloatRight() {

      };
      FloatRight.value = new FloatRight();
      return FloatRight;
  })();
  var FloatNone = (function () {
      function FloatNone() {

      };
      FloatNone.value = new FloatNone();
      return FloatNone;
  })();
  var Display = function (x) {
      return x;
  }; 
  var valFloat = new CSS_Property.Val(function (v) {
      if (v instanceof FloatLeft) {
          return CSS_String.fromString(CSS_Property.isStringValue)("left");
      };
      if (v instanceof FloatRight) {
          return CSS_String.fromString(CSS_Property.isStringValue)("right");
      };
      if (v instanceof FloatNone) {
          return CSS_String.fromString(CSS_Property.isStringValue)("none");
      };
      throw new Error("Failed pattern match at CSS.Display line 118, column 3 - line 119, column 3: " + [ v.constructor.name ]);
  });
  var valDisplay = new CSS_Property.Val(function (v) {
      return v;
  });                               
  var floatLeft = FloatLeft.value;
  var $$float = CSS_Stylesheet.key(valFloat)(CSS_String.fromString(CSS_Property.isStringKey)("float"));
  var display = CSS_Stylesheet.key(valDisplay)(CSS_String.fromString(CSS_Property.isStringKey)("display"));
  var block = Display(CSS_String.fromString(CSS_Property.isStringValue)("block"));
  exports["Display"] = Display;
  exports["FloatLeft"] = FloatLeft;
  exports["FloatRight"] = FloatRight;
  exports["FloatNone"] = FloatNone;
  exports["block"] = block;
  exports["display"] = display;
  exports["float"] = $$float;
  exports["floatLeft"] = floatLeft;
  exports["valDisplay"] = valDisplay;
  exports["valFloat"] = valFloat;
})(PS["CSS.Display"] = PS["CSS.Display"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Generic = PS["Data.Generic"];
  var CSS_Property = PS["CSS.Property"];
  var CSS_String = PS["CSS.String"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];        
  var TextAlign = function (x) {
      return x;
  };
  var valTextAlign = new CSS_Property.Val(function (v) {
      return v;
  });
  var textAlign = CSS_Stylesheet.key(valTextAlign)(CSS_String.fromString(CSS_Property.isStringKey)("text-align"));
  var leftTextAlign = TextAlign(CSS_String.fromString(CSS_Property.isStringValue)("left"));
  var center = TextAlign(CSS_String.fromString(CSS_Property.isStringValue)("center"));
  exports["TextAlign"] = TextAlign;
  exports["center"] = center;
  exports["leftTextAlign"] = leftTextAlign;
  exports["textAlign"] = textAlign;
  exports["valTextAlign"] = valTextAlign;
})(PS["CSS.TextAlign"] = PS["CSS.TextAlign"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Color = PS["Color"];                 
  var red = Color.rgb(255)(0)(0);
  exports["red"] = red;
})(PS["Color.Scheme.X11"] = PS["Color.Scheme.X11"] || {});
(function(exports) {
    "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Data_Abc = PS["Data.Abc"];
  var Data_Abc_Parser = PS["Data.Abc.Parser"];
  var VexTab_Score = PS["VexTab.Score"];
  var VexTab_Abc_Score = PS["VexTab.Abc.Score"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var FileIO_FileIO = PS["FileIO.FileIO"];
  var Prelude = PS["Prelude"];
  var Pux = PS["Pux"];
  var Pux_DOM_Events = PS["Pux.DOM.Events"];
  var Pux_DOM_HTML = PS["Pux.DOM.HTML"];
  var Pux_DOM_HTML_Attributes = PS["Pux.DOM.HTML.Attributes"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var CSS_Size = PS["CSS.Size"];
  var CSS_Geometry = PS["CSS.Geometry"];
  var CSS_Font = PS["CSS.Font"];
  var CSS_Background = PS["CSS.Background"];
  var CSS_Color = PS["CSS.Color"];
  var CSS_Display = PS["CSS.Display"];
  var CSS_TextAlign = PS["CSS.TextAlign"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Color = PS["Color"];
  var Color_Scheme_X11 = PS["Color.Scheme.X11"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];        

  // import Debug.Trace (trace, traceShow, traceShowM)
  var NoOp = (function () {
      function NoOp() {

      };
      NoOp.value = new NoOp();
      return NoOp;
  })();

  // import Debug.Trace (trace, traceShow, traceShowM)
  var Abc = (function () {
      function Abc(value0) {
          this.value0 = value0;
      };
      Abc.create = function (value0) {
          return new Abc(value0);
      };
      return Abc;
  })();

  // import Debug.Trace (trace, traceShow, traceShowM)
  var RequestFileUpload = (function () {
      function RequestFileUpload() {

      };
      RequestFileUpload.value = new RequestFileUpload();
      return RequestFileUpload;
  })();

  // import Debug.Trace (trace, traceShow, traceShowM)
  var RequestFileDownload = (function () {
      function RequestFileDownload() {

      };
      RequestFileDownload.value = new RequestFileDownload();
      return RequestFileDownload;
  })();

  // import Debug.Trace (trace, traceShow, traceShowM)
  var FileLoaded = (function () {
      function FileLoaded(value0) {
          this.value0 = value0;
      };
      FileLoaded.create = function (value0) {
          return new FileLoaded(value0);
      };
      return FileLoaded;
  })();

  // import Debug.Trace (trace, traceShow, traceShowM)
  var VexInitialised = (function () {
      function VexInitialised(value0) {
          this.value0 = value0;
      };
      VexInitialised.create = function (value0) {
          return new VexInitialised(value0);
      };
      return VexInitialised;
  })();

  // import Debug.Trace (trace, traceShow, traceShowM)
  var VexRendered = (function () {
      function VexRendered(value0) {
          this.value0 = value0;
      };
      VexRendered.create = function (value0) {
          return new VexRendered(value0);
      };
      return VexRendered;
  })();

  // import Debug.Trace (trace, traceShow, traceShowM)
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var viewCanvas = function (state) {
      if (state.vexRendered) {
          return Text_Smolder_HTML.div(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.canvas)(Text_Smolder_HTML_Attributes.id("vextab"))(Text_Smolder_Markup.text("")));
      };
      if (!state.vexRendered) {
          return Text_Smolder_HTML.div(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.canvas)(Text_Smolder_HTML_Attributes.id("vextab")))(Text_Smolder_HTML_Attributes.hidden("hidden"))(Text_Smolder_Markup.text("")));
      };
      throw new Error("Failed pattern match at App line 198, column 5 - line 206, column 1: " + [ state.vexRendered.constructor.name ]);
  };
  var taStyle = Pux_DOM_HTML_Attributes.style(Control_Bind.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.padding(CSS_Size.px(10.0))(CSS_Size.px(0.0))(CSS_Size.px(10.0))(CSS_Size.px(0.0)))(function () {
      return Control_Bind.bind(CSS_Stylesheet.bindStyleM)(CSS_Font.fontSize(CSS_Size.em(1.5)))(function () {
          return Control_Bind.bind(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(Color.rgb(243)(246)(198)))(function () {
              return Control_Bind.bind(CSS_Stylesheet.bindStyleM)(CSS_TextAlign.textAlign(CSS_TextAlign.leftTextAlign))(function () {
                  return Control_Bind.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(0.0))(CSS_Size.px(2.0))(CSS_Size.px(0.0))(CSS_Size.px(2.0)))(function () {
                      return CSS_Display.display(CSS_Display.block);
                  });
              });
          });
      });
  }));

  /**
 * 
 * leftPaneStyle :: forall a. Attribute a
 * leftPaneStyle =
 *     style
 *         [ Tuple "float" "left"
 *         , Tuple "width" "350px"(const Abc)
 *   style do
 *     margin (px 40.0) (px 0.0) (px 0.0) (px 40.0)
 *     fontSize (em 1.2)
 */  
  var leftPanelLabelStyle = Pux_DOM_HTML_Attributes.style(Control_Bind.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(40.0))(CSS_Size.px(0.0))(CSS_Size.px(0.0))(CSS_Size.px(40.0)))(function () {
      return CSS_Font.fontSize(CSS_Size.em(1.2));
  }));

  /**
 * 
 * centreStyle : Attribute msg
 * centreStyle =
 *     style
 *         [ ( "text-align", "center" )
 *         , ( "margin", "auto" )
 *         ]
 */  
  var leftPaneStyle = Pux_DOM_HTML_Attributes.style(Control_Bind.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.px(350.0)))(function () {
      return CSS_Display["float"](CSS_Display.floatLeft);
  }));

  /**
 * 
 * leftPanelLabelStyle : Attribute msg
 * leftPanelLabelStyle =
 *     style
 *         [ ( "margin-left", "40px" )
 *         , ( "margin-top", "40px" )
 *         , ( "font-size", "1.2em" )
 *         ]
 */  
  var inputStyle = Pux_DOM_HTML_Attributes.style(Control_Bind.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.padding(CSS_Size.px(10.0))(CSS_Size.px(0.0))(CSS_Size.px(10.0))(CSS_Size.px(0.0)))(function () {
      return Control_Bind.bind(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(0.0))(CSS_Size.px(0.0))(CSS_Size.px(0.0))(CSS_Size.px(40.0)))(function () {
          return CSS_Font.fontSize(CSS_Size.em(1.0));
      });
  }));

  // | initialise VexTab
  var initialiseVex = (function () {
      var config = {
          canvasDivId: "#vextab", 
          canvasX: 10, 
          canvasY: 10, 
          canvasWidth: 1200, 
          scale: 0.8
      };
      return VexTab_Score.initialise(config);
  })();
  var initialState = {
      abc: "", 
      fileName: Data_Maybe.Nothing.value, 
      tuneResult: new Data_Either.Left({
          pos: 0, 
          error: "not started"
      }), 
      vexInitialised: false, 
      vexRendered: false
  };

  /**
 * }
 * inputStyle :: forall a. Attribute a
 * inputStyle =
 *     style $ do
 *       paddingTop (10.0 # px)
 *       paddingBottom (10.0 # px)
 *       fontSize (1.0 # em)
 *       marginLeft (40.0 # px)
 */  

  /**
 * 
 * inputStyle : Attribute Msg
 * inputStyle =
 *     style
 *         [ ( "padding", "10px 0" )
 *         , ( "font-size", "1em" )
 *         , ( "margin-left", "40px" )
 *         ]
 */  
  var errorHighlightStyle = Pux_DOM_HTML_Attributes.style(CSS_Font.color(Color_Scheme_X11.red));

  // | display a snippet of text with the error highlighted
  var viewParseError = function (state) {
    
      // the range of characters to display around each side of the error position
  var txt = Data_String.toCharArray(state.abc);
      if (state.tuneResult instanceof Data_Either.Left) {
        
          // display a prefix of 5 characters before the error (if they're there) and a suffix of 5 after
  var startSuffix = Data_Ord.min(Data_Ord.ordInt)(state.tuneResult.value0.pos + 1 | 0)(Data_Array.length(txt));
          var startPhrase = Data_Ord.max(Data_Ord.ordInt)(state.tuneResult.value0.pos - 10 | 0)(0);
          var errorPrefix = Data_Array.slice(startPhrase)(state.tuneResult.value0.pos)(txt);
          var errorChar = Data_Array.slice(state.tuneResult.value0.pos)(state.tuneResult.value0.pos + 1 | 0)(txt);
          var endSuffix = Data_Ord.min(Data_Ord.ordInt)((state.tuneResult.value0.pos + 10 | 0) + 1 | 0)(Data_Array.length(txt));
          var errorSuffix = Data_Array.slice(startSuffix)(endSuffix)(txt);
          return Text_Smolder_HTML.p(Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup.text(state.tuneResult.value0.error + " - "))(function () {
              return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup.text(Data_String.fromCharArray(errorPrefix)))(function () {
                  return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.span)(errorHighlightStyle)(Text_Smolder_Markup.text(Data_String.fromCharArray(errorChar))))(function () {
                      return Text_Smolder_Markup.text(Data_String.fromCharArray(errorSuffix));
                  });
              });
          }));
      };
      return Text_Smolder_Markup.text("");
  };

  // | this is a horribly complicated type signature that I need to understand

  // | we cannot initialise Vex until we have rendered the Dom so initialise on first reference

  // ensureVexInitialised :: forall e. State -> Aff e (Maybe Event)
  var ensureVexInitialised = function (dictApplicative) {
      return function (dictBind) {
          return function (dictMonadEff) {
              return function (state) {
                  if (state.vexInitialised) {
                      return Control_Applicative.pure(dictApplicative)(new Data_Maybe.Just(NoOp.value));
                  };
                  if (!state.vexInitialised) {
                      return Control_Bind.bind(dictBind)(Control_Monad_Eff_Class.liftEff(dictMonadEff)(initialiseVex))(function (v) {
                          return Control_Applicative.pure(dictApplicative)(new Data_Maybe.Just(new VexInitialised(v)));
                      });
                  };
                  throw new Error("Failed pattern match at App line 150, column 3 - line 156, column 47: " + [ state.vexInitialised.constructor.name ]);
              };
          };
      };
  };

  // | make sure everything is notified if the ABC changes for any reason

  // | we'll eventually have to add effects
  var onChangedAbc = function (abc) {
      return function (state) {
          var tuneResult = Data_Abc_Parser.parse(abc + " \x0d\x0a");
          var newState = (function () {
              var $18 = {};
              for (var $19 in state) {
                  if ({}.hasOwnProperty.call(state, $19)) {
                      $18[$19] = state[$19];
                  };
              };
              $18.tuneResult = tuneResult;
              $18.abc = abc;
              $18.vexRendered = false;
              return $18;
          })();
          if (tuneResult instanceof Data_Either.Right) {
              return {
                  state: newState, 
                  effects: [ ensureVexInitialised(Control_Monad_Aff.applicativeAff)(Control_Monad_Aff.bindAff)(Control_Monad_Aff.monadEffAff)(newState), Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(VexTab_Abc_Score.renderTune(tuneResult.value0)))(function (v) {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Maybe.Just(new VexRendered(v)));
                  }) ]
              };
          };
          if (tuneResult instanceof Data_Either.Left) {
              return Pux.noEffects(newState);
          };
          throw new Error("Failed pattern match at App line 122, column 5 - line 135, column 27: " + [ tuneResult.constructor.name ]);
      };
  };

  // | make sure everything is notified if a new file is loaded
  var onChangedFile = function (filespec) {
      return function (state) {
          var newState = (function () {
              var $25 = {};
              for (var $26 in state) {
                  if ({}.hasOwnProperty.call(state, $26)) {
                      $25[$26] = state[$26];
                  };
              };
              $25.fileName = new Data_Maybe.Just(filespec.name);
              return $25;
          })();
          return onChangedAbc(filespec.contents)(newState);
      };
  };
  var foldp = function (v) {
      return function (state) {
          if (v instanceof NoOp) {
              return Pux.noEffects(state);
          };
          if (v instanceof Abc) {
              return onChangedAbc(v.value0)(state);
          };
          if (v instanceof RequestFileUpload) {
              return {
                  state: state, 
                  effects: [ Control_Bind.bind(Control_Monad_Aff.bindAff)(FileIO_FileIO.loadTextFile)(function (v1) {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Maybe.Just(new FileLoaded(v1)));
                  }) ]
              };
          };
          if (v instanceof RequestFileDownload) {
              return {
                  state: state, 
                  effects: [ (function () {
                      var fileName = Data_Maybe.fromMaybe("unknown.abc")(state.fileName);
                      var fsp = {
                          name: fileName, 
                          contents: state.abc
                      };
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(FileIO_FileIO.saveTextFile(fsp)))(function (v1) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(new Data_Maybe.Just(NoOp.value));
                      });
                  })() ]
              };
          };
          if (v instanceof FileLoaded) {
              return onChangedFile(v.value0)(state);
          };
          if (v instanceof Reset) {
              return Pux.noEffects((function () {
                  var $34 = {};
                  for (var $35 in state) {
                      if ({}.hasOwnProperty.call(state, $35)) {
                          $34[$35] = state[$35];
                      };
                  };
                  $34.abc = "";
                  $34.fileName = Data_Maybe.Nothing.value;
                  $34.vexRendered = false;
                  return $34;
              })());
          };
          if (v instanceof VexInitialised) {
              return Pux.noEffects((function () {
                  var $37 = {};
                  for (var $38 in state) {
                      if ({}.hasOwnProperty.call(state, $38)) {
                          $37[$38] = state[$38];
                      };
                  };
                  $37.vexInitialised = v.value0;
                  return $37;
              })());
          };
          if (v instanceof VexRendered) {
              return Pux.noEffects((function () {
                  var $41 = {};
                  for (var $42 in state) {
                      if ({}.hasOwnProperty.call(state, $42)) {
                          $41[$42] = state[$42];
                      };
                  };
                  $41.vexRendered = v.value0;
                  return $41;
              })());
          };
          throw new Error("Failed pattern match at App line 81, column 1 - line 81, column 38: " + [ v.constructor.name, state.constructor.name ]);
      };
  };

  // fontFamily [ "monospace" ]

  // align center

  /**
 * }
 *         [ ( "padding", "10px 0" )
 *         , ( "font-size", "1.5em" )
 *         , ( "text-align", "left" )
 *         , ( "align", "center" )
 *         , ( "display", "block" )
 *         , ( "margin-left", "auto" )
 *         , ( "margin-right", "auto" )
 *         , ( "background-color", "#f3f6c6" )
 *         , ( "font-family", "monospace" )
 *         ]
 *     
 */  
  var centreStyle = Pux_DOM_HTML_Attributes.style(CSS_TextAlign.textAlign(CSS_TextAlign.center));
  var view = function (state) {
      return Text_Smolder_HTML.div(Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.h1)(centreStyle)(Text_Smolder_Markup.text("ABC Editor")))(function () {
          return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.div)(leftPaneStyle)(Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.span)(leftPanelLabelStyle)(Text_Smolder_Markup.text("Load an ABC file:")))(function () {
              return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup.withEvent(Text_Smolder_Markup.eventableMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupM)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupM)(Text_Smolder_HTML.input)(inputStyle))(Text_Smolder_HTML_Attributes["type'"]("file")))(Text_Smolder_HTML_Attributes.id("fileinput")))(Text_Smolder_HTML_Attributes.accept(".abc, .txt")))(Pux_DOM_Events.onChange(Data_Function["const"](RequestFileUpload.value))))(function () {
                  return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup.withEvent(Text_Smolder_Markup.eventableMarkupMF)(Text_Smolder_HTML.button)(Pux_DOM_Events.onClick(Data_Function["const"](RequestFileDownload.value)))(Text_Smolder_Markup.text("save")))(function () {
                      return Text_Smolder_Markup.withEvent(Text_Smolder_Markup.eventableMarkupMF)(Text_Smolder_HTML.button)(Pux_DOM_Events.onClick(Data_Function["const"](Reset.value)))(Text_Smolder_Markup.text("reset"));
                  });
              });
          })))(function () {
              return Text_Smolder_HTML.div(Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_HTML.p(Text_Smolder_Markup.text(Data_Maybe.fromMaybe("no file chosen")(state.fileName))))(function () {
                  return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(Text_Smolder_Markup.withEvent(Text_Smolder_Markup.eventableMarkupMF)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupMF)(Text_Smolder_HTML.textarea)(taStyle))(Text_Smolder_HTML_Attributes.cols("70")))(Text_Smolder_HTML_Attributes.rows("15")))(Text_Smolder_HTML_Attributes.value(state.abc)))(Pux_DOM_Events.onInput(function (e) {
                      return new Abc(Pux_DOM_Events.targetValue(e));
                  }))(Text_Smolder_Markup.text("")))(function () {
                      return Control_Bind.bind(Text_Smolder_Markup.bindMarkupM)(viewParseError(state))(function () {
                          return viewCanvas(state);
                      });
                  });
              }));
          });
      }));
  };
  exports["NoOp"] = NoOp;
  exports["Abc"] = Abc;
  exports["RequestFileUpload"] = RequestFileUpload;
  exports["RequestFileDownload"] = RequestFileDownload;
  exports["FileLoaded"] = FileLoaded;
  exports["VexInitialised"] = VexInitialised;
  exports["VexRendered"] = VexRendered;
  exports["Reset"] = Reset;
  exports["centreStyle"] = centreStyle;
  exports["ensureVexInitialised"] = ensureVexInitialised;
  exports["errorHighlightStyle"] = errorHighlightStyle;
  exports["foldp"] = foldp;
  exports["initialState"] = initialState;
  exports["initialiseVex"] = initialiseVex;
  exports["inputStyle"] = inputStyle;
  exports["leftPaneStyle"] = leftPaneStyle;
  exports["leftPanelLabelStyle"] = leftPanelLabelStyle;
  exports["onChangedAbc"] = onChangedAbc;
  exports["onChangedFile"] = onChangedFile;
  exports["taStyle"] = taStyle;
  exports["view"] = view;
  exports["viewCanvas"] = viewCanvas;
  exports["viewParseError"] = viewParseError;
})(PS["App"] = PS["App"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  /* global exports */
  "use strict";      

  exports.runST = function (f) {
    return f;
  };

  function _collect(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_List_Types = PS["Data.List.Types"];
  var Control_Bind = PS["Control.Bind"];
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(dictFoldable)(l)(function (v1) {
                  return Data_StrMap_ST.poke(v)(v1.value0)(v1.value1);
              })();
              return v;
          });
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["pureST"] = pureST;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    'use strict';

  // module Pux.Renderer.React

  var React = (typeof require === 'function' && require('react'))
           || (typeof window === 'object' && window.React);

  var class_cache = {};

  var props_cache = {
    index: 0
  };

  exports.renderToDOM_ = function (selector) {
    var ReactDOM = (typeof require === 'function' && require('react-dom'))
                || (typeof window === 'object' && window.ReactDOM);

    return function (reactClass) {
      return function () {
        ReactDOM.render(React.createElement(reactClass), document.querySelector(selector))
      };
    };
  };

  // Return a React component from virtual DOM signal.
  exports.toReact = function (vdomSignal) {
    var isBrowser = typeof window === 'object';

    // Sets the focus of element with "data-focused" attribute (`focused` constructor).
    // Provides declarative focus control.
    function setFocus () {
      if (isBrowser && window.__puxActiveElement === true) {
        if (window.__puxActiveElement !== document.activeElement) {
          var el = window.__puxActiveElement = document.querySelector('[data-focused]')
          if (el !== null && document.activeElement !== el) {
            el.focus();
          }
        }
      }
    }

    return React.createClass({
      componentWillMount: function () {
        var ctx = this;
        var subscribed = false;
        vdomSignal.subscribe(function () {
          if (subscribed === true) {
            ctx.forceUpdate();
          } else {
            subscribed = true;
          }
        });
      },
      componentDidMount: setFocus,
      componentDidUpdate: function () {
        props_cache.index = 0;
        setFocus();
      },
      render: function () {
        var vdom = vdomSignal.get();

        if (vdom.length === 1) return vdom[0];

        // Wrap multiple root elements in a div
        return React.createElement('div', null, vdom);
      }
    });
  };

  exports.reactAttr = function (str) {
    return str;
  };

  exports.reactHandler = function (input) {
    return function (handler) {
      return function (ev) {
        if (ev.nativeEvent === undefined) {
          input(handler(ev))();
        }
        input(handler(ev.nativeEvent))();
      };
    };
  };

  exports.reactElement = function (node, name, attrs, children) {
    if (node.__pux_react_elm !== undefined) return node.__pux_react_elm;

    // convert smolder attribute names to react attribute names
    var reactAttrs = {};
    for (var key in attrs) {
      if (attrMap[key]) {
        reactAttrs[attrMap[key]] = attrs[key];
      } else {
        reactAttrs[key] = attrs[key];
      }
    }

    if (reactAttrs.dangerouslySetInnerHTML !== undefined) {
      reactAttrs.dangerouslySetInnerHTML = { __html : reactAttrs.dangerouslySetInnerHTML };
    }

    // Support declarative focus attribute
    if (reactAttrs.focused !== undefined) {
      if (typeof window === 'object') {
        window.__puxActiveElement = true;
        reactAttrs['data-focused'] = 'focused';
      }
    }

    // Parse inline style, because React expects a map instead of a string.
    if (reactAttrs.style !== undefined) {
      reactAttrs.style = reactAttrs.style.split(';').reduce(function (prev, curr) {
        if (!curr) return prev;
        var prop = curr.split(':');
        var key = prop[0].replace(/^ */, '').replace(/ *$/, '').replace(/(-\w)/g, function (m, w) {
          return w[1].toUpperCase();
        });
        var val = prop[1].replace(/^ */, '').replace(/ *$/, '');
        prev[key] = val;
        return prev;
      }, {});
    }

    if (name === 'style') {
      // Convert style element children to string
      if (children !== null && children.length) {
        reactAttrs.dangerouslySetInnerHTML = { __html: children.join(' ') };
        children = null
      }
    } else if (name === 'reactclass') {
      // Support rendering of foreign react classes registered through
      // `registerClass`
      var component = class_cache[reactAttrs['data-pux-react-class']];
      var props = props_cache[reactAttrs['data-pux-react-props']];

      if (props === undefined) props = {};

      for (var key in reactAttrs) {
        if (key !== 'data-pux-react-class') {
          props[key] = reactAttrs[key];
        }
      }

      if (component) {
        return React.createElement(component, props, children);
      } else {
        return React.createElement('div', reactAttrs, children);
      }
    }

    // Eliminate React "key" errors for parents with a single child
    // (React checks for keys when children is passed as an array)
    if (children !== null && children.length === 1) {
      children = children[0];
    }

    // Cache react element. If the same node is rendered again the cached element will be used.
    node.__pux_react_elm = React.createElement(name, reactAttrs, children);

    return node.__pux_react_elm;
  };

  exports.reactText = function (string) {
    return string;
  };

  // Normalize Smolder attribute names with React attribute names
  var attrMap = {
    'accesskey': 'accessKey',
    'allowfullscreen': 'allowFullScreen',
    'allowtransparency': 'allowTransparency',
    'autocomplete': 'autoComplete',
    'autofocus': 'autoFocus',
    'autoplay': 'autoPlay',
    'cellpadding': 'cellPadding',
    'cellspacing': 'cellSpacing',
    'charset': 'charSet',
    'class': 'className',
    'classid': 'classID',
    'colspan': 'colSpan',
    'contextmenu': 'contextMenu',
    'crossorigin': 'crossOrigin',
    'datetime': 'dateTime',
    'enctype': 'encType',
    'formaction': 'formAction',
    'formenctype': 'formEncType',
    'formmethod': 'formMethod',
    'formnovalidate': 'formNoValidate',
    'formtarget': 'formTarget',
    'frameborder': 'frameBorder',
    'for': 'htmlFor',
    'inputmode': 'inputMode',
    'keyparams': 'keyParams',
    'keytype': 'keyType',
    'marginheight': 'marginHeight',
    'marginwidth': 'marginWidth',
    'maxlength': 'maxLength',
    'mediagroup': 'mediaGroup',
    'minlength': 'minLength',
    'novalidate': 'noValidate',
    'radiogroup': 'radioGroup',
    'readonly': 'readOnly',
    'rowspan': 'rowSpan',
    'spellcheck': 'spellCheck',
    'srcdoc': 'srcDoc',
    'srclang': 'srcLang',
    'srcset': 'srcSet',
    'tabindex': 'tabIndex',
    'usemap': 'useMap'
  }
})(PS["Pux.Renderer.React"] = PS["Pux.Renderer.React"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Pux.Renderer.React"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Array = PS["Data.Array"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Pux_DOM_HTML = PS["Pux.DOM.HTML"];
  var Pux_DOM_HTML_Attributes = PS["Pux.DOM.HTML.Attributes"];
  var React = PS["React"];
  var Signal = PS["Signal"];
  var Signal_Channel = PS["Signal.Channel"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_List_Types = PS["Data.List.Types"];        
  var renderAttrs = function (input) {
      return function (attrs) {
          return function (handlers) {
              var toTupleH = function (v) {
                  return new Data_Tuple.Tuple(v.value0, input(v.value1));
              };
              var toTupleA = function (v) {
                  return new Data_Tuple.Tuple(v.value0, $foreign.reactAttr(v.value1));
              };
              var tuples = Data_Semigroup.append(Data_CatList.semigroupCatList)(Data_Functor.map(Data_CatList.functorCatList)(toTupleA)(attrs))(Data_Functor.map(Data_CatList.functorCatList)(toTupleH)(handlers));
              return Data_StrMap.fromFoldable(Data_CatList.foldableCatList)(tuples);
          };
      };
  };
  var renderNodes = function (input) {
      return function (v) {
          if (v instanceof Text_Smolder_Markup.Element) {
              return Data_Array.cons($foreign.reactElement(v, v.value0, renderAttrs(input)(v.value2)(v.value3), Data_Nullable.toNullable(Data_Functor.map(Data_Maybe.functorMaybe)(renderNodes(input))(v.value1))))(renderNodes(input)(v.value4));
          };
          if (v instanceof Text_Smolder_Markup.Content) {
              return Data_Array.cons($foreign.reactText(v.value0))(renderNodes(input)(v.value1));
          };
          if (v instanceof Text_Smolder_Markup.Return) {
              return [  ];
          };
          throw new Error("Failed pattern match at Pux.Renderer.React line 111, column 1 - line 112, column 114: " + [ input.constructor.name, v.constructor.name ]);
      };
  };
  var hook = function (input) {
      return function (a) {
          return Signal_Channel.send(input)(Data_List.singleton(a));
      };
  };
  var renderToReact = function (markup) {
      return function (input) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)($foreign.toReact(Signal.flippedMap(Signal.functorSignal)(markup)(renderNodes($foreign.reactHandler(hook(input))))));
      };
  };
  var renderToDOM = function (selector) {
      return function (markup) {
          return function (input) {
              return Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)($foreign.renderToDOM_(selector))(renderToReact(markup)(input));
          };
      };
  };
  exports["renderToDOM"] = renderToDOM;
  exports["renderToReact"] = renderToReact;
})(PS["Pux.Renderer.React"] = PS["Pux.Renderer.React"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var App = PS["App"];
  var FileIO_FileIO = PS["FileIO.FileIO"];
  var VexTab_Score = PS["VexTab.Score"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Pux = PS["Pux"];
  var Pux_Renderer_React = PS["Pux.Renderer.React"];
  var Control_Bind = PS["Control.Bind"];        
  var main = function __do() {
      var v = Pux.start({
          initialState: App.initialState, 
          view: App.view, 
          foldp: App.foldp, 
          inputs: [  ]
      })();
      return Pux_Renderer_React.renderToDOM("#app")(v.markup)(v.input)();
  };
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
