// Generated by purs bundle 0.13.8
var PS = {};
(function(exports) {
  /* global XMLHttpRequest */
  /* global process */
  "use strict";

  exports._ajax = function () {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url, xhr) {
        if (xhr.nodejsBaseUrl === null) {
          var urllib = module.require("url");
          var u = urllib.parse(url);
          u.protocol = u.protocol || "http:";
          u.hostname = u.hostname || "localhost";
          return urllib.format(u);
        } else {
          return url || "/";
        }
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function (mkHeader, options) {
      return function (errback, callback) {
        var xhr = platformSpecific.newXHR();
        var fixedUrl = platformSpecific.fixupUrl(options.url, xhr);
        xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
        if (options.headers) {
          try {
            for (var i = 0, header; (header = options.headers[i]) != null; i++) {
              xhr.setRequestHeader(header.field, header.value);
            }
          } catch (e) {
            errback(e);
          }
        }
        var onerror = function (msg) {
          return function () {
            errback(new Error(msg + ": " + options.method + " " + options.url));
          };
        };
        xhr.onerror = onerror("AJAX request failed");
        xhr.ontimeout = onerror("AJAX request timed out");
        xhr.onload = function () {
          callback({
            status: xhr.status,
            statusText: xhr.statusText,
            headers: xhr.getAllResponseHeaders().split("\r\n")
              .filter(function (header) {
                return header.length > 0;
              })
              .map(function (header) {
                var i = header.indexOf(":");
                return mkHeader(header.substring(0, i))(header.substring(i + 2));
              }),
            body: platformSpecific.getResponse(xhr)
          });
        };
        xhr.responseType = options.responseType;
        xhr.withCredentials = options.withCredentials;
        xhr.send(options.content);

        return function (error, cancelErrback, cancelCallback) {
          try {
            xhr.abort();
          } catch (e) {
            return cancelErrback(e);
          }
          return cancelCallback();
        };
      };
    };
  }();
})(PS["Affjax"] = PS["Affjax"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var EqRecord = function (eqRecord) {
      this.eqRecord = eqRecord;
  };
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.eqStringImpl);
  var eqRowNil = new EqRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return true;
          };
      };
  });
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
      };
  };                                           
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  }; 
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return new EqRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var get = Record_Unsafe.unsafeGet(key);
                              return eq(dictEq)(get(ra))(get(rb)) && tail;
                          };
                      };
                  });
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.MediaType.Common"] = $PS["Data.MediaType.Common"] || {};
  var exports = $PS["Data.MediaType.Common"];          
  var applicationJSON = "application/json";
  var applicationFormURLEncoded = "application/x-www-form-urlencoded";
  exports["applicationFormURLEncoded"] = applicationFormURLEncoded;
  exports["applicationJSON"] = applicationJSON;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Affjax.RequestBody"] = $PS["Affjax.RequestBody"] || {};
  var exports = $PS["Affjax.RequestBody"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var ArrayView = (function () {
      function ArrayView(value0) {
          this.value0 = value0;
      };
      ArrayView.create = function (value0) {
          return new ArrayView(value0);
      };
      return ArrayView;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var FormData = (function () {
      function FormData(value0) {
          this.value0 = value0;
      };
      FormData.create = function (value0) {
          return new FormData(value0);
      };
      return FormData;
  })();
  var FormURLEncoded = (function () {
      function FormURLEncoded(value0) {
          this.value0 = value0;
      };
      FormURLEncoded.create = function (value0) {
          return new FormURLEncoded(value0);
      };
      return FormURLEncoded;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var toMediaType = function (v) {
      if (v instanceof FormURLEncoded) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationFormURLEncoded);
      };
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["ArrayView"] = ArrayView;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["String"] = $$String;
  exports["FormData"] = FormData;
  exports["FormURLEncoded"] = FormURLEncoded;
  exports["Json"] = Json;
  exports["toMediaType"] = toMediaType;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var SemigroupRecord = function (appendRecord) {
      this.appendRecord = appendRecord;
  };
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupRecordNil = new SemigroupRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return new SemigroupRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");                    
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var newtypeConj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Conj.Conj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeConj"] = newtypeConj;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.MediaType"] = $PS["Data.MediaType"] || {};
  var exports = $PS["Data.MediaType"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var MediaType = function (x) {
      return x;
  }; 
  var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MediaType);
  exports["newtypeMediaType"] = newtypeMediaType;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Affjax.RequestHeader"] = $PS["Affjax.RequestHeader"] || {};
  var exports = $PS["Affjax.RequestHeader"];
  var Data_MediaType = $PS["Data.MediaType"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var value = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 26, column 1 - line 26, column 33): " + [ v.constructor.name ]);
  }; 
  var name = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 21, column 1 - line 21, column 32): " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["name"] = name;
  exports["value"] = value;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Affjax.ResponseFormat"] = $PS["Affjax.ResponseFormat"] || {};
  var exports = $PS["Affjax.ResponseFormat"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];
  var ResponseFormatError = (function () {
      function ResponseFormatError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseFormatError.create = function (value0) {
          return function (value1) {
              return new ResponseFormatError(value0, value1);
          };
      };
      return ResponseFormatError;
  })();
  var $$ArrayBuffer = (function () {
      function $$ArrayBuffer(value0) {
          this.value0 = value0;
      };
      $$ArrayBuffer.create = function (value0) {
          return new $$ArrayBuffer(value0);
      };
      return $$ArrayBuffer;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var Ignore = (function () {
      function Ignore(value0) {
          this.value0 = value0;
      };
      Ignore.create = function (value0) {
          return new Ignore(value0);
      };
      return Ignore;
  })();
  var toResponseType = function (v) {
      if (v instanceof $$ArrayBuffer) {
          return "arraybuffer";
      };
      if (v instanceof Blob) {
          return "blob";
      };
      if (v instanceof Document) {
          return "document";
      };
      if (v instanceof Json) {
          return "text";
      };
      if (v instanceof $$String) {
          return "text";
      };
      if (v instanceof Ignore) {
          return "";
      };
      throw new Error("Failed pattern match at Affjax.ResponseFormat (line 46, column 3 - line 52, column 19): " + [ v.constructor.name ]);
  };
  var toMediaType = function (v) {
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  var string = new $$String(Control_Category.identity(Control_Category.categoryFn));
  var ignore = new Ignore(Control_Category.identity(Control_Category.categoryFn));
  exports["ArrayBuffer"] = $$ArrayBuffer;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["Json"] = Json;
  exports["String"] = $$String;
  exports["Ignore"] = Ignore;
  exports["string"] = string;
  exports["ignore"] = ignore;
  exports["toResponseType"] = toResponseType;
  exports["toMediaType"] = toMediaType;
  exports["ResponseFormatError"] = ResponseFormatError;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Affjax.ResponseHeader"] = $PS["Affjax.ResponseHeader"] || {};
  var exports = $PS["Affjax.ResponseHeader"];      
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  exports["ResponseHeader"] = ResponseHeader;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var unlessM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
                  return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
              });
          };
      };
  }; 
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["liftM1"] = liftM1;
  exports["ap"] = ap;
  exports["unlessM"] = unlessM;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];                
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
  exports["rmap"] = rmap;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldM = function (dictFoldable) {
      return function (dictMonad) {
          return function (f) {
              return function (a0) {
                  return foldl(dictFoldable)(function (ma) {
                      return function (b) {
                          return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f)(b));
                      };
                  })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
              };
          };
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $205 = Data_Eq.eq(dictEq);
          return function ($206) {
              return $204($205($206));
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldM"] = foldM;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["oneOf"] = oneOf;
  exports["intercalate"] = intercalate;
  exports["all"] = all;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];            
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Left) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Right) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Either (line 187, column 1 - line 193, column 28): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["isLeft"] = isLeft;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
  exports["foldableEither"] = foldableEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                                                      
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $17 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($18) {
                  return $17(Data_Either.Left.create($18));
              };
          })());
      };
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe.First"] = $PS["Data.Maybe.First"] || {};
  var exports = $PS["Data.Maybe.First"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var First = function (x) {
      return x;
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });                                  
  var newtypeFirst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, First);
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  exports["newtypeFirst"] = newtypeFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordUnit = new Ord(function () {
      return Data_Eq.eqUnit;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $43 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($43) {
                  return Data_Semiring.one(dictRing.Semiring0());
              };
              return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($53) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["min"] = min;
  exports["max"] = max;
  exports["clamp"] = clamp;
  exports["abs"] = abs;
  exports["signum"] = signum;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordUnit"] = ordUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              var $312 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
              var $313 = Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                  var $163 = Data_Eq.eq(dictEq)(a)(v.value0);
                  if ($163) {
                      return new Data_Maybe.Just(v.value1);
                  };
                  return Data_Maybe.Nothing.value;
              });
              return function ($314) {
                  return $312($313($314));
              };
          };
      };
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  }; 
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["lookup"] = lookup;
  exports["ordTuple"] = ordTuple;
  exports["functorTuple"] = functorTuple;
  exports["bifunctorTuple"] = bifunctorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              var s$prime = f(s);
              return new Data_Tuple.Tuple(s$prime, s$prime);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["put"] = put;
  exports["modify"] = modify;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $90 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($91) {
                      return $90(Data_Either.Left.create($91));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $92 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($93) {
              return ExceptT($92(Data_Either.Right.create($93)));
          };
      })());
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $102 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($103) {
              return ExceptT($102(Data_Either.Left.create($103)));
          };
      })());
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function(exports) {
  "use strict";

  function id(x) {
    return x;
  }                      
  exports.fromObject = id;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Data_Functor = $PS["Data.Functor"];          
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = new Data_Functor.Functor($foreign.map_);
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["foreach"] = $foreign.foreach;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.empty = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["push"] = push;
  exports["empty"] = $foreign.empty;
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array.ST.Iterator"] = $PS["Data.Array.ST.Iterator"] || {};
  var exports = $PS["Data.Array.ST.Iterator"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          return v.value0(i);
      };
  };
  var next = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          Control_Monad_ST_Internal.modify(function (v1) {
              return v1 + 1 | 0;
          })(v.value1)();
          return v.value0(i);
      };
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return function __do() {
                  var $$break = Control_Monad_ST_Internal["new"](false)();
                  while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                      (function __do() {
                          var mx = peek(iter)();
                          if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
                              Data_Array_ST.push(mx.value0)(array)();
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                          };
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      })();
                  };
                  return {};
              };
          };
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var $$break = Control_Monad_ST_Internal["new"](false)();
              while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                  (function __do() {
                      var mx = next(iter)();
                      if (mx instanceof Data_Maybe.Just) {
                          return f(mx.value0)();
                      };
                      if (mx instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ mx.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["pushWhile"] = pushWhile;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semigroup.Traversable"] = $PS["Data.Semigroup.Traversable"] || {};
  var exports = $PS["Data.Semigroup.Traversable"];               
  var Traversable1 = function (Foldable10, Traversable1, sequence1, traverse1) {
      this.Foldable10 = Foldable10;
      this.Traversable1 = Traversable1;
      this.sequence1 = sequence1;
      this.traverse1 = traverse1;
  };
  var traverse1 = function (dict) {
      return dict.traverse1;
  }; 
  var sequence1 = function (dict) {
      return dict.sequence1;
  };
  exports["sequence1"] = sequence1;
  exports["traverse1"] = traverse1;
  exports["Traversable1"] = Traversable1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup_Traversable = $PS["Data.Semigroup.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  var replicate1 = function (dictUnfoldable1) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  if (i <= 0) {
                      return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
                  };
                  throw new Error("Failed pattern match at Data.Unfoldable1 (line 67, column 5 - line 67, column 39): " + [ i.constructor.name ]);
              };
              return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
          };
      };
  };
  var replicate1A = function (dictApply) {
      return function (dictUnfoldable1) {
          return function (dictTraversable1) {
              return function (n) {
                  return function (m) {
                      return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
                  };
              };
          };
      };
  };
  exports["Unfoldable1"] = Unfoldable1;
  exports["replicate1A"] = replicate1A;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $7 = i <= 0;
                  if ($7) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  var fromMaybe = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(function (b) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
      });
  };
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["replicate"] = replicate;
  exports["fromMaybe"] = fromMaybe;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);                                   
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  }; 
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array (line 143, column 3 - line 145, column 26): " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };                                                                                     
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var span = function (p) {
      return function (arr) {
          var go = function ($copy_i) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i) {
                  var v = index(arr)(i);
                  if (v instanceof Data_Maybe.Just) {
                      var $60 = p(v.value0);
                      if ($60) {
                          $copy_i = i + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return new Data_Maybe.Just(i);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 834, column 5 - line 836, column 25): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_i);
              };
              return $tco_result;
          };
          var breakIndex = go(0);
          if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
              return {
                  init: [  ],
                  rest: arr
              };
          };
          if (breakIndex instanceof Data_Maybe.Just) {
              return {
                  init: $foreign.slice(0)(breakIndex.value0)(arr),
                  rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
              };
          };
          if (breakIndex instanceof Data_Maybe.Nothing) {
              return {
                  init: arr,
                  rest: [  ]
              };
          };
          throw new Error("Failed pattern match at Data.Array (line 821, column 3 - line 827, column 30): " + [ breakIndex.constructor.name ]);
      };
  };
  var takeWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).init;
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var groupBy = function (op) {
      return function (xs) {
          return (function __do() {
              var result = Data_Array_ST.empty();
              var iter = Data_Array_ST_Iterator.iterator(function (v) {
                  return index(xs)(v);
              })();
              Data_Array_ST_Iterator.iterate(iter)(function (x) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
                      var sub = Data_Array_ST.empty();
                      Data_Array_ST.push(x)(sub)();
                      Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
                      var grp = Data_Array_ST.unsafeFreeze(sub)();
                      return Data_Array_ST.push(grp)(result)();
                  });
              })();
              return Data_Array_ST.unsafeFreeze(result)();
          })();
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $94 = Data_Maybe.maybe([  ])(singleton);
          return function ($95) {
              return $94(f($95));
          };
      })());
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["last"] = last;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["mapWithIndex"] = mapWithIndex;
  exports["takeWhile"] = takeWhile;
  exports["groupBy"] = groupBy;
  exports["zip"] = zip;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["snoc"] = $foreign.snoc;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["slice"] = $foreign.slice;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];      
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  exports["FunctorWithIndex"] = FunctorWithIndex;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];  
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  exports["TraversableWithIndex"] = TraversableWithIndex;
  exports["traverseWithIndex"] = traverseWithIndex;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];        
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      var $36 = Data_Array.toUnfoldable(dictUnfoldable);
      var $37 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
      return function ($38) {
          return $36($37($38));
      };
  };                                                             
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };                                                                                                    
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign["_mapWithKey"](m, f);
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = new Data_Functor.Functor(function (f) {
      return function (m) {
          return $foreign["_fmapObject"](m, f);
      };
  });
  var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorObject;
  }, mapWithKey);
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(function __do() {
              var s = Foreign_Object_ST["new"]();
              Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v.value0)(v.value1)(s));
              })();
              return s;
          });
      };
  };
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
      };
  });
  var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableObject;
  }, function (dictMonoid) {
      return foldMap(dictMonoid);
  }, function (f) {
      return fold(Data_Function.flip(f));
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
          };
      };
  });
  var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexObject;
  }, function () {
      return functorWithIndexObject;
  }, function () {
      return traversableObject;
  }, function (dictApplicative) {
      return function (f) {
          return function (ms) {
              return fold(function (acc) {
                  return function (k) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                      };
                  };
              })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
          };
      };
  });
  var traversableObject = new Data_Traversable.Traversable(function () {
      return foldableObject;
  }, function () {
      return functorObject;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      var $43 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
      return function ($44) {
          return $43(Data_Function["const"]($44));
      };
  });
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["foldMap"] = foldMap;
  exports["functorObject"] = functorObject;
  exports["traversableObject"] = traversableObject;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var Foreign_Object = $PS["Foreign.Object"];   
  var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };
  exports["caseJsonString"] = caseJsonString;
  exports["caseJsonObject"] = caseJsonObject;
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["stringify"] = $foreign.stringify;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function(exports) {
  "use strict";

  exports.replaceAll = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
      };
    };
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["replaceAll"] = $foreign.replaceAll;
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
  exports["trim"] = $foreign.trim;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  /* globals exports, JSON */
  "use strict";                                         
  exports.unsafeEncodeURIComponent = encodeURIComponent;
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Global.Unsafe"] = $PS["Global.Unsafe"] || {};
  var exports = $PS["Global.Unsafe"];
  var $foreign = $PS["Global.Unsafe"];
  exports["unsafeEncodeURIComponent"] = $foreign.unsafeEncodeURIComponent;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.FormURLEncoded"] = $PS["Data.FormURLEncoded"] || {};
  var exports = $PS["Data.FormURLEncoded"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Global_Unsafe = $PS["Global.Unsafe"];
  var toArray = function (v) {
      return v;
  };                                                                                                                 
  var encode = (function () {
      var encodePart = function (v) {
          if (v.value1 instanceof Data_Maybe.Nothing) {
              return Global_Unsafe.unsafeEncodeURIComponent(v.value0);
          };
          if (v.value1 instanceof Data_Maybe.Just) {
              return Global_Unsafe.unsafeEncodeURIComponent(v.value0) + ("=" + Global_Unsafe.unsafeEncodeURIComponent(v.value1.value0));
          };
          throw new Error("Failed pattern match at Data.FormURLEncoded (line 35, column 18 - line 37, column 90): " + [ v.constructor.name ]);
      };
      var $14 = Data_String_Common.joinWith("&");
      var $15 = Data_Functor.map(Data_Functor.functorArray)(encodePart);
      return function ($16) {
          return $14($15(toArray($16)));
      };
  })();
  exports["encode"] = encode;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.HTTP.Method"] = $PS["Data.HTTP.Method"] || {};
  var exports = $PS["Data.HTTP.Method"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];                                  
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = new Data_Show.Show(function (v) {
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof TRACE) {
          return "TRACE";
      };
      if (v instanceof CONNECT) {
          return "CONNECT";
      };
      if (v instanceof PROPFIND) {
          return "PROPFIND";
      };
      if (v instanceof PROPPATCH) {
          return "PROPPATCH";
      };
      if (v instanceof MKCOL) {
          return "MKCOL";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof LOCK) {
          return "LOCK";
      };
      if (v instanceof UNLOCK) {
          return "UNLOCK";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      throw new Error("Failed pattern match at Data.HTTP.Method (line 40, column 1 - line 56, column 23): " + [ v.constructor.name ]);
  });
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["GET"] = GET;
  exports["print"] = print;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["modify'"] = $foreign["modify'"];
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($58) {
          return go(f($58));
      };
  }; 
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Done(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                  return new Done(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var monadRecEffect = new MonadRec(function () {
      return Effect.monadEffect;
  }, function (f) {
      return function (a) {
          var fromDone = function (v) {
              if (v instanceof Done) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [ v.constructor.name ]);
          };
          return function __do() {
              var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
              (function () {
                  while (!(function __do() {
                      var v = Effect_Ref.read(r)();
                      if (v instanceof Loop) {
                          var e = f(v.value0)();
                          Effect_Ref.write(e)(r)();
                          return false;
                      };
                      if (v instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [ v.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
          };
      };
  });
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecEffect"] = monadRecEffect;
  exports["monadRecEither"] = monadRecEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semigroup.Foldable"] = $PS["Data.Semigroup.Foldable"] || {};
  var exports = $PS["Data.Semigroup.Foldable"];
  var Foldable1 = function (Foldable0, fold1, foldMap1) {
      this.Foldable0 = Foldable0;
      this.fold1 = fold1;
      this.foldMap1 = foldMap1;
  };
  var foldMap1 = function (dict) {
      return dict.foldMap1;
  };
  exports["Foldable1"] = Foldable1;
  exports["foldMap1"] = foldMap1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var unfoldable1NonEmpty = function (dictUnfoldable) {
      return new Data_Unfoldable1.Unfoldable1(function (f) {
          return function (b) {
              return Data_Tuple.uncurry(NonEmpty.create)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Unfoldable.unfoldr(dictUnfoldable)(Data_Functor.map(Data_Maybe.functorMaybe)(f)))(f(b)));
          };
      });
  };
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  var traversableNonEmpty = function (dictTraversable) {
      return new Data_Traversable.Traversable(function () {
          return foldableNonEmpty(dictTraversable.Foldable1());
      }, function () {
          return functorNonEmpty(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
          };
      }, function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
              };
          };
      });
  };
  var foldable1NonEmpty = function (dictFoldable) {
      return new Data_Semigroup_Foldable.Foldable1(function () {
          return foldableNonEmpty(dictFoldable);
      }, function (dictSemigroup) {
          return Data_Semigroup_Foldable.foldMap1(foldable1NonEmpty(dictFoldable))(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
      }, function (dictSemigroup) {
          return function (f) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(function (s) {
                      return function (a1) {
                          return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                      };
                  })(f(v.value0))(v.value1);
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
  exports["traversableNonEmpty"] = traversableNonEmpty;
  exports["foldable1NonEmpty"] = foldable1NonEmpty;
  exports["unfoldable1NonEmpty"] = unfoldable1NonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Traversable = $PS["Data.Semigroup.Traversable"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };               
  var nelCons = function (a) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(a, new Cons(v.value0, v.value1));
      };
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          var $219 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
          var $220 = Data_Foldable.foldl(foldableList)(function (acc) {
              var $222 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
              return function ($223) {
                  return $222(f($223));
              };
          })(Control_Applicative.pure(dictApplicative)(Nil.value));
          return function ($221) {
              return $219($220($221));
          };
      };
  });
  var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldable1NonEmptyList = Data_NonEmpty.unfoldable1NonEmpty(unfoldableList);
  var foldable1NonEmptyList = Data_NonEmpty.foldable1NonEmpty(foldableList);
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 162, column 1 - line 164, column 37): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, (function () {
      var $233 = Data_NonEmpty.singleton(plusList);
      return function ($234) {
          return NonEmptyList($233($234));
      };
  })());
  var traversable1NonEmptyList = new Data_Semigroup_Traversable.Traversable1(function () {
      return foldable1NonEmptyList;
  }, function () {
      return traversableNonEmptyList;
  }, function (dictApply) {
      return Data_Semigroup_Traversable.traverse1(traversable1NonEmptyList)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApply) {
      return function (f) {
          return function (v) {
              return Data_Functor.mapFlipped(dictApply.Functor0())(Data_Foldable.foldl(foldableList)(function (acc) {
                  var $235 = Control_Apply.lift2(dictApply)(Data_Function.flip(nelCons))(acc);
                  return function ($236) {
                      return $235(f($236));
                  };
              })(Data_Functor.map(dictApply.Functor0())(Control_Applicative.pure(applicativeNonEmptyList))(f(v.value0)))(v.value1))(function (v1) {
                  return Data_Foldable.foldl(foldableList)(Data_Function.flip(nelCons))(Control_Applicative.pure(applicativeNonEmptyList)(v1.value0))(v1.value1);
              });
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["plusList"] = plusList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
  exports["traversableNonEmptyList"] = traversableNonEmptyList;
  exports["unfoldable1NonEmptyList"] = unfoldable1NonEmptyList;
  exports["traversable1NonEmptyList"] = traversable1NonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];                                              
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [ v.constructor.name ]);
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var manyRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (p) {
              var go = function (acc) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (aa) {
                      return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v) {
                          return new Data_List_Types.Cons(v, acc);
                      })(function (v) {
                          return reverse(acc);
                      })(aa));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [ v.constructor.name ]);
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
  exports["toUnfoldable"] = toUnfoldable;
  exports["singleton"] = singleton;
  exports["manyRec"] = manyRec;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["head"] = head;
  exports["uncons"] = uncons;
  exports["reverse"] = reverse;
  exports["concatMap"] = concatMap;
  exports["filter"] = filter;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var wrappedOperation = function (name) {
      return function (f) {
          return function (v) {
              var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));
              if (v1 instanceof Data_List_Types.Cons) {
                  return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty (line 91, column 3 - line 93, column 81): " + [ v1.constructor.name ]);
          };
      };
  };
  var uncons = function (v) {
      return {
          head: v.value0,
          tail: v.value1
      };
  };
  var toList = function (v) {
      return new Data_List_Types.Cons(v.value0, v.value1);
  };
  var toUnfoldable = function (dictUnfoldable) {
      var $164 = Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(Data_List.uncons(xs));
      });
      return function ($165) {
          return $164(toList($165));
      };
  };
  var tail = function (v) {
      return v.value1;
  };
  var singleton = (function () {
      var $168 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($169) {
          return Data_List_Types.NonEmptyList($168($169));
      };
  })();
  var reverse = wrappedOperation("reverse")(Data_List.reverse);
  var length = function (v) {
      return 1 + Data_List.length(v.value1) | 0;
  };
  var head = function (v) {
      return v.value0;
  };
  var cons = function (y) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["toList"] = toList;
  exports["singleton"] = singleton;
  exports["length"] = length;
  exports["cons"] = cons;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["reverse"] = reverse;
})(PS);
(function(exports) {
  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["null"] = $foreign["null"];
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._fork = function (immediate) {
    return function (aff) {
      return Aff.Fork(immediate, aff);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports.generalBracket = function (acquire) {
    return function (options) {
      return function (k) {
        return Aff.Bracket(acquire, options, k);
      };
    };
  };

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];         
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };                                                         
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };
  var suspendAff = $foreign["_fork"](false);
  var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var forkAff = $foreign["_fork"](true);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $43 = Data_Functor["void"](Effect.functorEffect);
      return function ($44) {
          return $43(launchAff($44));
      };
  })();                              
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };
  var bracket = function (acquire) {
      return function (completed) {
          return $foreign.generalBracket(acquire)({
              killed: Data_Function["const"](completed),
              failed: Data_Function["const"](completed),
              completed: Data_Function["const"](completed)
          });
      };
  };
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign["_parAffApply"]);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var $$finally = function (fin) {
      return function (a) {
          return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
      };
  };
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var effectCanceler = (function () {
      var $45 = Effect_Class.liftEffect(monadEffectAff);
      return function ($46) {
          return Canceler(Data_Function["const"]($45($46)));
      };
  })();
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
      });
  };
  var functorFiber = new Data_Functor.Functor(function (f) {
      return function (t) {
          return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
      };
  });
  var killFiber = function (e) {
      return function (v) {
          return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function (v1) {
              if (v1) {
                  return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
              };
              return $foreign.makeAff(function (k) {
                  return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
              });
          });
      };
  };   
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);                                  
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $49 = Effect_Class.liftEffect(monadEffectAff);
              return function ($50) {
                  return $49(k($50));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, (function () {
      var $53 = Control_Parallel_Class.parallel(parallelAff);
      var $54 = Control_Applicative.pure(applicativeAff);
      return function ($55) {
          return $53($54($55));
      };
  })());
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (k) {
      var go = function (a) {
          return Control_Bind.bind(bindAff)(k(a))(function (res) {
              if (res instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeAff)(res.value0);
              };
              if (res instanceof Control_Monad_Rec_Class.Loop) {
                  return go(res.value0);
              };
              throw new Error("Failed pattern match at Effect.Aff (line 100, column 7 - line 102, column 22): " + [ res.constructor.name ]);
          });
      };
      return go;
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff_"] = launchAff_;
  exports["runAff_"] = runAff_;
  exports["forkAff"] = forkAff;
  exports["suspendAff"] = suspendAff;
  exports["delay"] = delay;
  exports["finally"] = $$finally;
  exports["killFiber"] = killFiber;
  exports["joinFiber"] = joinFiber;
  exports["nonCanceler"] = nonCanceler;
  exports["effectCanceler"] = effectCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["parallelAff"] = parallelAff;
  exports["functorFiber"] = functorFiber;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Aff.Compat"] = $PS["Effect.Aff.Compat"] || {};
  var exports = $PS["Effect.Aff.Compat"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeToForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];                      
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var fail = (function () {
      var $107 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
      return function ($108) {
          return $107(Data_List_NonEmpty.singleton($108));
      };
  })();
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign (line 106, column 1 - line 106, column 55): " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readString = unsafeReadTagged("String");
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["fail"] = fail;
  exports["unsafeToForeign"] = $foreign.unsafeToForeign;
  exports["typeOf"] = $foreign.typeOf;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Affjax"] = $PS["Affjax"] || {};
  var exports = $PS["Affjax"];
  var $foreign = $PS["Affjax"];
  var Affjax_RequestBody = $PS["Affjax.RequestBody"];
  var Affjax_RequestHeader = $PS["Affjax.RequestHeader"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Affjax_ResponseHeader = $PS["Affjax.ResponseHeader"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FormURLEncoded = $PS["Data.FormURLEncoded"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];
  var Foreign = $PS["Foreign"];
  var request = function (req) {
      var parseJSON = function (v) {
          if (v === "") {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Argonaut_Core.jsonEmptyObject);
          };
          return Data_Either.either(function ($56) {
              return Foreign.fail(Foreign.ForeignError.create($56));
          })(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(Data_Argonaut_Parser.jsonParser(v));
      };
      var fromResponse$prime = (function () {
          if (req.responseFormat instanceof Affjax_ResponseFormat["ArrayBuffer"]) {
              return Foreign.unsafeReadTagged("ArrayBuffer");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Blob) {
              return Foreign.unsafeReadTagged("Blob");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Document) {
              return Foreign.unsafeReadTagged("Document");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Json) {
              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(function ($57) {
                  return req.responseFormat.value0(parseJSON($57));
              })(Foreign.unsafeReadTagged("String"));
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat["String"]) {
              return Foreign.unsafeReadTagged("String");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Ignore) {
              return Data_Function["const"](req.responseFormat.value0(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Unit.unit)));
          };
          throw new Error("Failed pattern match at Affjax (line 298, column 19 - line 304, column 57): " + [ req.responseFormat.constructor.name ]);
      })();
      var extractContent = function (v) {
          if (v instanceof Affjax_RequestBody.ArrayView) {
              return v.value0(Foreign.unsafeToForeign);
          };
          if (v instanceof Affjax_RequestBody.Blob) {
              return Foreign.unsafeToForeign(v.value0);
          };
          if (v instanceof Affjax_RequestBody.Document) {
              return Foreign.unsafeToForeign(v.value0);
          };
          if (v instanceof Affjax_RequestBody["String"]) {
              return Foreign.unsafeToForeign(v.value0);
          };
          if (v instanceof Affjax_RequestBody.FormData) {
              return Foreign.unsafeToForeign(v.value0);
          };
          if (v instanceof Affjax_RequestBody.FormURLEncoded) {
              return Foreign.unsafeToForeign(Data_FormURLEncoded.encode(v.value0));
          };
          if (v instanceof Affjax_RequestBody.Json) {
              return Foreign.unsafeToForeign(Data_Argonaut_Core.stringify(v.value0));
          };
          throw new Error("Failed pattern match at Affjax (line 272, column 20 - line 279, column 80): " + [ v.constructor.name ]);
      };
      var addHeader = function (mh) {
          return function (hs) {
              if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Affjax_RequestHeader.name)(mh.value0))(hs)) {
                  return Data_Array.snoc(hs)(mh.value0);
              };
              return hs;
          };
      };
      var headers = function (reqContent) {
          return addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.ContentType.create)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Affjax_RequestBody.toMediaType)(reqContent)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.Accept.create)(Affjax_ResponseFormat.toMediaType(req.responseFormat)))(req.headers));
      };
      var req$prime = {
          method: Data_HTTP_Method.print(req.method),
          url: req.url,
          headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
              return {
                  field: Affjax_RequestHeader.name(h),
                  value: Affjax_RequestHeader.value(h)
              };
          })(headers(req.content)),
          content: Data_Nullable.toNullable(Data_Functor.map(Data_Maybe.functorMaybe)(extractContent)(req.content)),
          responseType: Affjax_ResponseFormat.toResponseType(req.responseFormat),
          username: Data_Nullable.toNullable(req.username),
          password: Data_Nullable.toNullable(req.password),
          withCredentials: req.withCredentials
      };
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_Compat.fromEffectFnAff($foreign["_ajax"](Affjax_ResponseHeader.ResponseHeader.create, req$prime)))(function (res) {
          var v = Control_Monad_Except.runExcept(fromResponse$prime(res.body));
          if (v instanceof Data_Either.Left) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                  body: new Data_Either.Left(new Affjax_ResponseFormat.ResponseFormatError(Data_List_NonEmpty.head(v.value0), res.body)),
                  headers: res.headers,
                  status: res.status,
                  statusText: res.statusText
              });
          };
          if (v instanceof Data_Either.Right) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                  body: new Data_Either.Right(v.value0),
                  headers: res.headers,
                  status: res.status,
                  statusText: res.statusText
              });
          };
          throw new Error("Failed pattern match at Affjax (line 252, column 3 - line 256, column 39): " + [ v.constructor.name ]);
      });
  };
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value),
      url: "/",
      headers: [  ],
      content: Data_Maybe.Nothing.value,
      username: Data_Maybe.Nothing.value,
      password: Data_Maybe.Nothing.value,
      withCredentials: false,
      responseFormat: Affjax_ResponseFormat.ignore
  };
  exports["defaultRequest"] = defaultRequest;
  exports["request"] = request;
})(PS);
(function(exports) {
  "use strict";

  var sf = function() {

    // warning - none of these initialisers are actually called!
    var context = null;

    // a number in the range 0 (no ring) to 1.0 (full ring)
    var noteRing = 0.1;

    return {
        /* can the browser play ogg format? */
        canPlayOgg : function () {
           var audioTester = document.createElement("audio");
           if (audioTester.canPlayType('audio/ogg')) {
             return true;
           }
           else {
             return false;
           }
        },
        /* Get the audio context */
        establishAudioContext : function() {
          if (sf.context === null || sf.context === undefined) {
            sf.context = new (window.AudioContext || window.webkitAudioContext)();
          }
        },
        /* is web audio enabled ? */
        isWebAudioEnabled : function() {
          sf.establishAudioContext();
          if (sf.context) {
            return true;
          }
          else {
            return false;
          }
        },
        /* Get the current time from the audio context
        I don't think I'll expose this any longer
        it's not needed
      */  
        getCurrentTime : function() {
           sf.establishAudioContext();
           if (sf.context) {
             return sf.context.currentTime;
           }
           else {
             return 0;
           }
        },
        /* set the amount that the note 'rings' i.e. exists after its alloted time */
        setNoteRing : function(ring) {
          return function () {
            // console.log('note ring: ', ring);
            sf.noteRing = ring;
          }
        },
        _decodeAudioBuffer : function (psuint8array, onError, onSuccess) {
            sf.establishAudioContext();
            var uint8Array = new Uint8Array(psuint8array);
            if (sf.context) {
               sf.context.decodeAudioData(uint8Array.buffer, function (buff) {
                  // console.log('buffer decoded OK ');
                  onSuccess(buff)
               }, function (e) {
                  // console.log('buffer decode failed ');
                  onError('DecodeAudioData error', e);
               })
            }
            else {
              // console.log('no audio context ');
              onError('No audio context');
            }
        },
        /* decode the soundfonts for a particular note */
        decodeAudioBufferImpl : function(uintarray) {
          return function (onError, onSuccess) {
            sf._decodeAudioBuffer (uintarray, onError, onSuccess);
            // Return a canceler, which is just another Aff effect.
            return function (cancelError, cancelerError, cancelerSuccess) {
                cancelerSuccess(); // invoke the success callback for the canceler
            };
          }
         },
        // play a midi note through the appropriate soundfont for the note
        playFontNote :  function (fontNote) {
          return function() {
            return sf._playFontNote(fontNote);
          }
        },
        _playFontNote : function (fontNote) {
          sf.establishAudioContext();
          var source = sf.context.createBufferSource();
          var gainNode = sf.context.createGain();
          var timeOn = sf.context.currentTime + fontNote.timeOffset;
          // I don't know how to initialise noteRing other than on first reference
          if (sf.noteRing == null) {
            sf.noteRing = 0.1;
          }

          // let the note ring for 10% more than it's alloted time to give a more legato feel
          var timeOff = sf.context.currentTime + fontNote.timeOffset + (fontNote.duration * (1.0 + sf.noteRing));
          // var timeOff = sf.context.currentTime + midiNote.timeOffset + midiNote.duration;
          gainNode.gain.value = fontNote.gain;
          source.buffer = fontNote.buffer;
          source.connect(gainNode);
          gainNode.connect(sf.context.destination);
          source.start(timeOn);
          source.stop(timeOff);
          return fontNote.timeOffset + fontNote.duration;
          }
       };
    }();                                           
  exports.canPlayOgg = sf.canPlayOgg;  
  exports.decodeAudioBufferImpl = sf.decodeAudioBufferImpl;
  exports.playFontNote = sf.playFontNote;
})(PS["Audio.SoundFont"] = PS["Audio.SoundFont"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];        
  var toArray = Unsafe_Coerce.unsafeCoerce;
  var adaptMaybe = function (f) {
      var $64 = Data_Maybe.fromJust();
      return function ($65) {
          return $64(f(toArray($65)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  var last = adaptMaybe(Data_Array.last);    
  var adaptAny = function (f) {
      return function ($67) {
          return f(toArray($67));
      };
  };
  var index = adaptAny(Data_Array.index);
  var length = adaptAny(Data_Array.length);
  exports["length"] = length;
  exports["head"] = head;
  exports["last"] = last;
  exports["index"] = index;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };

  exports.pow = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return Math.pow(x,y) | 0;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.floor = Math.floor;

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
  exports["remainder"] = $foreign.remainder;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["hexadecimal"] = hexadecimal;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
  exports["pow"] = $foreign.pow;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [ v.constructor.name ]);
  };
  var size = function (v) {
      if (v instanceof Leaf) {
          return 0;
      };
      if (v instanceof Two) {
          return (1 + size(v.value0) | 0) + size(v.value3) | 0;
      };
      if (v instanceof Three) {
          return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 662, column 1 - line 662, column 35): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal (line 96, column 1 - line 99, column 110): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var traversableMap = new Data_Traversable.Traversable(function () {
      return foldableMap;
  }, function () {
      return functorMap;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              if (v instanceof Leaf) {
                  return Control_Applicative.pure(dictApplicative)(Leaf.value);
              };
              if (v instanceof Two) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3));
              };
              if (v instanceof Three) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value0)))(Control_Applicative.pure(dictApplicative)(v.value1)))(f(v.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value3)))(Control_Applicative.pure(dictApplicative)(v.value4)))(f(v.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(f)(v.value6));
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 119, column 1 - line 134, column 31): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  });
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  }; 
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 549, column 15 - line 551, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["size"] = size;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
  exports["traversableMap"] = traversableMap;
})(PS);
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports._lastIndexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.lastIndexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(v))(str);
          var $15 = v1.before === v;
          if ($15) {
              return new Data_Maybe.Just(v1.after);
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                                           
  var lastIndexOf = $foreign["_lastIndexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);        
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripPrefix"] = stripPrefix;
  exports["charAt"] = charAt;
  exports["indexOf"] = indexOf;
  exports["lastIndexOf"] = lastIndexOf;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Midi.Instrument"] = $PS["Data.Midi.Instrument"] || {};
  var exports = $PS["Data.Midi.Instrument"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Accordion = (function () {
      function Accordion() {

      };
      Accordion.value = new Accordion();
      return Accordion;
  })();
  var AcousticBass = (function () {
      function AcousticBass() {

      };
      AcousticBass.value = new AcousticBass();
      return AcousticBass;
  })();
  var AcousticGrandPiano = (function () {
      function AcousticGrandPiano() {

      };
      AcousticGrandPiano.value = new AcousticGrandPiano();
      return AcousticGrandPiano;
  })();
  var AcousticGuitarNylon = (function () {
      function AcousticGuitarNylon() {

      };
      AcousticGuitarNylon.value = new AcousticGuitarNylon();
      return AcousticGuitarNylon;
  })();
  var AcousticGuitarSteel = (function () {
      function AcousticGuitarSteel() {

      };
      AcousticGuitarSteel.value = new AcousticGuitarSteel();
      return AcousticGuitarSteel;
  })();
  var Agogo = (function () {
      function Agogo() {

      };
      Agogo.value = new Agogo();
      return Agogo;
  })();
  var AltoSax = (function () {
      function AltoSax() {

      };
      AltoSax.value = new AltoSax();
      return AltoSax;
  })();
  var Applause = (function () {
      function Applause() {

      };
      Applause.value = new Applause();
      return Applause;
  })();
  var Bagpipe = (function () {
      function Bagpipe() {

      };
      Bagpipe.value = new Bagpipe();
      return Bagpipe;
  })();
  var Banjo = (function () {
      function Banjo() {

      };
      Banjo.value = new Banjo();
      return Banjo;
  })();
  var BaritoneSax = (function () {
      function BaritoneSax() {

      };
      BaritoneSax.value = new BaritoneSax();
      return BaritoneSax;
  })();
  var Bassoon = (function () {
      function Bassoon() {

      };
      Bassoon.value = new Bassoon();
      return Bassoon;
  })();
  var BirdTweet = (function () {
      function BirdTweet() {

      };
      BirdTweet.value = new BirdTweet();
      return BirdTweet;
  })();
  var BlownBottle = (function () {
      function BlownBottle() {

      };
      BlownBottle.value = new BlownBottle();
      return BlownBottle;
  })();
  var BrassSection = (function () {
      function BrassSection() {

      };
      BrassSection.value = new BrassSection();
      return BrassSection;
  })();
  var BreathNoise = (function () {
      function BreathNoise() {

      };
      BreathNoise.value = new BreathNoise();
      return BreathNoise;
  })();
  var BrightAcousticPiano = (function () {
      function BrightAcousticPiano() {

      };
      BrightAcousticPiano.value = new BrightAcousticPiano();
      return BrightAcousticPiano;
  })();
  var Celesta = (function () {
      function Celesta() {

      };
      Celesta.value = new Celesta();
      return Celesta;
  })();
  var Cello = (function () {
      function Cello() {

      };
      Cello.value = new Cello();
      return Cello;
  })();
  var ChoirAahs = (function () {
      function ChoirAahs() {

      };
      ChoirAahs.value = new ChoirAahs();
      return ChoirAahs;
  })();
  var ChurchOrgan = (function () {
      function ChurchOrgan() {

      };
      ChurchOrgan.value = new ChurchOrgan();
      return ChurchOrgan;
  })();
  var Clarinet = (function () {
      function Clarinet() {

      };
      Clarinet.value = new Clarinet();
      return Clarinet;
  })();
  var Clavinet = (function () {
      function Clavinet() {

      };
      Clavinet.value = new Clavinet();
      return Clavinet;
  })();
  var Contrabass = (function () {
      function Contrabass() {

      };
      Contrabass.value = new Contrabass();
      return Contrabass;
  })();
  var DistortionGuitar = (function () {
      function DistortionGuitar() {

      };
      DistortionGuitar.value = new DistortionGuitar();
      return DistortionGuitar;
  })();
  var DrawbarOrgan = (function () {
      function DrawbarOrgan() {

      };
      DrawbarOrgan.value = new DrawbarOrgan();
      return DrawbarOrgan;
  })();
  var Dulcimer = (function () {
      function Dulcimer() {

      };
      Dulcimer.value = new Dulcimer();
      return Dulcimer;
  })();
  var ElectricBassFinger = (function () {
      function ElectricBassFinger() {

      };
      ElectricBassFinger.value = new ElectricBassFinger();
      return ElectricBassFinger;
  })();
  var ElectricBassPick = (function () {
      function ElectricBassPick() {

      };
      ElectricBassPick.value = new ElectricBassPick();
      return ElectricBassPick;
  })();
  var ElectricGrandPiano = (function () {
      function ElectricGrandPiano() {

      };
      ElectricGrandPiano.value = new ElectricGrandPiano();
      return ElectricGrandPiano;
  })();
  var ElectricGuitarClean = (function () {
      function ElectricGuitarClean() {

      };
      ElectricGuitarClean.value = new ElectricGuitarClean();
      return ElectricGuitarClean;
  })();
  var ElectricGuitarJazz = (function () {
      function ElectricGuitarJazz() {

      };
      ElectricGuitarJazz.value = new ElectricGuitarJazz();
      return ElectricGuitarJazz;
  })();
  var ElectricGuitarMuted = (function () {
      function ElectricGuitarMuted() {

      };
      ElectricGuitarMuted.value = new ElectricGuitarMuted();
      return ElectricGuitarMuted;
  })();
  var ElectricPiano1 = (function () {
      function ElectricPiano1() {

      };
      ElectricPiano1.value = new ElectricPiano1();
      return ElectricPiano1;
  })();
  var ElectricPiano2 = (function () {
      function ElectricPiano2() {

      };
      ElectricPiano2.value = new ElectricPiano2();
      return ElectricPiano2;
  })();
  var EnglishHorn = (function () {
      function EnglishHorn() {

      };
      EnglishHorn.value = new EnglishHorn();
      return EnglishHorn;
  })();
  var Fiddle = (function () {
      function Fiddle() {

      };
      Fiddle.value = new Fiddle();
      return Fiddle;
  })();
  var Flute = (function () {
      function Flute() {

      };
      Flute.value = new Flute();
      return Flute;
  })();
  var FrenchHorn = (function () {
      function FrenchHorn() {

      };
      FrenchHorn.value = new FrenchHorn();
      return FrenchHorn;
  })();
  var FretlessBass = (function () {
      function FretlessBass() {

      };
      FretlessBass.value = new FretlessBass();
      return FretlessBass;
  })();
  var Fx1Rain = (function () {
      function Fx1Rain() {

      };
      Fx1Rain.value = new Fx1Rain();
      return Fx1Rain;
  })();
  var Fx2Soundtrack = (function () {
      function Fx2Soundtrack() {

      };
      Fx2Soundtrack.value = new Fx2Soundtrack();
      return Fx2Soundtrack;
  })();
  var Fx3Crystal = (function () {
      function Fx3Crystal() {

      };
      Fx3Crystal.value = new Fx3Crystal();
      return Fx3Crystal;
  })();
  var Fx4Atmosphere = (function () {
      function Fx4Atmosphere() {

      };
      Fx4Atmosphere.value = new Fx4Atmosphere();
      return Fx4Atmosphere;
  })();
  var Fx5Brightness = (function () {
      function Fx5Brightness() {

      };
      Fx5Brightness.value = new Fx5Brightness();
      return Fx5Brightness;
  })();
  var Fx6Goblins = (function () {
      function Fx6Goblins() {

      };
      Fx6Goblins.value = new Fx6Goblins();
      return Fx6Goblins;
  })();
  var Fx7Echoes = (function () {
      function Fx7Echoes() {

      };
      Fx7Echoes.value = new Fx7Echoes();
      return Fx7Echoes;
  })();
  var Fx8Scifi = (function () {
      function Fx8Scifi() {

      };
      Fx8Scifi.value = new Fx8Scifi();
      return Fx8Scifi;
  })();
  var Glockenspiel = (function () {
      function Glockenspiel() {

      };
      Glockenspiel.value = new Glockenspiel();
      return Glockenspiel;
  })();
  var GuitarFretNoise = (function () {
      function GuitarFretNoise() {

      };
      GuitarFretNoise.value = new GuitarFretNoise();
      return GuitarFretNoise;
  })();
  var GuitarHarmonics = (function () {
      function GuitarHarmonics() {

      };
      GuitarHarmonics.value = new GuitarHarmonics();
      return GuitarHarmonics;
  })();
  var Gunshot = (function () {
      function Gunshot() {

      };
      Gunshot.value = new Gunshot();
      return Gunshot;
  })();
  var Harmonica = (function () {
      function Harmonica() {

      };
      Harmonica.value = new Harmonica();
      return Harmonica;
  })();
  var Harpsichord = (function () {
      function Harpsichord() {

      };
      Harpsichord.value = new Harpsichord();
      return Harpsichord;
  })();
  var Helicopter = (function () {
      function Helicopter() {

      };
      Helicopter.value = new Helicopter();
      return Helicopter;
  })();
  var HonkytonkPiano = (function () {
      function HonkytonkPiano() {

      };
      HonkytonkPiano.value = new HonkytonkPiano();
      return HonkytonkPiano;
  })();
  var Kalimba = (function () {
      function Kalimba() {

      };
      Kalimba.value = new Kalimba();
      return Kalimba;
  })();
  var Koto = (function () {
      function Koto() {

      };
      Koto.value = new Koto();
      return Koto;
  })();
  var Lead1Square = (function () {
      function Lead1Square() {

      };
      Lead1Square.value = new Lead1Square();
      return Lead1Square;
  })();
  var Lead2Sawtooth = (function () {
      function Lead2Sawtooth() {

      };
      Lead2Sawtooth.value = new Lead2Sawtooth();
      return Lead2Sawtooth;
  })();
  var Lead3Calliope = (function () {
      function Lead3Calliope() {

      };
      Lead3Calliope.value = new Lead3Calliope();
      return Lead3Calliope;
  })();
  var Lead4Chiff = (function () {
      function Lead4Chiff() {

      };
      Lead4Chiff.value = new Lead4Chiff();
      return Lead4Chiff;
  })();
  var Lead5Charang = (function () {
      function Lead5Charang() {

      };
      Lead5Charang.value = new Lead5Charang();
      return Lead5Charang;
  })();
  var Lead6Voice = (function () {
      function Lead6Voice() {

      };
      Lead6Voice.value = new Lead6Voice();
      return Lead6Voice;
  })();
  var Lead7Fifths = (function () {
      function Lead7Fifths() {

      };
      Lead7Fifths.value = new Lead7Fifths();
      return Lead7Fifths;
  })();
  var Lead8BassLead = (function () {
      function Lead8BassLead() {

      };
      Lead8BassLead.value = new Lead8BassLead();
      return Lead8BassLead;
  })();
  var Marimba = (function () {
      function Marimba() {

      };
      Marimba.value = new Marimba();
      return Marimba;
  })();
  var MelodicTom = (function () {
      function MelodicTom() {

      };
      MelodicTom.value = new MelodicTom();
      return MelodicTom;
  })();
  var MusicBox = (function () {
      function MusicBox() {

      };
      MusicBox.value = new MusicBox();
      return MusicBox;
  })();
  var MutedTrumpet = (function () {
      function MutedTrumpet() {

      };
      MutedTrumpet.value = new MutedTrumpet();
      return MutedTrumpet;
  })();
  var Oboe = (function () {
      function Oboe() {

      };
      Oboe.value = new Oboe();
      return Oboe;
  })();
  var Ocarina = (function () {
      function Ocarina() {

      };
      Ocarina.value = new Ocarina();
      return Ocarina;
  })();
  var OrchestraHit = (function () {
      function OrchestraHit() {

      };
      OrchestraHit.value = new OrchestraHit();
      return OrchestraHit;
  })();
  var OrchestralHarp = (function () {
      function OrchestralHarp() {

      };
      OrchestralHarp.value = new OrchestralHarp();
      return OrchestralHarp;
  })();
  var OverdrivenGuitar = (function () {
      function OverdrivenGuitar() {

      };
      OverdrivenGuitar.value = new OverdrivenGuitar();
      return OverdrivenGuitar;
  })();
  var Pad1NewAge = (function () {
      function Pad1NewAge() {

      };
      Pad1NewAge.value = new Pad1NewAge();
      return Pad1NewAge;
  })();
  var Pad2Warm = (function () {
      function Pad2Warm() {

      };
      Pad2Warm.value = new Pad2Warm();
      return Pad2Warm;
  })();
  var Pad3Polysynth = (function () {
      function Pad3Polysynth() {

      };
      Pad3Polysynth.value = new Pad3Polysynth();
      return Pad3Polysynth;
  })();
  var Pad4Choir = (function () {
      function Pad4Choir() {

      };
      Pad4Choir.value = new Pad4Choir();
      return Pad4Choir;
  })();
  var Pad5Bowed = (function () {
      function Pad5Bowed() {

      };
      Pad5Bowed.value = new Pad5Bowed();
      return Pad5Bowed;
  })();
  var Pad6Metallic = (function () {
      function Pad6Metallic() {

      };
      Pad6Metallic.value = new Pad6Metallic();
      return Pad6Metallic;
  })();
  var Pad7Halo = (function () {
      function Pad7Halo() {

      };
      Pad7Halo.value = new Pad7Halo();
      return Pad7Halo;
  })();
  var Pad8Sweep = (function () {
      function Pad8Sweep() {

      };
      Pad8Sweep.value = new Pad8Sweep();
      return Pad8Sweep;
  })();
  var PanFlute = (function () {
      function PanFlute() {

      };
      PanFlute.value = new PanFlute();
      return PanFlute;
  })();
  var PercussiveOrgan = (function () {
      function PercussiveOrgan() {

      };
      PercussiveOrgan.value = new PercussiveOrgan();
      return PercussiveOrgan;
  })();
  var Piccolo = (function () {
      function Piccolo() {

      };
      Piccolo.value = new Piccolo();
      return Piccolo;
  })();
  var PizzicatoStrings = (function () {
      function PizzicatoStrings() {

      };
      PizzicatoStrings.value = new PizzicatoStrings();
      return PizzicatoStrings;
  })();
  var Recorder = (function () {
      function Recorder() {

      };
      Recorder.value = new Recorder();
      return Recorder;
  })();
  var ReedOrgan = (function () {
      function ReedOrgan() {

      };
      ReedOrgan.value = new ReedOrgan();
      return ReedOrgan;
  })();
  var ReverseCymbal = (function () {
      function ReverseCymbal() {

      };
      ReverseCymbal.value = new ReverseCymbal();
      return ReverseCymbal;
  })();
  var RockOrgan = (function () {
      function RockOrgan() {

      };
      RockOrgan.value = new RockOrgan();
      return RockOrgan;
  })();
  var Seashore = (function () {
      function Seashore() {

      };
      Seashore.value = new Seashore();
      return Seashore;
  })();
  var Shakuhachi = (function () {
      function Shakuhachi() {

      };
      Shakuhachi.value = new Shakuhachi();
      return Shakuhachi;
  })();
  var Shamisen = (function () {
      function Shamisen() {

      };
      Shamisen.value = new Shamisen();
      return Shamisen;
  })();
  var Shanai = (function () {
      function Shanai() {

      };
      Shanai.value = new Shanai();
      return Shanai;
  })();
  var Sitar = (function () {
      function Sitar() {

      };
      Sitar.value = new Sitar();
      return Sitar;
  })();
  var SlapBass1 = (function () {
      function SlapBass1() {

      };
      SlapBass1.value = new SlapBass1();
      return SlapBass1;
  })();
  var SlapBass2 = (function () {
      function SlapBass2() {

      };
      SlapBass2.value = new SlapBass2();
      return SlapBass2;
  })();
  var SopranoSax = (function () {
      function SopranoSax() {

      };
      SopranoSax.value = new SopranoSax();
      return SopranoSax;
  })();
  var SteelDrums = (function () {
      function SteelDrums() {

      };
      SteelDrums.value = new SteelDrums();
      return SteelDrums;
  })();
  var StringEnsemble1 = (function () {
      function StringEnsemble1() {

      };
      StringEnsemble1.value = new StringEnsemble1();
      return StringEnsemble1;
  })();
  var StringEnsemble2 = (function () {
      function StringEnsemble2() {

      };
      StringEnsemble2.value = new StringEnsemble2();
      return StringEnsemble2;
  })();
  var SynthBass1 = (function () {
      function SynthBass1() {

      };
      SynthBass1.value = new SynthBass1();
      return SynthBass1;
  })();
  var SynthBass2 = (function () {
      function SynthBass2() {

      };
      SynthBass2.value = new SynthBass2();
      return SynthBass2;
  })();
  var SynthBrass1 = (function () {
      function SynthBrass1() {

      };
      SynthBrass1.value = new SynthBrass1();
      return SynthBrass1;
  })();
  var SynthBrass2 = (function () {
      function SynthBrass2() {

      };
      SynthBrass2.value = new SynthBrass2();
      return SynthBrass2;
  })();
  var SynthChoir = (function () {
      function SynthChoir() {

      };
      SynthChoir.value = new SynthChoir();
      return SynthChoir;
  })();
  var SynthDrum = (function () {
      function SynthDrum() {

      };
      SynthDrum.value = new SynthDrum();
      return SynthDrum;
  })();
  var SynthStrings1 = (function () {
      function SynthStrings1() {

      };
      SynthStrings1.value = new SynthStrings1();
      return SynthStrings1;
  })();
  var SynthStrings2 = (function () {
      function SynthStrings2() {

      };
      SynthStrings2.value = new SynthStrings2();
      return SynthStrings2;
  })();
  var TaikoDrum = (function () {
      function TaikoDrum() {

      };
      TaikoDrum.value = new TaikoDrum();
      return TaikoDrum;
  })();
  var TangoAccordion = (function () {
      function TangoAccordion() {

      };
      TangoAccordion.value = new TangoAccordion();
      return TangoAccordion;
  })();
  var TelephoneRing = (function () {
      function TelephoneRing() {

      };
      TelephoneRing.value = new TelephoneRing();
      return TelephoneRing;
  })();
  var TenorSax = (function () {
      function TenorSax() {

      };
      TenorSax.value = new TenorSax();
      return TenorSax;
  })();
  var Timpani = (function () {
      function Timpani() {

      };
      Timpani.value = new Timpani();
      return Timpani;
  })();
  var TinkleBell = (function () {
      function TinkleBell() {

      };
      TinkleBell.value = new TinkleBell();
      return TinkleBell;
  })();
  var TremoloStrings = (function () {
      function TremoloStrings() {

      };
      TremoloStrings.value = new TremoloStrings();
      return TremoloStrings;
  })();
  var Trombone = (function () {
      function Trombone() {

      };
      Trombone.value = new Trombone();
      return Trombone;
  })();
  var Trumpet = (function () {
      function Trumpet() {

      };
      Trumpet.value = new Trumpet();
      return Trumpet;
  })();
  var Tuba = (function () {
      function Tuba() {

      };
      Tuba.value = new Tuba();
      return Tuba;
  })();
  var TubularBells = (function () {
      function TubularBells() {

      };
      TubularBells.value = new TubularBells();
      return TubularBells;
  })();
  var Vibraphone = (function () {
      function Vibraphone() {

      };
      Vibraphone.value = new Vibraphone();
      return Vibraphone;
  })();
  var Viola = (function () {
      function Viola() {

      };
      Viola.value = new Viola();
      return Viola;
  })();
  var Violin = (function () {
      function Violin() {

      };
      Violin.value = new Violin();
      return Violin;
  })();
  var VoiceOohs = (function () {
      function VoiceOohs() {

      };
      VoiceOohs.value = new VoiceOohs();
      return VoiceOohs;
  })();
  var Whistle = (function () {
      function Whistle() {

      };
      Whistle.value = new Whistle();
      return Whistle;
  })();
  var Woodblock = (function () {
      function Woodblock() {

      };
      Woodblock.value = new Woodblock();
      return Woodblock;
  })();
  var Xylophone = (function () {
      function Xylophone() {

      };
      Xylophone.value = new Xylophone();
      return Xylophone;
  })();
  var showName = function (inst) {
      if (inst instanceof Accordion) {
          return "Accordion";
      };
      if (inst instanceof AcousticBass) {
          return "AcousticBass";
      };
      if (inst instanceof AcousticGrandPiano) {
          return "AcousticGrandPiano";
      };
      if (inst instanceof AcousticGuitarNylon) {
          return "AcousticGuitarNylon";
      };
      if (inst instanceof AcousticGuitarSteel) {
          return "AcousticGuitarSteel";
      };
      if (inst instanceof Agogo) {
          return "Agogo";
      };
      if (inst instanceof AltoSax) {
          return "AltoSax";
      };
      if (inst instanceof Applause) {
          return "Applause";
      };
      if (inst instanceof Bagpipe) {
          return "Bagpipe";
      };
      if (inst instanceof Banjo) {
          return "Banjo";
      };
      if (inst instanceof BaritoneSax) {
          return "BaritoneSax";
      };
      if (inst instanceof Bassoon) {
          return "Bassoon";
      };
      if (inst instanceof BirdTweet) {
          return "BirdTweet";
      };
      if (inst instanceof BlownBottle) {
          return "BlownBottle";
      };
      if (inst instanceof BrassSection) {
          return "BrassSection";
      };
      if (inst instanceof BreathNoise) {
          return "BreathNoise";
      };
      if (inst instanceof BrightAcousticPiano) {
          return "BrightAcousticPiano";
      };
      if (inst instanceof Celesta) {
          return "Celesta";
      };
      if (inst instanceof Cello) {
          return "Cello";
      };
      if (inst instanceof ChoirAahs) {
          return "ChoirAahs";
      };
      if (inst instanceof ChurchOrgan) {
          return "ChurchOrgan";
      };
      if (inst instanceof Clarinet) {
          return "Clarinet";
      };
      if (inst instanceof Clavinet) {
          return "Clavinet";
      };
      if (inst instanceof Contrabass) {
          return "Contrabass";
      };
      if (inst instanceof DistortionGuitar) {
          return "DistortionGuitar";
      };
      if (inst instanceof DrawbarOrgan) {
          return "DrawbarOrgan";
      };
      if (inst instanceof Dulcimer) {
          return "Dulcimer";
      };
      if (inst instanceof ElectricBassFinger) {
          return "ElectricBassFinger";
      };
      if (inst instanceof ElectricBassPick) {
          return "ElectricBassPick";
      };
      if (inst instanceof ElectricGrandPiano) {
          return "ElectricGrandPiano";
      };
      if (inst instanceof ElectricGuitarClean) {
          return "ElectricGuitarClean";
      };
      if (inst instanceof ElectricGuitarJazz) {
          return "ElectricGuitarJazz";
      };
      if (inst instanceof ElectricGuitarMuted) {
          return "ElectricGuitarMuted";
      };
      if (inst instanceof ElectricPiano1) {
          return "ElectricPiano1";
      };
      if (inst instanceof ElectricPiano2) {
          return "ElectricPiano2";
      };
      if (inst instanceof EnglishHorn) {
          return "EnglishHorn";
      };
      if (inst instanceof Fiddle) {
          return "Fiddle";
      };
      if (inst instanceof Flute) {
          return "Flute";
      };
      if (inst instanceof FrenchHorn) {
          return "FrenchHorn";
      };
      if (inst instanceof FretlessBass) {
          return "FretlessBass";
      };
      if (inst instanceof Fx1Rain) {
          return "Fx1Rain";
      };
      if (inst instanceof Fx2Soundtrack) {
          return "Fx2Soundtrack";
      };
      if (inst instanceof Fx3Crystal) {
          return "Fx3Crystal";
      };
      if (inst instanceof Fx4Atmosphere) {
          return "Fx4Atmosphere";
      };
      if (inst instanceof Fx5Brightness) {
          return "Fx5Brightness";
      };
      if (inst instanceof Fx6Goblins) {
          return "Fx6Goblins";
      };
      if (inst instanceof Fx7Echoes) {
          return "Fx7Echoes";
      };
      if (inst instanceof Fx8Scifi) {
          return "Fx8Scifi";
      };
      if (inst instanceof Glockenspiel) {
          return "Glockenspiel";
      };
      if (inst instanceof GuitarFretNoise) {
          return "GuitarFretNoise";
      };
      if (inst instanceof GuitarHarmonics) {
          return "GuitarHarmonics";
      };
      if (inst instanceof Gunshot) {
          return "Gunshot";
      };
      if (inst instanceof Harmonica) {
          return "Harmonica";
      };
      if (inst instanceof Harpsichord) {
          return "Harpsichord";
      };
      if (inst instanceof Helicopter) {
          return "Helicopter";
      };
      if (inst instanceof HonkytonkPiano) {
          return "HonkytonkPiano";
      };
      if (inst instanceof Kalimba) {
          return "Kalimba";
      };
      if (inst instanceof Koto) {
          return "Koto";
      };
      if (inst instanceof Lead1Square) {
          return "Lead1Square";
      };
      if (inst instanceof Lead2Sawtooth) {
          return "Lead2Sawtooth";
      };
      if (inst instanceof Lead3Calliope) {
          return "Lead3Calliope";
      };
      if (inst instanceof Lead4Chiff) {
          return "Lead4Chiff";
      };
      if (inst instanceof Lead5Charang) {
          return "Lead5Charang";
      };
      if (inst instanceof Lead6Voice) {
          return "Lead6Voice";
      };
      if (inst instanceof Lead7Fifths) {
          return "Lead7Fifths";
      };
      if (inst instanceof Lead8BassLead) {
          return "Lead8BassLead";
      };
      if (inst instanceof Marimba) {
          return "Marimba";
      };
      if (inst instanceof MelodicTom) {
          return "MelodicTom";
      };
      if (inst instanceof MusicBox) {
          return "MusicBox";
      };
      if (inst instanceof MutedTrumpet) {
          return "MutedTrumpet";
      };
      if (inst instanceof Oboe) {
          return "Oboe";
      };
      if (inst instanceof Ocarina) {
          return "Ocarina";
      };
      if (inst instanceof OrchestraHit) {
          return "OrchestraHit";
      };
      if (inst instanceof OrchestralHarp) {
          return "OrchestralHarp";
      };
      if (inst instanceof OverdrivenGuitar) {
          return "OverdrivenGuitar";
      };
      if (inst instanceof Pad1NewAge) {
          return "Pad1NewAge";
      };
      if (inst instanceof Pad2Warm) {
          return "Pad2Warm";
      };
      if (inst instanceof Pad3Polysynth) {
          return "Pad3Polysynth";
      };
      if (inst instanceof Pad4Choir) {
          return "Pad4Choir";
      };
      if (inst instanceof Pad5Bowed) {
          return "Pad5Bowed";
      };
      if (inst instanceof Pad6Metallic) {
          return "Pad6Metallic";
      };
      if (inst instanceof Pad7Halo) {
          return "Pad7Halo";
      };
      if (inst instanceof Pad8Sweep) {
          return "Pad8Sweep";
      };
      if (inst instanceof PanFlute) {
          return "PanFlute";
      };
      if (inst instanceof PercussiveOrgan) {
          return "PercussiveOrgan";
      };
      if (inst instanceof Piccolo) {
          return "Piccolo";
      };
      if (inst instanceof PizzicatoStrings) {
          return "PizzicatoStrings";
      };
      if (inst instanceof Recorder) {
          return "Recorder";
      };
      if (inst instanceof ReedOrgan) {
          return "ReedOrgan";
      };
      if (inst instanceof ReverseCymbal) {
          return "ReverseCymbal";
      };
      if (inst instanceof RockOrgan) {
          return "RockOrgan";
      };
      if (inst instanceof Seashore) {
          return "Seashore";
      };
      if (inst instanceof Shakuhachi) {
          return "Shakuhachi";
      };
      if (inst instanceof Shamisen) {
          return "Shamisen";
      };
      if (inst instanceof Shanai) {
          return "Shanai";
      };
      if (inst instanceof Sitar) {
          return "Sitar";
      };
      if (inst instanceof SlapBass1) {
          return "SlapBass1";
      };
      if (inst instanceof SlapBass2) {
          return "SlapBass2";
      };
      if (inst instanceof SopranoSax) {
          return "SopranoSax";
      };
      if (inst instanceof SteelDrums) {
          return "SteelDrums";
      };
      if (inst instanceof StringEnsemble1) {
          return "StringEnsemble1";
      };
      if (inst instanceof StringEnsemble2) {
          return "StringEnsemble2";
      };
      if (inst instanceof SynthBass1) {
          return "SynthBass1";
      };
      if (inst instanceof SynthBass2) {
          return "SynthBass2";
      };
      if (inst instanceof SynthBrass1) {
          return "SynthBrass1";
      };
      if (inst instanceof SynthBrass2) {
          return "SynthBrass2";
      };
      if (inst instanceof SynthChoir) {
          return "SynthChoir";
      };
      if (inst instanceof SynthDrum) {
          return "SynthDrum";
      };
      if (inst instanceof SynthStrings1) {
          return "SynthStrings1";
      };
      if (inst instanceof SynthStrings2) {
          return "SynthStrings2";
      };
      if (inst instanceof TaikoDrum) {
          return "TaikoDrum";
      };
      if (inst instanceof TangoAccordion) {
          return "TangoAccordion";
      };
      if (inst instanceof TelephoneRing) {
          return "TelephoneRing";
      };
      if (inst instanceof TenorSax) {
          return "TenorSax";
      };
      if (inst instanceof Timpani) {
          return "Timpani";
      };
      if (inst instanceof TinkleBell) {
          return "TinkleBell";
      };
      if (inst instanceof TremoloStrings) {
          return "TremoloStrings";
      };
      if (inst instanceof Trombone) {
          return "Trombone";
      };
      if (inst instanceof Trumpet) {
          return "Trumpet";
      };
      if (inst instanceof Tuba) {
          return "Tuba";
      };
      if (inst instanceof TubularBells) {
          return "TubularBells";
      };
      if (inst instanceof Vibraphone) {
          return "Vibraphone";
      };
      if (inst instanceof Viola) {
          return "Viola";
      };
      if (inst instanceof Violin) {
          return "Violin";
      };
      if (inst instanceof VoiceOohs) {
          return "VoiceOohs";
      };
      if (inst instanceof Whistle) {
          return "Whistle";
      };
      if (inst instanceof Woodblock) {
          return "Woodblock";
      };
      if (inst instanceof Xylophone) {
          return "Xylophone";
      };
      throw new Error("Failed pattern match at Data.Midi.Instrument (line 94, column 3 - line 222, column 29): " + [ inst.constructor.name ]);
  };                                                                                           
  var eqInstrumentName = new Data_Eq.Eq(function (a) {
      return function (b) {
          return showName(a) === showName(b);
      };
  });
  var ordInstrumentName = new Data_Ord.Ord(function () {
      return eqInstrumentName;
  }, function (a) {
      return function (b) {
          return Data_Ord.compare(Data_Ord.ordString)(showName(a))(showName(b));
      };
  });
  var contains = function (dictEq) {
      return function (xs) {
          return function (x) {
              return Data_Array.length(Data_Array.filter(function (y) {
                  return Data_Eq.eq(dictEq)(y)(x);
              })(xs)) > 0;
          };
      };
  };
  var asciiUpper = [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ];
  var isUpper = function (c) {
      return contains(Data_Eq.eqChar)(asciiUpper)(c);
  };
  var asciiLower = [ "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" ];
  var toLower = function (c) {
      var v = Data_Array.elemIndex(Data_Eq.eqChar)(c)(asciiUpper);
      if (v instanceof Data_Maybe.Just) {
          return Data_Maybe.fromMaybe(c)(Data_Array.index(asciiLower)(v.value0));
      };
      return c;
  };
  var asciiDigit = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ];
  var isDigit = function (c) {
      return contains(Data_Eq.eqChar)(asciiDigit)(c);
  };
  var toGleitzmanName = function (inst) {
      var f = function (c) {
          return function (acc) {
              var $6 = isUpper(c);
              if ($6) {
                  return Data_Array.cons("_")(Data_Array.cons(toLower(c))(acc));
              };
              var $7 = isDigit(c);
              if ($7) {
                  return Data_Array.cons("_")(Data_Array.cons(c)(acc));
              };
              return Data_Array.cons(toLower(c))(acc);
          };
      };
      return Data_String_CodeUnits.fromCharArray(Data_Array.drop(1)(Data_Foldable.foldr(Data_Foldable.foldableArray)(f)([  ])(Data_String_CodeUnits.toCharArray(inst))));
  };
  var gleitzmanName = function ($11) {
      return toGleitzmanName(showName($11));
  };
  exports["AcousticGrandPiano"] = AcousticGrandPiano;
  exports["gleitzmanName"] = gleitzmanName;
  exports["ordInstrumentName"] = ordInstrumentName;
})(PS);
(function(exports) {
  "use strict";

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];    
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["match"] = match;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  exports["noFlags"] = noFlags;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Audio.SoundFont.Gleitz"] = $PS["Audio.SoundFont.Gleitz"] || {};
  var exports = $PS["Audio.SoundFont.Gleitz"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Int = $PS["Data.Int"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Midi_Instrument = $PS["Data.Midi.Instrument"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Fluid3 = (function () {
      function Fluid3() {

      };
      Fluid3.value = new Fluid3();
      return Fluid3;
  })();
  var MusyngKite = (function () {
      function MusyngKite() {

      };
      MusyngKite.value = new MusyngKite();
      return MusyngKite;
  })();
  var FatBoy = (function () {
      function FatBoy() {

      };
      FatBoy.value = new FatBoy();
      return FatBoy;
  })();
  var MP3 = (function () {
      function MP3() {

      };
      MP3.value = new MP3();
      return MP3;
  })();
  var OGG = (function () {
      function OGG() {

      };
      OGG.value = new OGG();
      return OGG;
  })();
  var showSoundFontType = new Data_Show.Show(function (v) {
      if (v instanceof Fluid3) {
          return "FluidR3_GM";
      };
      if (v instanceof MusyngKite) {
          return "MusyngKite";
      };
      if (v instanceof FatBoy) {
          return "FatBoy";
      };
      throw new Error("Failed pattern match at Audio.SoundFont.Gleitz (line 36, column 1 - line 39, column 24): " + [ v.constructor.name ]);
  });
  var showRecordingFormat = new Data_Show.Show(function (v) {
      if (v instanceof MP3) {
          return "mp3";
      };
      if (v instanceof OGG) {
          return "ogg";
      };
      throw new Error("Failed pattern match at Audio.SoundFont.Gleitz (line 30, column 1 - line 32, column 19): " + [ v.constructor.name ]);
  });
  var semitones = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("C", 0), new Data_Tuple.Tuple("D", 2), new Data_Tuple.Tuple("E", 4), new Data_Tuple.Tuple("F", 5), new Data_Tuple.Tuple("G", 7), new Data_Tuple.Tuple("A", 9), new Data_Tuple.Tuple("B", 11) ]);
  var gleitzNoteName = function (s) {
      var makeRegex = function (dictPartial) {
          var v = Data_String_Regex.regex("([A-Ga-g])([b#]?)([0-8])")(Data_String_Regex_Flags.noFlags);
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Audio.SoundFont.Gleitz (line 114, column 7 - line 116, column 12): " + [ v.constructor.name ]);
      };
      var regex = makeRegex();
      return Data_String_Regex.match(regex)(s);
  };
  var gleitzBaseUrl = "https://gleitz.github.io/midi-js-soundfonts/";
  var gleitzUrl = function (instrument) {
      return function (fontType) {
          return function (format) {
              return gleitzBaseUrl + (Data_Show.show(showSoundFontType)(fontType) + ("/" + (Data_Midi_Instrument.gleitzmanName(instrument) + ("-" + (Data_Show.show(showRecordingFormat)(format) + ".js")))));
          };
      };
  };
  var buildMidiPitch = function (octave) {
      return function (pitch) {
          return function (accidental) {
              return (((12 * octave | 0) + pitch | 0) + accidental | 0) + 12 | 0;
          };
      };
  };
  var midiPitch1 = function (s) {
      var v = gleitzNoteName(s);
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_Maybe.Just) {
          var mpitch = (function () {
              var v1 = Data_Array_NonEmpty.index(v.value0)(1);
              if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Data_Maybe.Just) {
                  return Data_Map_Internal.lookup(Data_Ord.ordString)(v1.value0.value0)(semitones);
              };
              return Data_Maybe.Nothing.value;
          })();
          var moctave = (function () {
              var v1 = Data_Array_NonEmpty.index(v.value0)(3);
              if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Data_Maybe.Just) {
                  return Data_Int.fromString(v1.value0.value0);
              };
              return Data_Maybe.Nothing.value;
          })();
          var acc = (function () {
              var v1 = Data_Array_NonEmpty.index(v.value0)(2);
              if (v1 instanceof Data_Maybe.Just && (v1.value0 instanceof Data_Maybe.Just && v1.value0.value0 === "b")) {
                  return -1 | 0;
              };
              if (v1 instanceof Data_Maybe.Just && (v1.value0 instanceof Data_Maybe.Just && v1.value0.value0 === "#")) {
                  return 1;
              };
              return 0;
          })();
          var v1 = new Data_Tuple.Tuple(mpitch, moctave);
          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Data_Maybe.Just) {
              return Data_Maybe.Just.create(buildMidiPitch(v1.value1.value0)(v1.value0.value0)(acc));
          };
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Audio.SoundFont.Gleitz (line 70, column 3 - line 91, column 23): " + [ v.constructor.name ]);
  };
  var midiPitch = function (s) {
      return Data_Maybe.fromMaybe(0)(midiPitch1(s));
  };
  exports["MP3"] = MP3;
  exports["OGG"] = OGG;
  exports["MusyngKite"] = MusyngKite;
  exports["gleitzUrl"] = gleitzUrl;
  exports["midiPitch"] = midiPitch;
  exports["showRecordingFormat"] = showRecordingFormat;
})(PS);
(function(exports) {
  "use strict";

  // Encode a Uint8Array to its Base64 representation using Node's `Buffer` API
  function encodeNode (uInt8Array) {
    var base64EncodedString = Buffer.from(uInt8Array).toString("base64");

    return base64EncodedString;
  };

  // Decode a Base64-encoded string using Node's `Buffer` API
  function _decodeNode (Left, Right, str) {
    var result;

    // Check that the input string is a valid Base64-encoded string as Node.js
    // decided that it would be a good idea to NOT throw on invalid input strings
    // but return an empty buffer instead which cannot be distinguished from the
    // empty string case.
    var reEmptyString = "^$";
    var leadingQuanta = "^([A-Za-z0-9+/]{4})*";
    var finalQuantum =
      "([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}(?:=)?|[A-Za-z0-9+/]{2}(?:=){0,2})$";
    var reValidBase64 =
      new RegExp([reEmptyString, "|", leadingQuanta, finalQuantum].join(""));

    try {
      if (!reValidBase64.test(str)) { throw new Error("Invalid input string");}
      result = Right(Buffer.from(str, "base64"));
    }
    catch (error) {
      result = Left(error);
    }

    return result;
  };                               
  exports._decodeNode = _decodeNode;
})(PS["Data.Binary.Base64"] = PS["Data.Binary.Base64"] || {});
(function(exports) {
  "use strict";

  // Encode a string to its Base64 representation using Node's `Buffer` API
  function encodeNode (str) {
    var base64EncodedString = Buffer.from(str).toString("base64");

    return base64EncodedString;
  };

  // Decode a Base64-encoded string using Node's `Buffer` API
  function _decodeNode (Left, Right, str) {
    var result;

    // Check that the input string is a valid Base64-encoded string as Node.js
    // decided that it would be a good idea to NOT throw on invalid input strings
    // but return an empty buffer instead which cannot be distinguished from the
    // empty string case.
    var reEmptyString = "^$";
    var leadingQuanta = "^([A-Za-z0-9+/]{4})*";
    var finalQuantum =
      "([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}(?:=)?|[A-Za-z0-9+/]{2}(?:=){0,2})$";
    var reValidBase64 =
      new RegExp([reEmptyString, "|", leadingQuanta, finalQuantum].join(""));

    try {
      if (!reValidBase64.test(str)) { throw new Error("Invalid input string");}
      result = Right(Buffer.from(str, "base64").toString("utf-8"));
    }
    catch (error) {
      result = Left(error);
    }

    return result;
  };

  function _atob (Left, Right, str) {
    var result;

    try {
      result = Right(atob(str));
    }
    catch (error) {
      result = Left(error);
    }

    return result;
  };

  function _btoa (Left, Right, str) {
    var result;

    try {
      result = Right(btoa(str));
    }
    catch (error) {
      result = Left(error);
    }

    return result;
  };                                
  exports._atob       = _atob;
})(PS["Data.String.Base64"] = PS["Data.String.Base64"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Base64"] = $PS["Data.String.Base64"] || {};
  var exports = $PS["Data.String.Base64"];
  var $foreign = $PS["Data.String.Base64"];
  var Data_Either = $PS["Data.Either"];
  var atob = function (str) {
      return $foreign["_atob"](Data_Either.Left.create, Data_Either.Right.create, str);
  };
  exports["atob"] = atob;
})(PS);
(function(exports) {
  "use strict";

  var atobIsDefined = typeof atob === "function";

  // This function converts a `Uint8Array` to a btoa-safe string.
  // It does so by treating each byte as a Unicode code point value and by
  // concatenating the corresponding characters.
  // This means that e.g. a three-byte UTF-8 character is mapped to three
  // different characters with code points between 0 .. U+00FF.
  // This is also the reason why `String.fromCharCode` is perfectly safe here.
  function uint8ArrayToBtoaSafeString (u8) {
    var chunkSize = 0x8000; // Chunk size used for reading large arrays
    var cs = [];

    for (var i = 0; i < u8.length; i += chunkSize) {
      cs.push(String.fromCharCode.apply(null, u8.subarray(i, i + chunkSize)));
    }

    return cs.join("");
  };

  // Inspired by `purescript-typedarray`. Unfortunately, the future of that
  // library is currently (2018-07-18) uncertain.
  function asUint8Array (array) {
    return new Uint8Array(array);
  }

  exports.atobIsDefined              = atobIsDefined;             
  exports.asUint8Array               = asUint8Array;
})(PS["Data.String.Base64.Internal"] = PS["Data.String.Base64.Internal"] || {});
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._codePointAt = function (fallback) {
    return function (Just) {
      return function (Nothing) {
        return function (unsafeCodePointAt0) {
          return function (index) {
            return function (str) {
              var length = str.length;
              if (index < 0 || index >= length) return Nothing;
              if (hasStringIterator) {
                var iter = str[Symbol.iterator]();
                for (var i = index;; --i) {
                  var o = iter.next();
                  if (o.done) return Nothing;
                  if (i === 0) return Just(unsafeCodePointAt0(o.value));
                }
              }
              return fallback(index)(str);
            };
          };
        };
      };
    };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Semiring = $PS["Data.Semiring"];                
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function ($copy_dictEq) {
      return function ($copy_dictEuclideanRing) {
          return function ($copy_a) {
              return function ($copy_b) {
                  var $tco_var_dictEq = $copy_dictEq;
                  var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                  var $tco_var_a = $copy_a;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($7) {
                          $tco_done = true;
                          return a;
                      };
                      $tco_var_dictEq = dictEq;
                      $tco_var_dictEuclideanRing = dictEuclideanRing;
                      $tco_var_a = b;
                      $copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                  };
                  return $tco_result;
              };
          };
      };
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["gcd"] = gcd;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  };
  var showCodePoint = new Data_Show.Show(function (v) {
      return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
  });
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var lastIndexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.lastIndexOf(p)(s));
      };
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var eqCodePoint = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordCodePoint = new Data_Ord.Ord(function () {
      return eqCodePoint;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var indexOf$prime = function (p) {
      return function (i) {
          return function (s) {
              var s$prime = drop(i)(s);
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                  return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;
              })(Data_String_CodeUnits.indexOf(p)(s$prime));
          };
      };
  };
  var codePointFromChar = (function () {
      var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
      return function ($56) {
          return CodePoint($55($56));
      };
  })();
  var codePointAtFallback = function ($copy_n) {
      return function ($copy_s) {
          var $tco_var_n = $copy_n;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(n, s) {
              var v = uncons(s);
              if (v instanceof Data_Maybe.Just) {
                  var $44 = n === 0;
                  if ($44) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0.head);
                  };
                  $tco_var_n = n - 1 | 0;
                  $copy_s = v.value0.tail;
                  return;
              };
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_n, $copy_s);
          };
          return $tco_result;
      };
  };
  var codePointAt = function (v) {
      return function (v1) {
          if (v < 0) {
              return Data_Maybe.Nothing.value;
          };
          if (v === 0 && v1 === "") {
              return Data_Maybe.Nothing.value;
          };
          if (v === 0) {
              return new Data_Maybe.Just(unsafeCodePointAt0(v1));
          };
          return $foreign["_codePointAt"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
      };
  };
  var boundedCodePoint = new Data_Bounded.Bounded(function () {
      return ordCodePoint;
  }, 0, 1114111);
  var boundedEnumCodePoint = new Data_Enum.BoundedEnum(function () {
      return boundedCodePoint;
  }, function () {
      return enumCodePoint;
  }, 1114111 + 1 | 0, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 1114111) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [ n.constructor.name ]);
  });
  var enumCodePoint = new Data_Enum.Enum(function () {
      return ordCodePoint;
  }, Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)), Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)));
  exports["codePointFromChar"] = codePointFromChar;
  exports["singleton"] = singleton;
  exports["toCodePointArray"] = toCodePointArray;
  exports["codePointAt"] = codePointAt;
  exports["length"] = length;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["take"] = take;
  exports["drop"] = drop;
  exports["showCodePoint"] = showCodePoint;
  exports["boundedEnumCodePoint"] = boundedEnumCodePoint;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Base64.Internal"] = $PS["Data.String.Base64.Internal"] || {};
  var exports = $PS["Data.String.Base64.Internal"];
  var $foreign = $PS["Data.String.Base64.Internal"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];                
  var unsafeStringToUint8ArrayOfCharCodes = (function () {
      var $0 = Data_Functor.map(Data_Functor.functorArray)(Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint));
      return function ($1) {
          return $foreign.asUint8Array($0(Data_String_CodePoints.toCodePointArray($1)));
      };
  })();
  var toRfc4648 = (function () {
      var $6 = Data_String_Common.replaceAll("-")("+");
      var $7 = Data_String_Common.replaceAll("_")("/");
      return function ($8) {
          return $6($7($8));
      };
  })();
  exports["unsafeStringToUint8ArrayOfCharCodes"] = unsafeStringToUint8ArrayOfCharCodes;
  exports["toRfc4648"] = toRfc4648;
  exports["atobIsDefined"] = $foreign.atobIsDefined;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Binary.Base64"] = $PS["Data.Binary.Base64"] || {};
  var exports = $PS["Data.Binary.Base64"];
  var $foreign = $PS["Data.Binary.Base64"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_String_Base64 = $PS["Data.String.Base64"];
  var Data_String_Base64_Internal = $PS["Data.String.Base64.Internal"];
  var decode = function (str) {
      if (Data_String_Base64_Internal.atobIsDefined) {
          return Data_Functor.map(Data_Either.functorEither)(Data_String_Base64_Internal.unsafeStringToUint8ArrayOfCharCodes)(Data_String_Base64.atob(Data_String_Base64_Internal.toRfc4648(str)));
      };
      return $foreign["_decodeNode"](Data_Either.Left.create, Data_Either.Right.create, Data_String_Base64_Internal.toRfc4648(str));
  };
  exports["decode"] = decode;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };
  exports["throw"] = $$throw;
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Audio.SoundFont.Decoder"] = $PS["Audio.SoundFont.Decoder"] || {};
  var exports = $PS["Audio.SoundFont.Decoder"];
  var Audio_SoundFont_Gleitz = $PS["Audio.SoundFont.Gleitz"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Binary_Base64 = $PS["Data.Binary.Base64"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Midi_Instrument = $PS["Data.Midi.Instrument"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var rebaseNoteMap = function (nm) {
      var intermediate = Data_Functor.map(Data_Functor.functorArray)(Data_Bifunctor.lmap(Data_Tuple.bifunctorTuple)(Audio_SoundFont_Gleitz.midiPitch))(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(nm));
      return Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_Foldable.foldableArray)(intermediate);
  };
  var decodeB64 = function (s) {
      var pos = Data_String_CodePoints.lastIndexOf(",")(s);
      if (pos instanceof Data_Maybe.Just) {
          var text = Data_String_CodePoints.drop(pos.value0 + 1 | 0)(s);
          return Data_Binary_Base64.decode(text);
      };
      return Data_Either.Left.create(Effect_Exception.error("invalid note definition in Json"));
  };
  var decodeJString = Data_Argonaut_Core.caseJsonString(Data_Either.Left.create(Effect_Exception.error("invalid Json string")))(function (s) {
      return decodeB64(s);
  });
  var decodeJObject = function (jo) {
      return Data_Functor.map(Data_Either.functorEither)(rebaseNoteMap)(Data_Traversable.sequenceDefault(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(Data_Functor.map(Foreign_Object.functorObject)(decodeJString)(jo)));
  };
  var decodeJson = Data_Argonaut_Core.caseJsonObject(Data_Either.Left.create(Effect_Exception.error("invalid Json object")))(function (jobj) {
      return decodeJObject(jobj);
  });
  var midiJsToNoteMap = function (instrumentName) {
      return function (mjs) {
          var posEnd = Data_String_CodePoints.lastIndexOf(",")(mjs);
          var instrument = Data_Midi_Instrument.gleitzmanName(instrumentName);
          var patternString = "MIDI.Soundfont." + (instrument + " = ");
          var posStart = Data_String_CodePoints.indexOf(patternString)(mjs);
          var v = new Data_Tuple.Tuple(posStart, posEnd);
          if (v.value0 instanceof Data_Maybe.Just && v.value1 instanceof Data_Maybe.Just) {
              var text = Data_String_CodePoints.drop(v.value0.value0 + Data_String_CodePoints.length(patternString) | 0)(Data_String_CodePoints.take(v.value1.value0)(mjs)) + "}";
              var v1 = Data_Argonaut_Parser.jsonParser(text);
              if (v1 instanceof Data_Either.Left) {
                  return Data_Either.Left.create(Effect_Exception.error(v1.value0));
              };
              if (v1 instanceof Data_Either.Right) {
                  return decodeJson(v1.value0);
              };
              throw new Error("Failed pattern match at Audio.SoundFont.Decoder (line 74, column 11 - line 76, column 42): " + [ v1.constructor.name ]);
          };
          return Data_Either.Left.create(Effect_Exception.error("Invalid MIDI.js Soundfont format found for " + instrument));
      };
  };
  exports["midiJsToNoteMap"] = midiJsToNoteMap;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.warn = function (s) {
    return function () {
      console.warn(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
  exports["warn"] = $foreign.warn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Audio.SoundFont"] = $PS["Audio.SoundFont"] || {};
  var exports = $PS["Audio.SoundFont"];
  var $foreign = $PS["Audio.SoundFont"];
  var Affjax = $PS["Affjax"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Audio_SoundFont_Decoder = $PS["Audio.SoundFont.Decoder"];
  var Audio_SoundFont_Gleitz = $PS["Audio.SoundFont.Gleitz"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Midi_Instrument = $PS["Data.Midi.Instrument"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];                    
  var prefferedRecordingFormat = Control_Monad.liftM1(Effect.monadEffect)(function (b) {
      if (b) {
          return Audio_SoundFont_Gleitz.OGG.value;
      };
      return Audio_SoundFont_Gleitz.MP3.value;
  })($foreign.canPlayOgg);
  var localUrl = function (instrument) {
      return function (localDir) {
          return function (format) {
              return localDir + ("/" + (Data_Midi_Instrument.gleitzmanName(instrument) + ("-" + (Data_Show.show(Audio_SoundFont_Gleitz.showRecordingFormat)(format) + ".js"))));
          };
      };
  };
  var lastDuration = function (ns) {
      return Data_Maybe.fromMaybe(0.0)(Data_Array.last(ns));
  };
  var instrumentChannels = function (is) {
      var f = function (i) {
          return Data_Bifunctor.rmap(Data_Tuple.bifunctorTuple)(function (v) {
              return i;
          });
      };
      return Data_Map_Internal.fromFoldable(Data_Midi_Instrument.ordInstrumentName)(Data_Foldable.foldableArray)(Data_Array.mapWithIndex(f)(is));
  };
  var fontNote = function (buffer) {
      return function (n) {
          return {
              buffer: buffer,
              timeOffset: n.timeOffset,
              duration: n.duration,
              gain: n.gain
          };
      };
  };
  var playNote = function (instruments) {
      return function (note) {
          var maybeInstrument = Data_Array.index(instruments)(note.channel);
          if (maybeInstrument instanceof Data_Maybe.Just) {
              var v = Data_Map_Internal.lookup(Data_Ord.ordInt)(note.id)(maybeInstrument.value0.value1);
              if (v instanceof Data_Maybe.Just) {
                  return $foreign.playFontNote(fontNote(v.value0)(note));
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(note.timeOffset + note.duration);
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(note.timeOffset + note.duration);
      };
  };
  var playNotes = function (instruments) {
      return function (notes) {
          var pns = Data_Functor.map(Data_Functor.functorArray)(playNote(instruments))(notes);
          return Data_Functor.map(Effect.functorEffect)(lastDuration)(Data_Traversable.sequenceDefault(Data_Traversable.traversableArray)(Effect.applicativeEffect)(pns));
      };
  };
  var decodeAudioBuffer = function ($20) {
      return Effect_Aff_Compat.fromEffectFnAff($foreign.decodeAudioBufferImpl($20));
  };
  var loadInstrument = function (maybeLocalDir) {
      return function (instrumentName) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(prefferedRecordingFormat))(function (recordingFormat) {
              var url = (function () {
                  if (maybeLocalDir instanceof Data_Maybe.Just) {
                      return localUrl(instrumentName)(maybeLocalDir.value0)(recordingFormat);
                  };
                  return Audio_SoundFont_Gleitz.gleitzUrl(instrumentName)(Audio_SoundFont_Gleitz.MusyngKite.value)(recordingFormat);
              })();
              return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.request({
                  method: new Data_Either.Left(Data_HTTP_Method.GET.value),
                  url: url,
                  headers: Affjax.defaultRequest.headers,
                  content: Affjax.defaultRequest.content,
                  username: Affjax.defaultRequest.username,
                  password: Affjax.defaultRequest.password,
                  withCredentials: Affjax.defaultRequest.withCredentials,
                  responseFormat: Affjax_ResponseFormat.string
              }))(function (res) {
                  if (res.body instanceof Data_Either.Left) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log("instrument failed to load: " + url)))(function () {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(instrumentName, Data_Map_Internal.empty));
                      });
                  };
                  if (res.body instanceof Data_Either.Right) {
                      var ejson = Audio_SoundFont_Decoder.midiJsToNoteMap(instrumentName)(res.body.value0);
                      var noteMap = Data_Either.either(function (v) {
                          return Data_Map_Internal.empty;
                      })(Control_Category.identity(Control_Category.categoryFn))(ejson);
                      return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.traverse(Data_Map_Internal.traversableMap)(Effect_Aff.applicativeAff)(decodeAudioBuffer)(noteMap))(function (font) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Tuple.Tuple(instrumentName, font));
                      });
                  };
                  throw new Error("Failed pattern match at Audio.SoundFont (line 126, column 3 - line 135, column 39): " + [ res.body.constructor.name ]);
              });
          });
      };
  };
  var loadInstruments = function (maybeLocalDir) {
      return function (instrumentNames) {
          return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeParAff)(function (name) {
              return Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(loadInstrument(maybeLocalDir)(name));
          })(instrumentNames));
      };
  };
  var loadRemoteSoundFonts = loadInstruments(Data_Maybe.Nothing.value);
  exports["loadRemoteSoundFonts"] = loadRemoteSoundFonts;
  exports["playNotes"] = playNotes;
  exports["instrumentChannels"] = instrumentChannels;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.State"] = $PS["Control.Monad.State"] || {};
  var exports = $PS["Control.Monad.State"];
  var evalState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value0;
      };
  };
  exports["evalState"] = evalState;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                    
  var StateT = function (x) {
      return x;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $112 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($113) {
                  return $112(f($113));
              };
          })());
      });
  };
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Midi"] = $PS["Data.Midi"] || {};
  var exports = $PS["Data.Midi"];
  var Tempo = (function () {
      function Tempo(value0) {
          this.value0 = value0;
      };
      Tempo.create = function (value0) {
          return new Tempo(value0);
      };
      return Tempo;
  })();
  var NoteOn = (function () {
      function NoteOn(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      NoteOn.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new NoteOn(value0, value1, value2);
              };
          };
      };
      return NoteOn;
  })();
  var NoteOff = (function () {
      function NoteOff(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      NoteOff.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new NoteOff(value0, value1, value2);
              };
          };
      };
      return NoteOff;
  })();
  var Message = (function () {
      function Message(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Message.create = function (value0) {
          return function (value1) {
              return new Message(value0, value1);
          };
      };
      return Message;
  })();
  var Track = function (x) {
      return x;
  };
  exports["Track"] = Track;
  exports["Tempo"] = Tempo;
  exports["NoteOn"] = NoteOn;
  exports["NoteOff"] = NoteOff;
  exports["Message"] = Message;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Audio.SoundFont.Melody.Maker"] = $PS["Audio.SoundFont.Melody.Maker"] || {};
  var exports = $PS["Audio.SoundFont.Melody.Maker"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Midi = $PS["Data.Midi"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var ticksToTime = function (ticks) {
      return function (tstate) {
          return (Data_Int.toNumber(ticks) * Data_Int.toNumber(tstate.tempo)) / (Data_Int.toNumber(tstate.ticksPerBeat) * 1000000.0);
      };
  };
  var retrieveMelody = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (tpl) {
      var tstate = Data_Tuple.fst(tpl);
      var melody = Data_Array.reverse(Data_Array.cons(Data_Array.reverse(tstate.currentPhrase))(tstate.melody));
      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(melody);
  });
  var noteKey = function (channel) {
      return function (pitch) {
          return (1000 * channel | 0) + pitch | 0;
      };
  };
  var initialTState = function (ticksPerBeat) {
      return function (phraseSize) {
          return {
              ticksPerBeat: ticksPerBeat,
              tempo: 1000000,
              noteOffset: 0.0,
              phraseOffset: 0.0,
              currentPhrase: [  ],
              currentNoteMap: Data_Map_Internal.empty,
              phraseSize: phraseSize,
              melody: [  ]
          };
      };
  };
  var initialTransformationState = function (ticksPerBeat) {
      return function (phraseSize) {
          return new Data_Tuple.Tuple(initialTState(ticksPerBeat)(phraseSize), [  ]);
      };
  };
  var finaliseNote = function (channel) {
      return function (pitch) {
          return function (velocity) {
              return function (endOffset) {
                  return function (tstate) {
                      var key = noteKey(channel)(pitch);
                      var mpnote = Data_Map_Internal.lookup(Data_Ord.ordInt)(key)(tstate.currentNoteMap);
                      if (mpnote instanceof Data_Maybe.Just) {
                          var finalisedNote = {
                              channel: mpnote.value0.channel,
                              id: mpnote.value0.pitch,
                              timeOffset: mpnote.value0.timeOffset - tstate.phraseOffset,
                              duration: endOffset - mpnote.value0.timeOffset,
                              gain: mpnote.value0.gain
                          };
                          var currentPhrase = Data_Array.cons(finalisedNote)(tstate.currentPhrase);
                          var currentNoteMap = Data_Map_Internal["delete"](Data_Ord.ordInt)(key)(tstate.currentNoteMap);
                          var $10 = endOffset - tstate.phraseOffset > tstate.phraseSize && Data_Map_Internal.isEmpty(currentNoteMap);
                          if ($10) {
                              return {
                                  ticksPerBeat: tstate.ticksPerBeat,
                                  tempo: tstate.tempo,
                                  noteOffset: endOffset,
                                  phraseOffset: endOffset,
                                  currentPhrase: [  ],
                                  currentNoteMap: currentNoteMap,
                                  phraseSize: tstate.phraseSize,
                                  melody: Data_Array.cons(Data_Array.reverse(currentPhrase))(tstate.melody)
                              };
                          };
                          return {
                              ticksPerBeat: tstate.ticksPerBeat,
                              tempo: tstate.tempo,
                              noteOffset: endOffset,
                              phraseOffset: tstate.phraseOffset,
                              currentPhrase: currentPhrase,
                              currentNoteMap: currentNoteMap,
                              phraseSize: tstate.phraseSize,
                              melody: tstate.melody
                          };
                      };
                      return {
                          ticksPerBeat: tstate.ticksPerBeat,
                          tempo: tstate.tempo,
                          noteOffset: endOffset,
                          phraseOffset: tstate.phraseOffset,
                          currentPhrase: tstate.currentPhrase,
                          currentNoteMap: tstate.currentNoteMap,
                          phraseSize: tstate.phraseSize,
                          melody: tstate.melody
                      };
                  };
              };
          };
      };
  };
  var defaultPhraseSize = 0.6;
  var buildPartialNote = function (channel) {
      return function (pitch) {
          return function (velocity) {
              return function (timeOffset) {
                  var gain = Data_Int.toNumber(velocity) / Data_Int.toNumber(127);
                  return {
                      channel: channel,
                      pitch: pitch,
                      gain: gain,
                      timeOffset: timeOffset
                  };
              };
          };
      };
  };
  var addNoteOn = function (channel) {
      return function (pitch) {
          return function (velocity) {
              return function (offset) {
                  return function (tstate) {
                      var partialNote = buildPartialNote(channel)(pitch)(velocity)(offset);
                      var key = noteKey(channel)(pitch);
                      var currentNoteMap = Data_Map_Internal.insert(Data_Ord.ordInt)(key)(partialNote)(tstate.currentNoteMap);
                      return {
                          ticksPerBeat: tstate.ticksPerBeat,
                          tempo: tstate.tempo,
                          noteOffset: partialNote.timeOffset,
                          phraseOffset: tstate.phraseOffset,
                          currentPhrase: tstate.currentPhrase,
                          currentNoteMap: currentNoteMap,
                          phraseSize: tstate.phraseSize,
                          melody: tstate.melody
                      };
                  };
              };
          };
      };
  };
  var accumulateTicks = function (ticks) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (tpl) {
          var tstate = Data_Tuple.fst(tpl);
          var recording = Data_Tuple.snd(tpl);
          var offset = tstate.noteOffset + ticksToTime(ticks)(tstate);
          var tstate$prime = {
              noteOffset: offset,
              currentNoteMap: tstate.currentNoteMap,
              currentPhrase: tstate.currentPhrase,
              melody: tstate.melody,
              phraseOffset: tstate.phraseOffset,
              phraseSize: tstate.phraseSize,
              tempo: tstate.tempo,
              ticksPerBeat: tstate.ticksPerBeat
          };
          var tpl$prime = new Data_Tuple.Tuple(tstate$prime, recording);
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(tpl$prime))(function () {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(recording);
          });
      });
  };
  var accumulateTempo = function (ticks) {
      return function (tempo) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (tpl) {
              var tstate = Data_Tuple.fst(tpl);
              var recording = Data_Tuple.snd(tpl);
              var offset = tstate.noteOffset + ticksToTime(ticks)(tstate);
              var tstate$prime = {
                  noteOffset: offset,
                  tempo: tempo,
                  currentNoteMap: tstate.currentNoteMap,
                  currentPhrase: tstate.currentPhrase,
                  melody: tstate.melody,
                  phraseOffset: tstate.phraseOffset,
                  phraseSize: tstate.phraseSize,
                  ticksPerBeat: tstate.ticksPerBeat
              };
              var tpl$prime = new Data_Tuple.Tuple(tstate$prime, recording);
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(tpl$prime))(function () {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(recording);
              });
          });
      };
  };
  var accumulateNote = function (processNote) {
      return function (ticks) {
          return function (channel) {
              return function (pitch) {
                  return function (velocity) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (tpl) {
                          var tstate = Data_Tuple.fst(tpl);
                          var recording = Data_Tuple.snd(tpl);
                          var offset = tstate.noteOffset + ticksToTime(ticks)(tstate);
                          var tstate$prime = processNote(channel)(pitch)(velocity)(offset)(tstate);
                          var tpl$prime = new Data_Tuple.Tuple(tstate$prime, recording);
                          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(tpl$prime))(function () {
                              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(recording);
                          });
                      });
                  };
              };
          };
      };
  };
  var transformMessage = function (m) {
      if (m.value1 instanceof Data_Midi.Tempo) {
          return accumulateTempo(m.value0)(m.value1.value0);
      };
      if (m.value1 instanceof Data_Midi.NoteOn) {
          var $16 = m.value1.value1 > 0;
          if ($16) {
              return accumulateNote(addNoteOn)(m.value0)(m.value1.value0)(m.value1.value1)(m.value1.value2);
          };
          return accumulateNote(finaliseNote)(m.value0)(m.value1.value0)(m.value1.value1)(m.value1.value2);
      };
      if (m.value1 instanceof Data_Midi.NoteOff) {
          return accumulateNote(finaliseNote)(m.value0)(m.value1.value0)(m.value1.value1)(m.value1.value2);
      };
      return accumulateTicks(m.value0);
  };
  var transformTrack = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return retrieveMelody;
      };
      if (v instanceof Data_List_Types.Cons) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transformMessage(v.value0))(function () {
              return transformTrack(v.value1);
          });
      };
      throw new Error("Failed pattern match at Audio.SoundFont.Melody.Maker (line 91, column 1 - line 91, column 85): " + [ v.constructor.name ]);
  };
  var toMelody_ = function (phraseSize) {
      return function (v) {
          var mtrack0 = Data_List.head(v.tracks);
          var v1 = Data_Maybe.fromMaybe(Data_List_Types.Nil.value)(mtrack0);
          return Control_Monad_State.evalState(transformTrack(v1))(initialTransformationState(v.header.ticksPerBeat)(phraseSize));
      };
  };
  var toMelody = function (recording) {
      return toMelody_(defaultPhraseSize)(recording);
  };
  exports["toMelody"] = toMelody;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Audio.SoundFont.Melody.Class"] = $PS["Audio.SoundFont.Melody.Class"] || {};
  var exports = $PS["Audio.SoundFont.Melody.Class"];
  var Audio_SoundFont_Melody_Maker = $PS["Audio.SoundFont.Melody.Maker"];                
  var MidiRecording = function (x) {
      return x;
  };
  var Playable = function (toMelody) {
      this.toMelody = toMelody;
  };
  var toMelody = function (dict) {
      return dict.toMelody;
  };
  var playableMidi = new Playable(function (v) {
      return function (v1) {
          return Audio_SoundFont_Melody_Maker.toMelody(v);
      };
  });
  exports["toMelody"] = toMelody;
  exports["MidiRecording"] = MidiRecording;
  exports["playableMidi"] = playableMidi;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.String"] = $PS["CSS.String"] || {};
  var exports = $PS["CSS.String"];                               
  var IsString = function (fromString) {
      this.fromString = fromString;
  };                                                                                        
  var fromString = function (dict) {
      return dict.fromString;
  };
  exports["fromString"] = fromString;
  exports["IsString"] = IsString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Color"] = $PS["Color"] || {};
  var exports = $PS["Color"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var $$Math = $PS["Math"];
  var HSLA = (function () {
      function HSLA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      HSLA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new HSLA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return HSLA;
  })();
  var modPos = function (x) {
      return function (y) {
          return $$Math.remainder($$Math.remainder(x)(y) + y)(y);
      };
  };
  var rgba = function (red$prime) {
      return function (green$prime) {
          return function (blue$prime) {
              return function (alpha) {
                  var red = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(red$prime);
                  var r = Data_Int.toNumber(red) / 255.0;
                  var green = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(green$prime);
                  var g = Data_Int.toNumber(green) / 255.0;
                  var blue = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(blue$prime);
                  var maxChroma = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.max(Data_Ord.ordInt)(red)(green))(blue);
                  var minChroma = Data_Ord.min(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(red)(green))(blue);
                  var chroma = maxChroma - minChroma | 0;
                  var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                  var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                  var saturation = (function () {
                      if (chroma === 0) {
                          return 0.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                      };
                      throw new Error("Failed pattern match at Color (line 157, column 5 - line 158, column 75): " + [  ]);
                  })();
                  var b = Data_Int.toNumber(blue) / 255.0;
                  var hue$prime = function (v) {
                      if (v === 0) {
                          return 0.0;
                      };
                      if (maxChroma === red) {
                          return modPos((g - b) / chroma$prime)(6.0);
                      };
                      if (maxChroma === green) {
                          return (b - r) / chroma$prime + 2.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return (r - g) / chroma$prime + 4.0;
                      };
                      throw new Error("Failed pattern match at Color (line 148, column 5 - line 148, column 17): " + [ v.constructor.name ]);
                  };
                  var hue = 60.0 * hue$prime(chroma);
                  return new HSLA(hue, saturation, lightness, alpha);
              };
          };
      };
  };
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return rgba(r)(g)(b)(1.0);
          };
      };
  };
  var cssStringHSLA = function (v) {
      var toString = function (n) {
          return Data_Show.show(Data_Show.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
      };
      var saturation = toString(v.value1 * 100.0) + "%";
      var lightness = toString(v.value2 * 100.0) + "%";
      var hue = toString(v.value0);
      var alpha = Data_Show.show(Data_Show.showNumber)(v.value3);
      var $59 = v.value3 === 1.0;
      if ($59) {
          return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
      };
      return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
  };
  exports["rgba"] = rgba;
  exports["rgb"] = rgb;
  exports["cssStringHSLA"] = cssStringHSLA;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];
  var Control_Category = $PS["Control.Category"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
      };
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  exports["second"] = second;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.Property"] = $PS["CSS.Property"] || {};
  var exports = $PS["CSS.Property"];
  var CSS_String = $PS["CSS.String"];
  var Color = $PS["Color"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                  
  var Prefixed = (function () {
      function Prefixed(value0) {
          this.value0 = value0;
      };
      Prefixed.create = function (value0) {
          return new Prefixed(value0);
      };
      return Prefixed;
  })();
  var Plain = (function () {
      function Plain(value0) {
          this.value0 = value0;
      };
      Plain.create = function (value0) {
          return new Plain(value0);
      };
      return Plain;
  })();
  var Value = function (x) {
      return x;
  };
  var Key = function (x) {
      return x;
  };
  var Val = function (value) {
      this.value = value;
  };
  var value = function (dict) {
      return dict.value;
  };                                                                             
  var semigroupPrefixed = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Plain && v1 instanceof Plain) {
              return Plain.create(v.value0 + v1.value0);
          };
          if (v instanceof Plain && v1 instanceof Prefixed) {
              return Prefixed.create(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (v2) {
                  return v.value0 + v2;
              }))(v1.value0));
          };
          if (v instanceof Prefixed && v1 instanceof Plain) {
              return Prefixed.create(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (v2) {
                  return v1.value0 + v2;
              }))(v.value0));
          };
          if (v instanceof Prefixed && v1 instanceof Prefixed) {
              return Prefixed.create(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0));
          };
          throw new Error("Failed pattern match at CSS.Property (line 25, column 1 - line 29, column 59): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var semigroupValue = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Value(Data_Semigroup.append(semigroupPrefixed)(v)(v1));
      };
  });
  var monoidPrefixed = new Data_Monoid.Monoid(function () {
      return semigroupPrefixed;
  }, new Plain(Data_Monoid.mempty(Data_Monoid.monoidString)));
  var monoidValue = new Data_Monoid.Monoid(function () {
      return semigroupValue;
  }, Data_Monoid.mempty(monoidPrefixed));
  var isStringPrefixed = new CSS_String.IsString(Plain.create);
  var isStringValue = new CSS_String.IsString((function () {
      var $123 = CSS_String.fromString(isStringPrefixed);
      return function ($124) {
          return Value($123($124));
      };
  })());
  var valColor = new Val((function () {
      var $127 = CSS_String.fromString(isStringValue);
      return function ($128) {
          return $127(Color.cssStringHSLA($128));
      };
  })());
  var valList = function (dictVal) {
      return new Val((function () {
          var $129 = Data_Foldable.intercalate(Data_Foldable.foldableArray)(monoidValue)(CSS_String.fromString(isStringValue)(", "));
          return function ($130) {
              return $129((function (v) {
                  return Data_Functor.map(Data_Functor.functorArray)(value(dictVal))(v);
              })($130));
          };
      })());
  }; 
  var valNumber = new Val((function () {
      var $134 = CSS_String.fromString(isStringValue);
      var $135 = Data_Show.show(Data_Show.showNumber);
      return function ($136) {
          return $134($135($136));
      };
  })());                                                        
  var valTuple = function (dictVal) {
      return function (dictVal1) {
          return new Val(function (v) {
              return Data_Semigroup.append(semigroupValue)(value(dictVal)(v.value0))(Data_Semigroup.append(semigroupValue)(CSS_String.fromString(isStringValue)(" "))(value(dictVal1)(v.value1)));
          });
      };
  };
  var valUnit = new Val(function (u) {
      return CSS_String.fromString(isStringValue)("");
  });
  var isStringKey = new CSS_String.IsString((function () {
      var $137 = CSS_String.fromString(isStringPrefixed);
      return function ($138) {
          return Key($137($138));
      };
  })());
  var cast = function (v) {
      return v;
  };
  exports["value"] = value;
  exports["Prefixed"] = Prefixed;
  exports["Plain"] = Plain;
  exports["cast"] = cast;
  exports["Val"] = Val;
  exports["isStringPrefixed"] = isStringPrefixed;
  exports["semigroupPrefixed"] = semigroupPrefixed;
  exports["isStringKey"] = isStringKey;
  exports["isStringValue"] = isStringValue;
  exports["semigroupValue"] = semigroupValue;
  exports["valUnit"] = valUnit;
  exports["valTuple"] = valTuple;
  exports["valNumber"] = valNumber;
  exports["valList"] = valList;
  exports["valColor"] = valColor;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Writer.Class"] = $PS["Control.Monad.Writer.Class"] || {};
  var exports = $PS["Control.Monad.Writer.Class"];   
  var MonadTell = function (Monad0, tell) {
      this.Monad0 = Monad0;
      this.tell = tell;
  };
  var tell = function (dict) {
      return dict.tell;
  };
  exports["tell"] = tell;
  exports["MonadTell"] = MonadTell;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Writer.Trans"] = $PS["Control.Monad.Writer.Trans"] || {};
  var exports = $PS["Control.Monad.Writer.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Writer_Class = $PS["Control.Monad.Writer.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                      
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };
  var mapWriterT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorWriterT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
      });
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return new Control_Apply.Apply(function () {
              return functorWriterT(dictApply.Functor0());
          }, function (v) {
              return function (v1) {
                  var k = function (v3) {
                      return function (v4) {
                          return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                      };
                  };
                  return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
              };
          });
      };
  };
  var bindWriterT = function (dictSemigroup) {
      return function (dictBind) {
          return new Control_Bind.Bind(function () {
              return applyWriterT(dictSemigroup)(dictBind.Apply0());
          }, function (v) {
              return function (k) {
                  return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
                      var v2 = k(v1.value0);
                      return Data_Functor.map((dictBind.Apply0()).Functor0())(function (v3) {
                          return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
                      })(v2);
                  }));
              };
          });
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return new Control_Applicative.Applicative(function () {
              return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
          }, function (a) {
              return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          });
      };
  };
  var monadWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
          }, function () {
              return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
          });
      };
  };
  var monadTellWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadWriterT(dictMonoid)(dictMonad);
          }, (function () {
              var $124 = Control_Applicative.pure(dictMonad.Applicative0());
              var $125 = Data_Tuple.Tuple.create(Data_Unit.unit);
              return function ($126) {
                  return WriterT($124($125($126)));
              };
          })());
      };
  };
  exports["runWriterT"] = runWriterT;
  exports["functorWriterT"] = functorWriterT;
  exports["applyWriterT"] = applyWriterT;
  exports["bindWriterT"] = bindWriterT;
  exports["monadTellWriterT"] = monadTellWriterT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Writer"] = $PS["Control.Monad.Writer"] || {};
  var exports = $PS["Control.Monad.Writer"];
  var Control_Monad_Writer_Trans = $PS["Control.Monad.Writer.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var runWriter = (function () {
      var $2 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($3) {
          return $2(Control_Monad_Writer_Trans.runWriterT($3));
      };
  })();
  var execWriter = function (m) {
      return Data_Tuple.snd(runWriter(m));
  };
  exports["execWriter"] = execWriter;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.Stylesheet"] = $PS["CSS.Stylesheet"] || {};
  var exports = $PS["CSS.Stylesheet"];
  var CSS_Property = $PS["CSS.Property"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Writer = $PS["Control.Monad.Writer"];
  var Control_Monad_Writer_Class = $PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = $PS["Control.Monad.Writer.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Property = (function () {
      function Property(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Property.create = function (value0) {
          return function (value1) {
              return new Property(value0, value1);
          };
      };
      return Property;
  })();
  var S = function (x) {
      return x;
  };
  var runS = function (v) {
      return Control_Monad_Writer.execWriter(v);
  };
  var rule = (function () {
      var $403 = Control_Monad_Writer_Class.tell(Control_Monad_Writer_Trans.monadTellWriterT(Data_Monoid.monoidArray)(Data_Identity.monadIdentity));
      return function ($404) {
          return S($403(Data_Array.singleton($404)));
      };
  })();
  var key = function (dictVal) {
      return function (k) {
          return function (v) {
              return rule(new Property(CSS_Property.cast(k), CSS_Property.value(dictVal)(v)));
          };
      };
  };
  var prefixed = function (dictVal) {
      return function (xs) {
          return key(dictVal)(xs);
      };
  }; 
  var functorStyleM = new Data_Functor.Functor(function (f) {
      return function (v) {
          return S(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Data_Identity.functorIdentity))(f)(v));
      };
  });
  var applyStyleM = new Control_Apply.Apply(function () {
      return functorStyleM;
  }, function (v) {
      return function (v1) {
          return S(Control_Apply.apply(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Data_Identity.applyIdentity))(v)(v1));
      };
  });
  var bindStyleM = new Control_Bind.Bind(function () {
      return applyStyleM;
  }, function (v) {
      return function (f) {
          return S(Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Data_Identity.bindIdentity))(v)(function ($409) {
              return (function (v1) {
                  return v1;
              })(f($409));
          }));
      };
  });
  exports["Property"] = Property;
  exports["runS"] = runS;
  exports["key"] = key;
  exports["prefixed"] = prefixed;
  exports["bindStyleM"] = bindStyleM;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.Background"] = $PS["CSS.Background"] || {};
  var exports = $PS["CSS.Background"];
  var CSS_Property = $PS["CSS.Property"];
  var CSS_String = $PS["CSS.String"];
  var CSS_Stylesheet = $PS["CSS.Stylesheet"];
  var BackgroundImage = function (x) {
      return x;
  };
  var Background = function (Val0, background) {
      this.Val0 = Val0;
      this.background = background;
  }; 
  var valBackgroundImage = new CSS_Property.Val(function (v) {
      return v;
  });   
  var isStringBackgroundImage = new CSS_String.IsString((function () {
      var $201 = CSS_String.fromString(CSS_Property.isStringValue);
      return function ($202) {
          return BackgroundImage($201($202));
      };
  })());                                                                                                                               
  var backgroundImages = CSS_Stylesheet.key(CSS_Property.valList(valBackgroundImage))(CSS_String.fromString(CSS_Property.isStringKey)("background-image"));
  var backgroundColor$prime = new Background(function () {
      return CSS_Property.valColor;
  }, CSS_Stylesheet.key(CSS_Property.valColor)(CSS_String.fromString(CSS_Property.isStringKey)("background")));
  var background = function (dict) {
      return dict.background;
  };
  exports["background"] = background;
  exports["backgroundImages"] = backgroundImages;
  exports["backgroundColor'"] = backgroundColor$prime;
  exports["isStringBackgroundImage"] = isStringBackgroundImage;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.Size"] = $PS["CSS.Size"] || {};
  var exports = $PS["CSS.Size"];
  var CSS_Property = $PS["CSS.Property"];
  var CSS_String = $PS["CSS.String"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var valSize = new CSS_Property.Val(function (v) {
      return v;
  });
  var px = function (i) {
      return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("px"));
  };
  exports["px"] = px;
  exports["valSize"] = valSize;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Tuple.Nested"] = $PS["Data.Tuple.Nested"] || {};
  var exports = $PS["Data.Tuple.Nested"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var tuple4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, Data_Unit.unit))));
              };
          };
      };
  };
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, Data_Unit.unit)));
          };
      };
  };
  exports["tuple3"] = tuple3;
  exports["tuple4"] = tuple4;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.Border"] = $PS["CSS.Border"] || {};
  var exports = $PS["CSS.Border"];
  var CSS_Property = $PS["CSS.Property"];
  var CSS_Size = $PS["CSS.Size"];
  var CSS_String = $PS["CSS.String"];
  var CSS_Stylesheet = $PS["CSS.Stylesheet"];
  var Data_Tuple_Nested = $PS["Data.Tuple.Nested"];                
  var Stroke = function (x) {
      return x;
  };                                                                           
  var valStroke = new CSS_Property.Val(function (v) {
      return v;
  });
  var solid = Stroke(CSS_String.fromString(CSS_Property.isStringValue)("solid"));
  var borderRadius = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valUnit)))))(CSS_String.fromString(CSS_Property.isStringKey)("border-radius"))(Data_Tuple_Nested.tuple4(a)(b)(c)(d));
              };
          };
      };
  };
  var border = function (a) {
      return function (b) {
          return function (c) {
              return CSS_Stylesheet.key(CSS_Property.valTuple(valStroke)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Property.valColor)(CSS_Property.valUnit))))(CSS_String.fromString(CSS_Property.isStringKey)("border"))(Data_Tuple_Nested.tuple3(a)(b)(c));
          };
      };
  };
  exports["solid"] = solid;
  exports["border"] = border;
  exports["borderRadius"] = borderRadius;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.Common"] = $PS["CSS.Common"] || {};
  var exports = $PS["CSS.Common"];
  var CSS_Property = $PS["CSS.Property"];
  var Data_Tuple = $PS["Data.Tuple"];
  var browsers = new CSS_Property.Prefixed([ new Data_Tuple.Tuple("-webkit-", ""), new Data_Tuple.Tuple("-moz-", ""), new Data_Tuple.Tuple("-ms-", ""), new Data_Tuple.Tuple("-o-", ""), new Data_Tuple.Tuple("", "") ]);
  exports["browsers"] = browsers;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.Box"] = $PS["CSS.Box"] || {};
  var exports = $PS["CSS.Box"];
  var CSS_Common = $PS["CSS.Common"];
  var CSS_Property = $PS["CSS.Property"];
  var CSS_Size = $PS["CSS.Size"];
  var CSS_String = $PS["CSS.String"];
  var CSS_Stylesheet = $PS["CSS.Stylesheet"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                                                                           
  var boxShadow = function (x) {
      return function (y) {
          return function (w) {
              return function (c) {
                  return CSS_Stylesheet.prefixed(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valColor))))(Data_Semigroup.append(CSS_Property.semigroupPrefixed)(CSS_Common.browsers)(CSS_String.fromString(CSS_Property.isStringPrefixed)("box-shadow")))(new Data_Tuple.Tuple(x, new Data_Tuple.Tuple(y, new Data_Tuple.Tuple(w, c))));
              };
          };
      };
  };
  exports["boxShadow"] = boxShadow;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.Display"] = $PS["CSS.Display"] || {};
  var exports = $PS["CSS.Display"];
  var CSS_Property = $PS["CSS.Property"];
  var CSS_String = $PS["CSS.String"];
  var CSS_Stylesheet = $PS["CSS.Stylesheet"];
  var Display = function (x) {
      return x;
  }; 
  var valDisplay = new CSS_Property.Val(function (v) {
      return v;
  });                                                                                        
  var inlineBlock = Display(CSS_String.fromString(CSS_Property.isStringValue)("inline-block"));
  var displayNone = Display(CSS_String.fromString(CSS_Property.isStringValue)("none"));      
  var display = CSS_Stylesheet.key(valDisplay)(CSS_String.fromString(CSS_Property.isStringKey)("display"));
  exports["inlineBlock"] = inlineBlock;
  exports["displayNone"] = displayNone;
  exports["display"] = display;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.Font"] = $PS["CSS.Font"] || {};
  var exports = $PS["CSS.Font"];
  var CSS_Property = $PS["CSS.Property"];
  var CSS_String = $PS["CSS.String"];
  var CSS_Stylesheet = $PS["CSS.Stylesheet"];
  var color = CSS_Stylesheet.key(CSS_Property.valColor)(CSS_String.fromString(CSS_Property.isStringKey)("color"));
  exports["color"] = color;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.Geometry"] = $PS["CSS.Geometry"] || {};
  var exports = $PS["CSS.Geometry"];
  var CSS_Property = $PS["CSS.Property"];
  var CSS_Size = $PS["CSS.Size"];
  var CSS_String = $PS["CSS.String"];
  var CSS_Stylesheet = $PS["CSS.Stylesheet"];
  var Data_Tuple_Nested = $PS["Data.Tuple.Nested"];                
  var width = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("width"));               
  var margin = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return CSS_Stylesheet.key(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valTuple(CSS_Size.valSize)(CSS_Property.valUnit)))))(CSS_String.fromString(CSS_Property.isStringKey)("margin"))(Data_Tuple_Nested.tuple4(a)(b)(c)(d));
              };
          };
      };
  };                                                                                                       
  var height = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("height"));
  exports["width"] = width;
  exports["height"] = height;
  exports["margin"] = margin;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.Overflow"] = $PS["CSS.Overflow"] || {};
  var exports = $PS["CSS.Overflow"];
  var CSS_Property = $PS["CSS.Property"];
  var CSS_String = $PS["CSS.String"];
  var CSS_Stylesheet = $PS["CSS.Stylesheet"];    
  var Overflow = function (x) {
      return x;
  };                                                                                   
  var valOverflow = new CSS_Property.Val(function (v) {
      return v;
  });                                                                                    
  var overflow = CSS_Stylesheet.key(valOverflow)(CSS_String.fromString(CSS_Property.isStringKey)("overflow"));
  var hidden = Overflow(CSS_String.fromString(CSS_Property.isStringValue)("hidden"));
  exports["overflow"] = overflow;
  exports["hidden"] = hidden;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["CSS.Render"] = $PS["CSS.Render"] || {};
  var exports = $PS["CSS.Render"];
  var CSS_Property = $PS["CSS.Property"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var collect$prime = function (v) {
      return function (v1) {
          if (v instanceof CSS_Property.Plain && v1 instanceof CSS_Property.Plain) {
              return [ new Data_Either.Right(new Data_Tuple.Tuple(v.value0, v1.value0)) ];
          };
          if (v instanceof CSS_Property.Prefixed && v1 instanceof CSS_Property.Plain) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v3) {
                  return Data_Either.Right.create(new Data_Tuple.Tuple(v3.value0 + v3.value1, v1.value0));
              })(v.value0);
          };
          if (v instanceof CSS_Property.Plain && v1 instanceof CSS_Property.Prefixed) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                  return Data_Either.Right.create(new Data_Tuple.Tuple(v.value0, v2.value0 + v2.value1));
              })(v1.value0);
          };
          if (v instanceof CSS_Property.Prefixed && v1 instanceof CSS_Property.Prefixed) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                  return Data_Maybe.maybe(new Data_Either.Left(v2.value0 + v2.value1))((function () {
                      var $182 = Data_Tuple.Tuple.create(v2.value0 + v2.value1);
                      return function ($183) {
                          return Data_Either.Right.create($182((function (v3) {
                              return v2.value0 + v3;
                          })($183)));
                      };
                  })())(Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)(v2.value0)(v1.value0));
              })(v.value0);
          };
          throw new Error("Failed pattern match at CSS.Render (line 158, column 1 - line 158, column 80): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var collect = function (v) {
      return collect$prime(v.value0)(v.value1);
  };
  exports["collect"] = collect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];              
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Applicative.Free"] = $PS["Control.Applicative.Free"] || {};
  var exports = $PS["Control.Applicative.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Lift = (function () {
      function Lift(value0) {
          this.value0 = value0;
      };
      Lift.create = function (value0) {
          return new Lift(value0);
      };
      return Lift;
  })();
  var Ap = (function () {
      function Ap(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ap.create = function (value0) {
          return function (value1) {
              return new Ap(value0, value1);
          };
      };
      return Ap;
  })();
  var mkAp = function (fba) {
      return function (fb) {
          return new Ap(fba, fb);
      };
  };
  var liftFreeAp = Lift.create;
  var goLeft = function ($copy_dictApplicative) {
      return function ($copy_fStack) {
          return function ($copy_valStack) {
              return function ($copy_nat) {
                  return function ($copy_func) {
                      return function ($copy_count) {
                          var $tco_var_dictApplicative = $copy_dictApplicative;
                          var $tco_var_fStack = $copy_fStack;
                          var $tco_var_valStack = $copy_valStack;
                          var $tco_var_nat = $copy_nat;
                          var $tco_var_func = $copy_func;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(dictApplicative, fStack, valStack, nat, func, count) {
                              if (func instanceof Pure) {
                                  $tco_done = true;
                                  return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                      func: Control_Applicative.pure(dictApplicative)(func.value0),
                                      count: count
                                  }, fStack), valStack);
                              };
                              if (func instanceof Lift) {
                                  $tco_done = true;
                                  return new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                      func: nat(func.value0),
                                      count: count
                                  }, fStack), valStack);
                              };
                              if (func instanceof Ap) {
                                  $tco_var_dictApplicative = dictApplicative;
                                  $tco_var_fStack = fStack;
                                  $tco_var_valStack = Data_List_NonEmpty.cons(func.value1)(valStack);
                                  $tco_var_nat = nat;
                                  $tco_var_func = func.value0;
                                  $copy_count = count + 1 | 0;
                                  return;
                              };
                              throw new Error("Failed pattern match at Control.Applicative.Free (line 102, column 41 - line 105, column 81): " + [ func.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_valStack, $tco_var_nat, $tco_var_func, $copy_count);
                          };
                          return $tco_result;
                      };
                  };
              };
          };
      };
  };
  var goApply = function ($copy_dictApplicative) {
      return function ($copy_fStack) {
          return function ($copy_vals) {
              return function ($copy_gVal) {
                  var $tco_var_dictApplicative = $copy_dictApplicative;
                  var $tco_var_fStack = $copy_fStack;
                  var $tco_var_vals = $copy_vals;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictApplicative, fStack, vals, gVal) {
                      if (fStack instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return new Data_Either.Left(gVal);
                      };
                      if (fStack instanceof Data_List_Types.Cons) {
                          var gRes = Control_Apply.apply(dictApplicative.Apply0())(fStack.value0.func)(gVal);
                          var $14 = fStack.value0.count === 1;
                          if ($14) {
                              if (fStack.value1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return new Data_Either.Left(gRes);
                              };
                              $tco_var_dictApplicative = dictApplicative;
                              $tco_var_fStack = fStack.value1;
                              $tco_var_vals = vals;
                              $copy_gVal = gRes;
                              return;
                          };
                          if (vals instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Data_Either.Left(gRes);
                          };
                          if (vals instanceof Data_List_Types.Cons) {
                              $tco_done = true;
                              return Data_Either.Right.create(new Data_Tuple.Tuple(new Data_List_Types.Cons({
                                  func: gRes,
                                  count: fStack.value0.count - 1 | 0
                              }, fStack.value1), new Data_NonEmpty.NonEmpty(vals.value0, vals.value1)));
                          };
                          throw new Error("Failed pattern match at Control.Applicative.Free (line 83, column 11 - line 88, column 50): " + [ vals.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Control.Applicative.Free (line 72, column 3 - line 88, column 50): " + [ fStack.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictApplicative, $tco_var_fStack, $tco_var_vals, $copy_gVal);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var functorFreeAp = new Data_Functor.Functor(function (f) {
      return function (x) {
          return mkAp(new Pure(f))(x);
      };
  });
  var foldFreeAp = function (dictApplicative) {
      return function (nat) {
          return function (z) {
              var go = function ($copy_v) {
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v) {
                      if (v.value1.value0 instanceof Pure) {
                          var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(Control_Applicative.pure(dictApplicative)(v.value1.value0.value0));
                          if (v1 instanceof Data_Either.Left) {
                              $tco_done = true;
                              return v1.value0;
                          };
                          if (v1 instanceof Data_Either.Right) {
                              $copy_v = v1.value0;
                              return;
                          };
                          throw new Error("Failed pattern match at Control.Applicative.Free (line 54, column 17 - line 56, column 24): " + [ v1.constructor.name ]);
                      };
                      if (v.value1.value0 instanceof Lift) {
                          var v1 = goApply(dictApplicative)(v.value0)(v.value1.value1)(nat(v.value1.value0.value0));
                          if (v1 instanceof Data_Either.Left) {
                              $tco_done = true;
                              return v1.value0;
                          };
                          if (v1 instanceof Data_Either.Right) {
                              $copy_v = v1.value0;
                              return;
                          };
                          throw new Error("Failed pattern match at Control.Applicative.Free (line 57, column 17 - line 59, column 24): " + [ v1.constructor.name ]);
                      };
                      if (v.value1.value0 instanceof Ap) {
                          var nextVals = new Data_NonEmpty.NonEmpty(v.value1.value0.value1, v.value1.value1);
                          $copy_v = goLeft(dictApplicative)(v.value0)(nextVals)(nat)(v.value1.value0.value0)(1);
                          return;
                      };
                      throw new Error("Failed pattern match at Control.Applicative.Free (line 53, column 5 - line 62, column 47): " + [ v.value1.value0.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($copy_v);
                  };
                  return $tco_result;
              };
              return go(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_NonEmpty.singleton(z)));
          };
      };
  };
  var retractFreeAp = function (dictApplicative) {
      return foldFreeAp(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  };
  var applyFreeAp = new Control_Apply.Apply(function () {
      return functorFreeAp;
  }, function (fba) {
      return function (fb) {
          return mkAp(fba)(fb);
      };
  });
  var applicativeFreeAp = new Control_Applicative.Applicative(function () {
      return applyFreeAp;
  }, Pure.create);
  var hoistFreeAp = function (f) {
      return foldFreeAp(applicativeFreeAp)(function ($37) {
          return liftFreeAp(f($37));
      });
  };
  exports["retractFreeAp"] = retractFreeAp;
  exports["hoistFreeAp"] = hoistFreeAp;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Free.Trans"] = $PS["Control.Monad.Free.Trans"] || {};
  var exports = $PS["Control.Monad.Free.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];                      
  var Bound = (function () {
      function Bound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bound.create = function (value0) {
          return function (value1) {
              return new Bound(value0, value1);
          };
      };
      return Bound;
  })();
  var FreeT = (function () {
      function FreeT(value0) {
          this.value0 = value0;
      };
      FreeT.create = function (value0) {
          return new FreeT(value0);
      };
      return FreeT;
  })();
  var Bind = (function () {
      function Bind(value0) {
          this.value0 = value0;
      };
      Bind.create = function (value0) {
          return new Bind(value0);
      };
      return Bind;
  })();
  var monadTransFreeT = function (dictFunctor) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (ma) {
              return new FreeT(function (v) {
                  return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Left.create)(ma);
              });
          };
      });
  };
  var freeT = FreeT.create;
  var bound = function (m) {
      return function (f) {
          return new Bind(Data_Exists.mkExists(new Bound(m, f)));
      };
  };
  var functorFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  if (v instanceof FreeT) {
                      return new FreeT(function (v1) {
                          return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                      });
                  };
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)((function () {
                              var $123 = Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f);
                              return function ($124) {
                                  return $123(v1.value1($124));
                              };
                          })());
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 59, column 1 - line 61, column 71): " + [ f.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var monadFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeFreeT(dictFunctor)(dictMonad);
          }, function () {
              return bindFreeT(dictFunctor)(dictMonad);
          });
      };
  };
  var bindFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Bind.Bind(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (v) {
              return function (f) {
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function (x) {
                              return bound(function (v2) {
                                  return v1.value1(x);
                              })(f);
                          });
                      })(v.value0);
                  };
                  return bound(function (v1) {
                      return v;
                  })(f);
              };
          });
      };
  };
  var applyFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Apply.Apply(function () {
              return functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0());
          }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
      };
  };
  var applicativeFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Applicative.Applicative(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (a) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(a));
              });
          });
      };
  };
  var liftFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return function (fa) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad)))(fa)));
              });
          };
      };
  };
  var resume = function (dictFunctor) {
      return function (dictMonadRec) {
          var go = function (v) {
              if (v instanceof FreeT) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
              };
              if (v instanceof Bind) {
                  return Data_Exists.runExists(function (v1) {
                      var v2 = v1.value0(Data_Unit.unit);
                      if (v2 instanceof FreeT) {
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v2.value0(Data_Unit.unit))(function (v3) {
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(v1.value1(v3.value0)));
                              };
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(h)(v1.value1);
                                  })(v3.value0))));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 54, column 20 - line 56, column 67): " + [ v3.constructor.name ]);
                          });
                      };
                      if (v2 instanceof Bind) {
                          return Data_Exists.runExists(function (v3) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value0(Data_Unit.unit))(function (z) {
                                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value1(z))(v1.value1);
                              })));
                          })(v2.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 52, column 5 - line 57, column 98): " + [ v2.constructor.name ]);
                  })(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 49, column 3 - line 49, column 75): " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  var runFreeT = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (interp) {
              var go = function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 141, column 3 - line 141, column 63): " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec.Monad0()).Bind1())(go)(resume(dictFunctor)(dictMonadRec)));
          };
      };
  };
  var monadRecFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadFreeT(dictFunctor)(dictMonad);
          }, function (f) {
              var go = function (s) {
                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                      if (v instanceof Control_Monad_Rec_Class.Loop) {
                          return go(v.value0);
                      };
                      if (v instanceof Control_Monad_Rec_Class.Done) {
                          return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 82, column 15 - line 84, column 25): " + [ v.constructor.name ]);
                  });
              };
              return go;
          });
      };
  };
  exports["freeT"] = freeT;
  exports["liftFreeT"] = liftFreeT;
  exports["resume"] = resume;
  exports["runFreeT"] = runFreeT;
  exports["functorFreeT"] = functorFreeT;
  exports["applicativeFreeT"] = applicativeFreeT;
  exports["bindFreeT"] = bindFreeT;
  exports["monadTransFreeT"] = monadTransFreeT;
  exports["monadRecFreeT"] = monadRecFreeT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Coroutine"] = $PS["Control.Coroutine"] || {};
  var exports = $PS["Control.Coroutine"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Free_Trans = $PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Emit = (function () {
      function Emit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Emit.create = function (value0) {
          return function (value1) {
              return new Emit(value0, value1);
          };
      };
      return Emit;
  })();
  var runProcess = function (dictMonadRec) {
      return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec)((function () {
          var $176 = Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0());
          var $177 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
          return function ($178) {
              return $176($177($178));
          };
      })());
  };
  var profunctorAwait = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(f)(g)(v);
          };
      };
  });
  var loop = function (dictFunctor) {
      return function (dictMonad) {
          return function (me) {
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Free_Trans.monadRecFreeT(dictFunctor)(dictMonad))(function (v) {
                  return Data_Functor.map(Control_Monad_Free_Trans.functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.maybe(new Control_Monad_Rec_Class.Loop(Data_Unit.unit))(Control_Monad_Rec_Class.Done.create))(me);
              })(Data_Unit.unit);
          };
      };
  };
  var fuseWithL = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictFunctor2) {
              return function (dictMonadRec) {
                  return function (zap) {
                      return function (fs) {
                          return function (gs) {
                              var go = function (v) {
                                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0)))(function (l) {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))(function (r) {
                                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonadRec.Monad0()))(Data_Functor.map(dictFunctor2)(function (t) {
                                              return Control_Monad_Free_Trans.freeT(function (v1) {
                                                  return go(t);
                                              });
                                          })(zap(Data_Tuple.Tuple.create)(l)(r)));
                                      });
                                  }));
                              };
                              return Control_Monad_Free_Trans.freeT(function (v) {
                                  return go(new Data_Tuple.Tuple(fs, gs));
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  var fuseWith = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictFunctor2) {
              return function (dictMonadRec) {
                  return function (dictParallel) {
                      return function (zap) {
                          return function (fs) {
                              return function (gs) {
                                  var go = function (v) {
                                      return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel.Applicative1()).Apply0())(Data_Functor.map(((dictParallel.Applicative1()).Apply0()).Functor0())(Control_Apply.lift2(Data_Either.applyEither)(zap(Data_Tuple.Tuple.create)))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0))))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))))(function (next) {
                                          if (next instanceof Data_Either.Left) {
                                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Left(next.value0));
                                          };
                                          if (next instanceof Data_Either.Right) {
                                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor2)(function (t) {
                                                  return Control_Monad_Free_Trans.freeT(function (v1) {
                                                      return go(t);
                                                  });
                                              })(next.value0)));
                                          };
                                          throw new Error("Failed pattern match at Control.Coroutine (line 79, column 5 - line 81, column 63): " + [ next.constructor.name ]);
                                      });
                                  };
                                  return Control_Monad_Free_Trans.freeT(function (v) {
                                      return go(new Data_Tuple.Tuple(fs, gs));
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var functorAwait = new Data_Functor.Functor(Data_Profunctor.rmap(profunctorAwait));
  var bifunctorEmit = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Emit(f(v.value0), g(v.value1));
          };
      };
  });
  var functorEmit = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorEmit));
  var connect = function (dictMonadRec) {
      return function (dictParallel) {
          return fuseWith(functorEmit)(functorAwait)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
              return function (v) {
                  return function (v1) {
                      return f(v.value1)(v1(v.value0));
                  };
              };
          });
      };
  };
  var emit = function (dictMonad) {
      return function (o) {
          return Control_Monad_Free_Trans.liftFreeT(functorEmit)(dictMonad)(new Emit(o, Data_Unit.unit));
      };
  };
  var producer = function (dictMonad) {
      return function (recv) {
          return loop(functorEmit)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorEmit)(dictMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorEmit))(dictMonad)(recv))(function (e) {
              if (e instanceof Data_Either.Left) {
                  return Data_Functor.voidLeft(Control_Monad_Free_Trans.functorFreeT(functorEmit)(((dictMonad.Bind1()).Apply0()).Functor0()))(emit(dictMonad)(e.value0))(Data_Maybe.Nothing.value);
              };
              if (e instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorEmit)(dictMonad))(new Data_Maybe.Just(e.value0));
              };
              throw new Error("Failed pattern match at Control.Coroutine (line 125, column 3 - line 127, column 29): " + [ e.constructor.name ]);
          }));
      };
  };
  var pullFrom = function (dictMonadRec) {
      return fuseWithL(functorAwait)(functorEmit)(Data_Identity.functorIdentity)(dictMonadRec)(function (f) {
          return function (v) {
              return function (v1) {
                  return Control_Applicative.pure(Data_Identity.applicativeIdentity)(f(v(v1.value0))(v1.value1));
              };
          };
      });
  };
  var $$await = function (dictMonad) {
      return Control_Monad_Free_Trans.liftFreeT(functorAwait)(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["runProcess"] = runProcess;
  exports["producer"] = producer;
  exports["await"] = $$await;
  exports["connect"] = connect;
  exports["pullFrom"] = pullFrom;
  exports["functorAwait"] = functorAwait;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Fork.Class"] = $PS["Control.Monad.Fork.Class"] || {};
  var exports = $PS["Control.Monad.Fork.Class"];
  var Effect_Aff = $PS["Effect.Aff"];
  var MonadFork = function (Functor1, Monad0, fork, join, suspend) {
      this.Functor1 = Functor1;
      this.Monad0 = Monad0;
      this.fork = fork;
      this.join = join;
      this.suspend = suspend;
  };
  var monadForkAff = new MonadFork(function () {
      return Effect_Aff.functorFiber;
  }, function () {
      return Effect_Aff.monadAff;
  }, Effect_Aff.forkAff, Effect_Aff.joinFiber, Effect_Aff.suspendAff);
  var fork = function (dict) {
      return dict.fork;
  };
  exports["fork"] = fork;
  exports["monadForkAff"] = monadForkAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $44 = Data_CatQueue["null"](v.value1);
              if ($44) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)((function () {
              var $120 = Control_Applicative.pure(freeApplicative);
              return function ($121) {
                  return $120(k($121));
              };
          })())(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($122) {
      return fromView(Return.create($122));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $123 = Control_Applicative.pure(freeApplicative);
          return function ($124) {
              return $123($124);
          };
      })()));
  };
  var foldFree = function (dictMonadRec) {
      return function (k) {
          var go = function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
              };
              if (v instanceof Bind) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($136) {
                      return Control_Monad_Rec_Class.Loop.create(v.value1($136));
                  })(k(v.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 158, column 10 - line 160, column 37): " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  exports["liftF"] = liftF;
  exports["foldFree"] = foldFree;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeMonad"] = freeMonad;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];                      
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parSequence_"] = parSequence_;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["DOM.HTML.Indexed.InputAcceptType"] = $PS["DOM.HTML.Indexed.InputAcceptType"] || {};
  var exports = $PS["DOM.HTML.Indexed.InputAcceptType"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_String_Common = $PS["Data.String.Common"];                
  var AcceptMediaType = (function () {
      function AcceptMediaType(value0) {
          this.value0 = value0;
      };
      AcceptMediaType.create = function (value0) {
          return new AcceptMediaType(value0);
      };
      return AcceptMediaType;
  })();
  var AcceptFileExtension = (function () {
      function AcceptFileExtension(value0) {
          this.value0 = value0;
      };
      AcceptFileExtension.create = function (value0) {
          return new AcceptFileExtension(value0);
      };
      return AcceptFileExtension;
  })();
  var renderInputAcceptTypeAtom = function (v) {
      if (v instanceof AcceptMediaType) {
          return v.value0;
      };
      if (v instanceof AcceptFileExtension) {
          return v.value0;
      };
      throw new Error("Failed pattern match at DOM.HTML.Indexed.InputAcceptType (line 28, column 29 - line 30, column 33): " + [ v.constructor.name ]);
  };
  var renderInputAcceptType = function (v) {
      return Data_String_Common.joinWith(",")(Data_Functor.map(Data_Functor.functorArray)(renderInputAcceptTypeAtom)(v));
  };
  var mediaType = function (mt) {
      return [ new AcceptMediaType(mt) ];
  };
  exports["mediaType"] = mediaType;
  exports["renderInputAcceptType"] = renderInputAcceptType;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["DOM.HTML.Indexed.InputType"] = $PS["DOM.HTML.Indexed.InputType"] || {};
  var exports = $PS["DOM.HTML.Indexed.InputType"];
  var InputButton = (function () {
      function InputButton() {

      };
      InputButton.value = new InputButton();
      return InputButton;
  })();
  var InputCheckbox = (function () {
      function InputCheckbox() {

      };
      InputCheckbox.value = new InputCheckbox();
      return InputCheckbox;
  })();
  var InputColor = (function () {
      function InputColor() {

      };
      InputColor.value = new InputColor();
      return InputColor;
  })();
  var InputDate = (function () {
      function InputDate() {

      };
      InputDate.value = new InputDate();
      return InputDate;
  })();
  var InputDatetimeLocal = (function () {
      function InputDatetimeLocal() {

      };
      InputDatetimeLocal.value = new InputDatetimeLocal();
      return InputDatetimeLocal;
  })();
  var InputEmail = (function () {
      function InputEmail() {

      };
      InputEmail.value = new InputEmail();
      return InputEmail;
  })();
  var InputFile = (function () {
      function InputFile() {

      };
      InputFile.value = new InputFile();
      return InputFile;
  })();
  var InputHidden = (function () {
      function InputHidden() {

      };
      InputHidden.value = new InputHidden();
      return InputHidden;
  })();
  var InputImage = (function () {
      function InputImage() {

      };
      InputImage.value = new InputImage();
      return InputImage;
  })();
  var InputMonth = (function () {
      function InputMonth() {

      };
      InputMonth.value = new InputMonth();
      return InputMonth;
  })();
  var InputNumber = (function () {
      function InputNumber() {

      };
      InputNumber.value = new InputNumber();
      return InputNumber;
  })();
  var InputPassword = (function () {
      function InputPassword() {

      };
      InputPassword.value = new InputPassword();
      return InputPassword;
  })();
  var InputRadio = (function () {
      function InputRadio() {

      };
      InputRadio.value = new InputRadio();
      return InputRadio;
  })();
  var InputRange = (function () {
      function InputRange() {

      };
      InputRange.value = new InputRange();
      return InputRange;
  })();
  var InputReset = (function () {
      function InputReset() {

      };
      InputReset.value = new InputReset();
      return InputReset;
  })();
  var InputSearch = (function () {
      function InputSearch() {

      };
      InputSearch.value = new InputSearch();
      return InputSearch;
  })();
  var InputSubmit = (function () {
      function InputSubmit() {

      };
      InputSubmit.value = new InputSubmit();
      return InputSubmit;
  })();
  var InputTel = (function () {
      function InputTel() {

      };
      InputTel.value = new InputTel();
      return InputTel;
  })();
  var InputText = (function () {
      function InputText() {

      };
      InputText.value = new InputText();
      return InputText;
  })();
  var InputTime = (function () {
      function InputTime() {

      };
      InputTime.value = new InputTime();
      return InputTime;
  })();
  var InputUrl = (function () {
      function InputUrl() {

      };
      InputUrl.value = new InputUrl();
      return InputUrl;
  })();
  var InputWeek = (function () {
      function InputWeek() {

      };
      InputWeek.value = new InputWeek();
      return InputWeek;
  })();
  var renderInputType = function (v) {
      if (v instanceof InputButton) {
          return "button";
      };
      if (v instanceof InputCheckbox) {
          return "checkbox";
      };
      if (v instanceof InputColor) {
          return "color";
      };
      if (v instanceof InputDate) {
          return "date";
      };
      if (v instanceof InputDatetimeLocal) {
          return "datetime-local";
      };
      if (v instanceof InputEmail) {
          return "email";
      };
      if (v instanceof InputFile) {
          return "file";
      };
      if (v instanceof InputHidden) {
          return "hidden";
      };
      if (v instanceof InputImage) {
          return "image";
      };
      if (v instanceof InputMonth) {
          return "month";
      };
      if (v instanceof InputNumber) {
          return "number";
      };
      if (v instanceof InputPassword) {
          return "password";
      };
      if (v instanceof InputRadio) {
          return "radio";
      };
      if (v instanceof InputRange) {
          return "range";
      };
      if (v instanceof InputReset) {
          return "reset";
      };
      if (v instanceof InputSearch) {
          return "search";
      };
      if (v instanceof InputSubmit) {
          return "submit";
      };
      if (v instanceof InputTel) {
          return "tel";
      };
      if (v instanceof InputText) {
          return "text";
      };
      if (v instanceof InputTime) {
          return "time";
      };
      if (v instanceof InputUrl) {
          return "url";
      };
      if (v instanceof InputWeek) {
          return "week";
      };
      throw new Error("Failed pattern match at DOM.HTML.Indexed.InputType (line 28, column 19 - line 50, column 22): " + [ v.constructor.name ]);
  };
  exports["InputFile"] = InputFile;
  exports["InputImage"] = InputImage;
  exports["InputRange"] = InputRange;
  exports["renderInputType"] = renderInputType;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Generic.Rep.Eq"] = $PS["Data.Generic.Rep.Eq"] || {};
  var exports = $PS["Data.Generic.Rep.Eq"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];                
  var GenericEq = function (genericEq$prime) {
      this["genericEq'"] = genericEq$prime;
  }; 
  var genericEqNoArguments = new GenericEq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var genericEqArgument = function (dictEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var genericEq$prime = function (dict) {
      return dict["genericEq'"];
  };
  var genericEqConstructor = function (dictGenericEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return genericEq$prime(dictGenericEq)(v)(v1);
          };
      });
  };
  var genericEqSum = function (dictGenericEq) {
      return function (dictGenericEq1) {
          return new GenericEq(function (v) {
              return function (v1) {
                  if (v instanceof Data_Generic_Rep.Inl && v1 instanceof Data_Generic_Rep.Inl) {
                      return genericEq$prime(dictGenericEq)(v.value0)(v1.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr && v1 instanceof Data_Generic_Rep.Inr) {
                      return genericEq$prime(dictGenericEq1)(v.value0)(v1.value0);
                  };
                  return false;
              };
          });
      };
  };
  var genericEq = function (dictGeneric) {
      return function (dictGenericEq) {
          return function (x) {
              return function (y) {
                  return genericEq$prime(dictGenericEq)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y));
              };
          };
      };
  };
  exports["genericEq"] = genericEq;
  exports["genericEqNoArguments"] = genericEqNoArguments;
  exports["genericEqSum"] = genericEqSum;
  exports["genericEqConstructor"] = genericEqConstructor;
  exports["genericEqArgument"] = genericEqArgument;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Abc"] = $PS["Data.Abc"] || {};
  var exports = $PS["Data.Abc"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = $PS["Data.Generic.Rep.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Symbol = $PS["Data.Symbol"];                
  var Thin = (function () {
      function Thin() {

      };
      Thin.value = new Thin();
      return Thin;
  })();
  var ThinThin = (function () {
      function ThinThin() {

      };
      ThinThin.value = new ThinThin();
      return ThinThin;
  })();
  var ThinThick = (function () {
      function ThinThick() {

      };
      ThinThick.value = new ThinThick();
      return ThinThick;
  })();
  var ThickThin = (function () {
      function ThickThin() {

      };
      ThickThin.value = new ThickThin();
      return ThickThin;
  })();
  var Invisible = (function () {
      function Invisible() {

      };
      Invisible.value = new Invisible();
      return Invisible;
  })();
  var Begin = (function () {
      function Begin() {

      };
      Begin.value = new Begin();
      return Begin;
  })();
  var End = (function () {
      function End() {

      };
      End.value = new End();
      return End;
  })();
  var BeginAndEnd = (function () {
      function BeginAndEnd() {

      };
      BeginAndEnd.value = new BeginAndEnd();
      return BeginAndEnd;
  })();
  var A = (function () {
      function A() {

      };
      A.value = new A();
      return A;
  })();
  var B = (function () {
      function B() {

      };
      B.value = new B();
      return B;
  })();
  var C = (function () {
      function C() {

      };
      C.value = new C();
      return C;
  })();
  var D = (function () {
      function D() {

      };
      D.value = new D();
      return D;
  })();
  var E = (function () {
      function E() {

      };
      E.value = new E();
      return E;
  })();
  var F = (function () {
      function F() {

      };
      F.value = new F();
      return F;
  })();
  var G = (function () {
      function G() {

      };
      G.value = new G();
      return G;
  })();
  var Major = (function () {
      function Major() {

      };
      Major.value = new Major();
      return Major;
  })();
  var Minor = (function () {
      function Minor() {

      };
      Minor.value = new Minor();
      return Minor;
  })();
  var Ionian = (function () {
      function Ionian() {

      };
      Ionian.value = new Ionian();
      return Ionian;
  })();
  var Dorian = (function () {
      function Dorian() {

      };
      Dorian.value = new Dorian();
      return Dorian;
  })();
  var Phrygian = (function () {
      function Phrygian() {

      };
      Phrygian.value = new Phrygian();
      return Phrygian;
  })();
  var Lydian = (function () {
      function Lydian() {

      };
      Lydian.value = new Lydian();
      return Lydian;
  })();
  var Mixolydian = (function () {
      function Mixolydian() {

      };
      Mixolydian.value = new Mixolydian();
      return Mixolydian;
  })();
  var Aeolian = (function () {
      function Aeolian() {

      };
      Aeolian.value = new Aeolian();
      return Aeolian;
  })();
  var Locrian = (function () {
      function Locrian() {

      };
      Locrian.value = new Locrian();
      return Locrian;
  })();
  var LeftArrow = (function () {
      function LeftArrow(value0) {
          this.value0 = value0;
      };
      LeftArrow.create = function (value0) {
          return new LeftArrow(value0);
      };
      return LeftArrow;
  })();
  var RightArrow = (function () {
      function RightArrow(value0) {
          this.value0 = value0;
      };
      RightArrow.create = function (value0) {
          return new RightArrow(value0);
      };
      return RightArrow;
  })();
  var AboveNextSymbol = (function () {
      function AboveNextSymbol() {

      };
      AboveNextSymbol.value = new AboveNextSymbol();
      return AboveNextSymbol;
  })();
  var BelowNextSymbol = (function () {
      function BelowNextSymbol() {

      };
      BelowNextSymbol.value = new BelowNextSymbol();
      return BelowNextSymbol;
  })();
  var LeftOfNextSymbol = (function () {
      function LeftOfNextSymbol() {

      };
      LeftOfNextSymbol.value = new LeftOfNextSymbol();
      return LeftOfNextSymbol;
  })();
  var RightOfNextSymbol = (function () {
      function RightOfNextSymbol() {

      };
      RightOfNextSymbol.value = new RightOfNextSymbol();
      return RightOfNextSymbol;
  })();
  var Discretional = (function () {
      function Discretional() {

      };
      Discretional.value = new Discretional();
      return Discretional;
  })();
  var Sharp = (function () {
      function Sharp() {

      };
      Sharp.value = new Sharp();
      return Sharp;
  })();
  var Flat = (function () {
      function Flat() {

      };
      Flat.value = new Flat();
      return Flat;
  })();
  var DoubleSharp = (function () {
      function DoubleSharp() {

      };
      DoubleSharp.value = new DoubleSharp();
      return DoubleSharp;
  })();
  var DoubleFlat = (function () {
      function DoubleFlat() {

      };
      DoubleFlat.value = new DoubleFlat();
      return DoubleFlat;
  })();
  var Natural = (function () {
      function Natural() {

      };
      Natural.value = new Natural();
      return Natural;
  })();
  var Implicit = (function () {
      function Implicit() {

      };
      Implicit.value = new Implicit();
      return Implicit;
  })();
  var Pitch = (function () {
      function Pitch(value0) {
          this.value0 = value0;
      };
      Pitch.create = function (value0) {
          return new Pitch(value0);
      };
      return Pitch;
  })();
  var Area = (function () {
      function Area(value0) {
          this.value0 = value0;
      };
      Area.create = function (value0) {
          return new Area(value0);
      };
      return Area;
  })();
  var Book = (function () {
      function Book(value0) {
          this.value0 = value0;
      };
      Book.create = function (value0) {
          return new Book(value0);
      };
      return Book;
  })();
  var Composer = (function () {
      function Composer(value0) {
          this.value0 = value0;
      };
      Composer.create = function (value0) {
          return new Composer(value0);
      };
      return Composer;
  })();
  var Discography = (function () {
      function Discography(value0) {
          this.value0 = value0;
      };
      Discography.create = function (value0) {
          return new Discography(value0);
      };
      return Discography;
  })();
  var FileUrl = (function () {
      function FileUrl(value0) {
          this.value0 = value0;
      };
      FileUrl.create = function (value0) {
          return new FileUrl(value0);
      };
      return FileUrl;
  })();
  var Group = (function () {
      function Group(value0) {
          this.value0 = value0;
      };
      Group.create = function (value0) {
          return new Group(value0);
      };
      return Group;
  })();
  var History = (function () {
      function History(value0) {
          this.value0 = value0;
      };
      History.create = function (value0) {
          return new History(value0);
      };
      return History;
  })();
  var Instruction = (function () {
      function Instruction(value0) {
          this.value0 = value0;
      };
      Instruction.create = function (value0) {
          return new Instruction(value0);
      };
      return Instruction;
  })();
  var Key = (function () {
      function Key(value0) {
          this.value0 = value0;
      };
      Key.create = function (value0) {
          return new Key(value0);
      };
      return Key;
  })();
  var UnitNoteLength = (function () {
      function UnitNoteLength(value0) {
          this.value0 = value0;
      };
      UnitNoteLength.create = function (value0) {
          return new UnitNoteLength(value0);
      };
      return UnitNoteLength;
  })();
  var Meter = (function () {
      function Meter(value0) {
          this.value0 = value0;
      };
      Meter.create = function (value0) {
          return new Meter(value0);
      };
      return Meter;
  })();
  var Macro = (function () {
      function Macro(value0) {
          this.value0 = value0;
      };
      Macro.create = function (value0) {
          return new Macro(value0);
      };
      return Macro;
  })();
  var Notes = (function () {
      function Notes(value0) {
          this.value0 = value0;
      };
      Notes.create = function (value0) {
          return new Notes(value0);
      };
      return Notes;
  })();
  var Origin = (function () {
      function Origin(value0) {
          this.value0 = value0;
      };
      Origin.create = function (value0) {
          return new Origin(value0);
      };
      return Origin;
  })();
  var Parts = (function () {
      function Parts(value0) {
          this.value0 = value0;
      };
      Parts.create = function (value0) {
          return new Parts(value0);
      };
      return Parts;
  })();
  var Tempo = (function () {
      function Tempo(value0) {
          this.value0 = value0;
      };
      Tempo.create = function (value0) {
          return new Tempo(value0);
      };
      return Tempo;
  })();
  var Rhythm = (function () {
      function Rhythm(value0) {
          this.value0 = value0;
      };
      Rhythm.create = function (value0) {
          return new Rhythm(value0);
      };
      return Rhythm;
  })();
  var Remark = (function () {
      function Remark(value0) {
          this.value0 = value0;
      };
      Remark.create = function (value0) {
          return new Remark(value0);
      };
      return Remark;
  })();
  var Source = (function () {
      function Source(value0) {
          this.value0 = value0;
      };
      Source.create = function (value0) {
          return new Source(value0);
      };
      return Source;
  })();
  var SymbolLine = (function () {
      function SymbolLine(value0) {
          this.value0 = value0;
      };
      SymbolLine.create = function (value0) {
          return new SymbolLine(value0);
      };
      return SymbolLine;
  })();
  var Title = (function () {
      function Title(value0) {
          this.value0 = value0;
      };
      Title.create = function (value0) {
          return new Title(value0);
      };
      return Title;
  })();
  var UserDefined = (function () {
      function UserDefined(value0) {
          this.value0 = value0;
      };
      UserDefined.create = function (value0) {
          return new UserDefined(value0);
      };
      return UserDefined;
  })();
  var Voice = (function () {
      function Voice(value0) {
          this.value0 = value0;
      };
      Voice.create = function (value0) {
          return new Voice(value0);
      };
      return Voice;
  })();
  var WordsAfter = (function () {
      function WordsAfter(value0) {
          this.value0 = value0;
      };
      WordsAfter.create = function (value0) {
          return new WordsAfter(value0);
      };
      return WordsAfter;
  })();
  var WordsAligned = (function () {
      function WordsAligned(value0) {
          this.value0 = value0;
      };
      WordsAligned.create = function (value0) {
          return new WordsAligned(value0);
      };
      return WordsAligned;
  })();
  var ReferenceNumber = (function () {
      function ReferenceNumber(value0) {
          this.value0 = value0;
      };
      ReferenceNumber.create = function (value0) {
          return new ReferenceNumber(value0);
      };
      return ReferenceNumber;
  })();
  var Transcription = (function () {
      function Transcription(value0) {
          this.value0 = value0;
      };
      Transcription.create = function (value0) {
          return new Transcription(value0);
      };
      return Transcription;
  })();
  var FieldContinuation = (function () {
      function FieldContinuation(value0) {
          this.value0 = value0;
      };
      FieldContinuation.create = function (value0) {
          return new FieldContinuation(value0);
      };
      return FieldContinuation;
  })();
  var Comment = (function () {
      function Comment(value0) {
          this.value0 = value0;
      };
      Comment.create = function (value0) {
          return new Comment(value0);
      };
      return Comment;
  })();
  var UnsupportedHeader = (function () {
      function UnsupportedHeader() {

      };
      UnsupportedHeader.value = new UnsupportedHeader();
      return UnsupportedHeader;
  })();
  var Note = (function () {
      function Note(value0) {
          this.value0 = value0;
      };
      Note.create = function (value0) {
          return new Note(value0);
      };
      return Note;
  })();
  var BrokenRhythmPair = (function () {
      function BrokenRhythmPair(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BrokenRhythmPair.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BrokenRhythmPair(value0, value1, value2);
              };
          };
      };
      return BrokenRhythmPair;
  })();
  var Rest = (function () {
      function Rest(value0) {
          this.value0 = value0;
      };
      Rest.create = function (value0) {
          return new Rest(value0);
      };
      return Rest;
  })();
  var Tuplet = (function () {
      function Tuplet(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Tuplet.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Tuplet(value0, value1, value2);
              };
          };
      };
      return Tuplet;
  })();
  var DecoratedSpace = (function () {
      function DecoratedSpace(value0) {
          this.value0 = value0;
      };
      DecoratedSpace.create = function (value0) {
          return new DecoratedSpace(value0);
      };
      return DecoratedSpace;
  })();
  var Annotation = (function () {
      function Annotation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Annotation.create = function (value0) {
          return function (value1) {
              return new Annotation(value0, value1);
          };
      };
      return Annotation;
  })();
  var ChordSymbol = (function () {
      function ChordSymbol(value0) {
          this.value0 = value0;
      };
      ChordSymbol.create = function (value0) {
          return new ChordSymbol(value0);
      };
      return ChordSymbol;
  })();
  var Chord = (function () {
      function Chord(value0) {
          this.value0 = value0;
      };
      Chord.create = function (value0) {
          return new Chord(value0);
      };
      return Chord;
  })();
  var Inline = (function () {
      function Inline(value0) {
          this.value0 = value0;
      };
      Inline.create = function (value0) {
          return new Inline(value0);
      };
      return Inline;
  })();
  var Spacer = (function () {
      function Spacer(value0) {
          this.value0 = value0;
      };
      Spacer.create = function (value0) {
          return new Spacer(value0);
      };
      return Spacer;
  })();
  var Ignore = (function () {
      function Ignore() {

      };
      Ignore.value = new Ignore();
      return Ignore;
  })();
  var Continuation = (function () {
      function Continuation(value0) {
          this.value0 = value0;
      };
      Continuation.create = function (value0) {
          return new Continuation(value0);
      };
      return Continuation;
  })();
  var Score = (function () {
      function Score(value0) {
          this.value0 = value0;
      };
      Score.create = function (value0) {
          return new Score(value0);
      };
      return Score;
  })();
  var BodyInfo = (function () {
      function BodyInfo(value0) {
          this.value0 = value0;
      };
      BodyInfo.create = function (value0) {
          return new BodyInfo(value0);
      };
      return BodyInfo;
  })();
  var showThickness = new Data_Show.Show(function (v) {
      if (v instanceof Thin) {
          return "|";
      };
      if (v instanceof ThinThin) {
          return "||";
      };
      if (v instanceof ThinThick) {
          return "|]";
      };
      if (v instanceof ThickThin) {
          return "[|";
      };
      if (v instanceof Invisible) {
          return "";
      };
      throw new Error("Failed pattern match at Data.Abc (line 157, column 1 - line 162, column 22): " + [ v.constructor.name ]);
  });
  var showPitchClass = new Data_Show.Show(function (v) {
      if (v instanceof A) {
          return "A";
      };
      if (v instanceof B) {
          return "B";
      };
      if (v instanceof C) {
          return "C";
      };
      if (v instanceof D) {
          return "D";
      };
      if (v instanceof E) {
          return "E";
      };
      if (v instanceof F) {
          return "F";
      };
      if (v instanceof G) {
          return "G";
      };
      throw new Error("Failed pattern match at Data.Abc (line 250, column 1 - line 257, column 15): " + [ v.constructor.name ]);
  });
  var showMode = new Data_Show.Show(function (v) {
      if (v instanceof Major) {
          return "Major";
      };
      if (v instanceof Minor) {
          return "Minor";
      };
      if (v instanceof Ionian) {
          return "Ionian";
      };
      if (v instanceof Dorian) {
          return "Dorian";
      };
      if (v instanceof Phrygian) {
          return "Phrygian";
      };
      if (v instanceof Lydian) {
          return "Lydian";
      };
      if (v instanceof Mixolydian) {
          return "Mixolydian";
      };
      if (v instanceof Aeolian) {
          return "Aeolian";
      };
      if (v instanceof Locrian) {
          return "Locrian";
      };
      throw new Error("Failed pattern match at Data.Abc (line 204, column 1 - line 213, column 29): " + [ v.constructor.name ]);
  });
  var showAnnotationPlacement = new Data_Show.Show(function (v) {
      if (v instanceof AboveNextSymbol) {
          return "^";
      };
      if (v instanceof BelowNextSymbol) {
          return "_";
      };
      if (v instanceof LeftOfNextSymbol) {
          return "<";
      };
      if (v instanceof RightOfNextSymbol) {
          return ">";
      };
      if (v instanceof Discretional) {
          return "@";
      };
      throw new Error("Failed pattern match at Data.Abc (line 123, column 1 - line 128, column 27): " + [ v.constructor.name ]);
  });
  var showAccidental = new Data_Show.Show(function (v) {
      if (v instanceof Sharp) {
          return "^";
      };
      if (v instanceof Flat) {
          return "_";
      };
      if (v instanceof DoubleSharp) {
          return "^^";
      };
      if (v instanceof DoubleFlat) {
          return "__";
      };
      if (v instanceof Natural) {
          return "=";
      };
      if (v instanceof Implicit) {
          return "";
      };
      throw new Error("Failed pattern match at Data.Abc (line 228, column 1 - line 234, column 23): " + [ v.constructor.name ]);
  });
  var showPitch = new Data_Show.Show(function (v) {
      return Data_Show.show(showAccidental)(v.value0.accidental) + Data_String_Common.toLower(Data_Show.show(showPitchClass)(v.value0.pitchClass));
  });
  var middlecOctave = 5;
  var genericPitch = new Data_Generic_Rep.Generic(function (x) {
      return x.value0;
  }, function (x) {
      return new Pitch(x);
  });
  var eqThickness = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Thin && y instanceof Thin) {
              return true;
          };
          if (x instanceof ThinThin && y instanceof ThinThin) {
              return true;
          };
          if (x instanceof ThinThick && y instanceof ThinThick) {
              return true;
          };
          if (x instanceof ThickThin && y instanceof ThickThin) {
              return true;
          };
          if (x instanceof Invisible && y instanceof Invisible) {
              return true;
          };
          return false;
      };
  });
  var eqRepeat = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Begin && y instanceof Begin) {
              return true;
          };
          if (x instanceof End && y instanceof End) {
              return true;
          };
          if (x instanceof BeginAndEnd && y instanceof BeginAndEnd) {
              return true;
          };
          return false;
      };
  });
  var eqPitchCLass = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof A && y instanceof A) {
              return true;
          };
          if (x instanceof B && y instanceof B) {
              return true;
          };
          if (x instanceof C && y instanceof C) {
              return true;
          };
          if (x instanceof D && y instanceof D) {
              return true;
          };
          if (x instanceof E && y instanceof E) {
              return true;
          };
          if (x instanceof F && y instanceof F) {
              return true;
          };
          if (x instanceof G && y instanceof G) {
              return true;
          };
          return false;
      };
  });
  var ordPitchCLass = new Data_Ord.Ord(function () {
      return eqPitchCLass;
  }, function (x) {
      return function (y) {
          if (x instanceof A && y instanceof A) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof A) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof A) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof B && y instanceof B) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof B) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof B) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof C && y instanceof C) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof C) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof C) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof D && y instanceof D) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof D) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof D) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof E && y instanceof E) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof E) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof E) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof F && y instanceof F) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof F) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof F) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof G && y instanceof G) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Abc (line 260, column 1 - line 260, column 48): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Major && y instanceof Major) {
              return true;
          };
          if (x instanceof Minor && y instanceof Minor) {
              return true;
          };
          if (x instanceof Ionian && y instanceof Ionian) {
              return true;
          };
          if (x instanceof Dorian && y instanceof Dorian) {
              return true;
          };
          if (x instanceof Phrygian && y instanceof Phrygian) {
              return true;
          };
          if (x instanceof Lydian && y instanceof Lydian) {
              return true;
          };
          if (x instanceof Mixolydian && y instanceof Mixolydian) {
              return true;
          };
          if (x instanceof Aeolian && y instanceof Aeolian) {
              return true;
          };
          if (x instanceof Locrian && y instanceof Locrian) {
              return true;
          };
          return false;
      };
  });
  var eqAccidental = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Sharp && y instanceof Sharp) {
              return true;
          };
          if (x instanceof Flat && y instanceof Flat) {
              return true;
          };
          if (x instanceof DoubleSharp && y instanceof DoubleSharp) {
              return true;
          };
          if (x instanceof DoubleFlat && y instanceof DoubleFlat) {
              return true;
          };
          if (x instanceof Natural && y instanceof Natural) {
              return true;
          };
          if (x instanceof Implicit && y instanceof Implicit) {
              return true;
          };
          return false;
      };
  });
  var eqPitch = new Data_Eq.Eq(Data_Generic_Rep_Eq.genericEq(genericPitch)(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqArgument(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
      return "pitchClass";
  }))(eqPitchCLass))()(new Data_Symbol.IsSymbol(function () {
      return "accidental";
  }))(eqAccidental))))));
  var ordAccidental = new Data_Ord.Ord(function () {
      return eqAccidental;
  }, function (x) {
      return function (y) {
          if (x instanceof Sharp && y instanceof Sharp) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Sharp) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Sharp) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Flat && y instanceof Flat) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Flat) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Flat) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof DoubleSharp && y instanceof DoubleSharp) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof DoubleSharp) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof DoubleSharp) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof DoubleFlat && y instanceof DoubleFlat) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof DoubleFlat) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof DoubleFlat) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Natural && y instanceof Natural) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Natural) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Natural) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Implicit && y instanceof Implicit) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Abc (line 238, column 1 - line 238, column 48): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var ordPitch = new Data_Ord.Ord(function () {
      return eqPitch;
  }, function (v) {
      return function (v1) {
          var comp1 = Data_Ord.compare(ordPitchCLass)(v.value0.pitchClass)(v1.value0.pitchClass);
          if (comp1 instanceof Data_Ordering.EQ) {
              return Data_Ord.compare(ordAccidental)(v.value0.accidental)(v1.value0.accidental);
          };
          return comp1;
      };
  });
  var enumPitchClass = new Data_Enum.Enum(function () {
      return ordPitchCLass;
  }, function (v) {
      if (v instanceof C) {
          return new Data_Maybe.Just(B.value);
      };
      if (v instanceof D) {
          return new Data_Maybe.Just(C.value);
      };
      if (v instanceof E) {
          return new Data_Maybe.Just(D.value);
      };
      if (v instanceof F) {
          return new Data_Maybe.Just(E.value);
      };
      if (v instanceof G) {
          return new Data_Maybe.Just(F.value);
      };
      if (v instanceof A) {
          return new Data_Maybe.Just(G.value);
      };
      if (v instanceof B) {
          return new Data_Maybe.Just(A.value);
      };
      throw new Error("Failed pattern match at Data.Abc (line 262, column 1 - line 278, column 18): " + [ v.constructor.name ]);
  }, function (v) {
      if (v instanceof C) {
          return new Data_Maybe.Just(D.value);
      };
      if (v instanceof D) {
          return new Data_Maybe.Just(E.value);
      };
      if (v instanceof E) {
          return new Data_Maybe.Just(F.value);
      };
      if (v instanceof F) {
          return new Data_Maybe.Just(G.value);
      };
      if (v instanceof G) {
          return new Data_Maybe.Just(A.value);
      };
      if (v instanceof A) {
          return new Data_Maybe.Just(B.value);
      };
      if (v instanceof B) {
          return new Data_Maybe.Just(C.value);
      };
      throw new Error("Failed pattern match at Data.Abc (line 262, column 1 - line 278, column 18): " + [ v.constructor.name ]);
  });
  exports["Score"] = Score;
  exports["BodyInfo"] = BodyInfo;
  exports["Area"] = Area;
  exports["Book"] = Book;
  exports["Composer"] = Composer;
  exports["Discography"] = Discography;
  exports["FileUrl"] = FileUrl;
  exports["Group"] = Group;
  exports["History"] = History;
  exports["Instruction"] = Instruction;
  exports["Key"] = Key;
  exports["UnitNoteLength"] = UnitNoteLength;
  exports["Meter"] = Meter;
  exports["Macro"] = Macro;
  exports["Notes"] = Notes;
  exports["Origin"] = Origin;
  exports["Parts"] = Parts;
  exports["Tempo"] = Tempo;
  exports["Rhythm"] = Rhythm;
  exports["Remark"] = Remark;
  exports["Source"] = Source;
  exports["SymbolLine"] = SymbolLine;
  exports["Title"] = Title;
  exports["UserDefined"] = UserDefined;
  exports["Voice"] = Voice;
  exports["WordsAfter"] = WordsAfter;
  exports["WordsAligned"] = WordsAligned;
  exports["ReferenceNumber"] = ReferenceNumber;
  exports["Transcription"] = Transcription;
  exports["FieldContinuation"] = FieldContinuation;
  exports["Comment"] = Comment;
  exports["UnsupportedHeader"] = UnsupportedHeader;
  exports["Note"] = Note;
  exports["BrokenRhythmPair"] = BrokenRhythmPair;
  exports["Rest"] = Rest;
  exports["Tuplet"] = Tuplet;
  exports["DecoratedSpace"] = DecoratedSpace;
  exports["Annotation"] = Annotation;
  exports["ChordSymbol"] = ChordSymbol;
  exports["Chord"] = Chord;
  exports["Inline"] = Inline;
  exports["Spacer"] = Spacer;
  exports["Ignore"] = Ignore;
  exports["Continuation"] = Continuation;
  exports["Thin"] = Thin;
  exports["ThinThin"] = ThinThin;
  exports["ThinThick"] = ThinThick;
  exports["ThickThin"] = ThickThin;
  exports["Invisible"] = Invisible;
  exports["Begin"] = Begin;
  exports["End"] = End;
  exports["BeginAndEnd"] = BeginAndEnd;
  exports["Pitch"] = Pitch;
  exports["AboveNextSymbol"] = AboveNextSymbol;
  exports["BelowNextSymbol"] = BelowNextSymbol;
  exports["LeftOfNextSymbol"] = LeftOfNextSymbol;
  exports["RightOfNextSymbol"] = RightOfNextSymbol;
  exports["Discretional"] = Discretional;
  exports["Major"] = Major;
  exports["Minor"] = Minor;
  exports["Ionian"] = Ionian;
  exports["Dorian"] = Dorian;
  exports["Phrygian"] = Phrygian;
  exports["Lydian"] = Lydian;
  exports["Mixolydian"] = Mixolydian;
  exports["Aeolian"] = Aeolian;
  exports["Locrian"] = Locrian;
  exports["Sharp"] = Sharp;
  exports["Flat"] = Flat;
  exports["DoubleSharp"] = DoubleSharp;
  exports["DoubleFlat"] = DoubleFlat;
  exports["Natural"] = Natural;
  exports["Implicit"] = Implicit;
  exports["A"] = A;
  exports["B"] = B;
  exports["C"] = C;
  exports["D"] = D;
  exports["E"] = E;
  exports["F"] = F;
  exports["G"] = G;
  exports["LeftArrow"] = LeftArrow;
  exports["RightArrow"] = RightArrow;
  exports["middlecOctave"] = middlecOctave;
  exports["showAnnotationPlacement"] = showAnnotationPlacement;
  exports["showThickness"] = showThickness;
  exports["eqThickness"] = eqThickness;
  exports["eqRepeat"] = eqRepeat;
  exports["showMode"] = showMode;
  exports["eqMode"] = eqMode;
  exports["showAccidental"] = showAccidental;
  exports["eqAccidental"] = eqAccidental;
  exports["showPitchClass"] = showPitchClass;
  exports["eqPitchCLass"] = eqPitchCLass;
  exports["ordPitchCLass"] = ordPitchCLass;
  exports["enumPitchClass"] = enumPitchClass;
  exports["eqPitch"] = eqPitch;
  exports["ordPitch"] = ordPitch;
  exports["showPitch"] = showPitch;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Abc.Accidentals"] = $PS["Data.Abc.Accidentals"] || {};
  var exports = $PS["Data.Abc.Accidentals"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var lookup = Data_Map_Internal.lookup(Data_Abc.ordPitchCLass);
  var member = function (v) {
      return function (accs) {
          var macc = lookup(v.value0.pitchClass)(accs);
          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqAccidental))(new Data_Maybe.Just(v.value0.accidental))(macc);
      };
  };
  var fromKeySig = function (ks) {
      return new Data_Abc.Pitch({
          pitchClass: ks.pitchClass,
          accidental: ks.accidental
      });
  };
  var fromKeySet = function (ks) {
      var f = function (kar) {
          return new Data_Tuple.Tuple(kar.value0.pitchClass, kar.value0.accidental);
      };
      var tuples = Data_Functor.map(Data_List_Types.functorList)(f)(ks);
      return Data_Map_Internal.fromFoldable(Data_Abc.ordPitchCLass)(Data_List_Types.foldableList)(tuples);
  };
  var implicitInKeySet = function (pc) {
      return function (keyset) {
          return lookup(pc)(fromKeySet(keyset));
      };
  };
  var empty = Data_Map_Internal.empty;
  var add = function (pc) {
      return function (acc) {
          return function (accs) {
              return Data_Map_Internal.insert(Data_Abc.ordPitchCLass)(pc)(acc)(accs);
          };
      };
  };
  exports["empty"] = empty;
  exports["add"] = add;
  exports["lookup"] = lookup;
  exports["member"] = member;
  exports["fromKeySig"] = fromKeySig;
  exports["implicitInKeySet"] = implicitInKeySet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ratio"] = $PS["Data.Ratio"] || {};
  var exports = $PS["Data.Ratio"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];        
  var Ratio = (function () {
      function Ratio(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ratio.create = function (value0) {
          return function (value1) {
              return new Ratio(value0, value1);
          };
      };
      return Ratio;
  })();
  var reduce = function (dictOrd) {
      return function (dictEuclideanRing) {
          return function (n) {
              return function (d) {
                  var g = Data_EuclideanRing.gcd(dictOrd.Eq0())(dictEuclideanRing)(n)(d);
                  var d$prime = Data_EuclideanRing.div(dictEuclideanRing)(d)(g);
                  return new Ratio(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(Data_EuclideanRing.div(dictEuclideanRing)(n)(g))(Data_Ord.signum(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime)), Data_Ord.abs(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime));
              };
          };
      };
  };
  var semiringRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return new Data_Semiring.Semiring(function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Semiring.add(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value1))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value0)))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value0))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
              };
          }, new Ratio(Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()), Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())), new Ratio(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()), Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())));
      };
  };
  var ringRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return new Data_Ring.Ring(function () {
              return semiringRatio(dictOrd)(dictEuclideanRing);
          }, function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Ring.sub((dictEuclideanRing.CommutativeRing0()).Ring0())(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value1))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value0)))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value1));
              };
          });
      };
  };
  var numerator = function (v) {
      return v.value0;
  };
  var denominator = function (v) {
      return v.value1;
  };
  var commutativeRingRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return new Data_CommutativeRing.CommutativeRing(function () {
              return ringRatio(dictOrd)(dictEuclideanRing);
          });
      };
  };
  var euclideanRingRatio = function (dictOrd) {
      return function (dictEuclideanRing) {
          return new Data_EuclideanRing.EuclideanRing(function () {
              return commutativeRingRatio(dictOrd)(dictEuclideanRing);
          }, function (v) {
              return 1;
          }, function (v) {
              return function (v1) {
                  return reduce(dictOrd)(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value0)(v1.value1))(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(v.value1)(v1.value0));
              };
          }, function (v) {
              return function (v1) {
                  return Data_Semiring.zero(semiringRatio(dictOrd)(dictEuclideanRing));
              };
          });
      };
  };
  exports["reduce"] = reduce;
  exports["numerator"] = numerator;
  exports["denominator"] = denominator;
  exports["semiringRatio"] = semiringRatio;
  exports["ringRatio"] = ringRatio;
  exports["euclideanRingRatio"] = euclideanRingRatio;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Abc.Canonical"] = $PS["Data.Abc.Canonical"] || {};
  var exports = $PS["Data.Abc.Canonical"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var voiceProperties = function (properties) {
      var $3 = Data_Map_Internal.size(properties) === 0;
      if ($3) {
          return "";
      };
      var kvs = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(properties);
      var strs = Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return v.value0 + ("=" + v.value1);
      })(kvs);
      return " " + Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(strs);
  };
  var tuplet = function (v) {
      if (v.p === 2 && (v.q === 3 && v.r === 2)) {
          return "(2";
      };
      if (v.p === 3 && (v.q === 2 && v.r === 3)) {
          return "(3";
      };
      if (v.p === 4 && (v.q === 3 && v.r === 4)) {
          return "(4";
      };
      return "(" + (Data_Show.show(Data_Show.showInt)(v.p) + (":" + (Data_Show.show(Data_Show.showInt)(v.q) + (":" + Data_Show.show(Data_Show.showInt)(v.r)))));
  };
  var showRatio = function (r) {
      return Data_Show.show(Data_Show.showInt)(Data_Ratio.numerator(r)) + ("/" + Data_Show.show(Data_Show.showInt)(Data_Ratio.denominator(r)));
  };
  var rightSlurs = function (n) {
      return Data_String_CodeUnits.fromCharArray(Data_Unfoldable.replicate(Data_Unfoldable.unfoldableArray)(n)(")"));
  };
  var ratlist = function (rs) {
      var f = function (r) {
          return function (acc) {
              return showRatio(r) + (" " + acc);
          };
      };
      return Data_String_Common.trim(Data_Foldable.foldr(Data_List_Types.foldableNonEmptyList)(f)("")(rs));
  };
  var tempo = function (t) {
      var text = Data_Maybe.fromMaybe("")(Data_Functor.map(Data_Maybe.functorMaybe)(function (s) {
          return " " + s;
      })(t.marking));
      return ratlist(t.noteLengths) + ("=" + (Data_Show.show(Data_Show.showInt)(t.bpm) + text));
  };
  var pitch = function (octaveNumber) {
      return function (p) {
          var $20 = octaveNumber <= Data_Abc.middlecOctave;
          if ($20) {
              return Data_Show.show(Data_Abc.showPitchClass)(p);
          };
          return Data_String_Common.toLower(Data_Show.show(Data_Abc.showPitchClass)(p));
      };
  };
  var octave = function (i) {
      var octaveAboveMiddleC = Data_Abc.middlecOctave + 1 | 0;
      var $21 = i === Data_Abc.middlecOctave || i === octaveAboveMiddleC;
      if ($21) {
          return "";
      };
      var $22 = i > octaveAboveMiddleC;
      if ($22) {
          return Data_String_CodePoints.take(i - octaveAboveMiddleC | 0)("''''''''''");
      };
      return Data_String_CodePoints.take(Data_Abc.middlecOctave - i | 0)(",,,,,,,,,,");
  };
  var meter = function (ms) {
      if (ms instanceof Data_Maybe.Nothing) {
          return "none";
      };
      if (ms instanceof Data_Maybe.Just) {
          return Data_Show.show(Data_Show.showInt)(ms.value0.value0) + ("/" + Data_Show.show(Data_Show.showInt)(ms.value0.value1));
      };
      throw new Error("Failed pattern match at Data.Abc.Canonical (line 76, column 5 - line 81, column 36): " + [ ms.constructor.name ]);
  };
  var leftSlurs = function (n) {
      return Data_String_CodeUnits.fromCharArray(Data_Unfoldable.replicate(Data_Unfoldable.unfoldableArray)(n)("("));
  };
  var keySignatureAccidental = function (a) {
      if (a instanceof Data_Abc.Sharp) {
          return "#";
      };
      if (a instanceof Data_Abc.Flat) {
          return "b";
      };
      return "";
  };
  var key = function (k) {
      return Data_Show.show(Data_Abc.showPitchClass)(k.pitchClass) + (keySignatureAccidental(k.accidental) + Data_Show.show(Data_Abc.showMode)(k.mode));
  };
  var duration = function (r) {
      var v = new Data_Tuple.Tuple(Data_Ratio.numerator(r), Data_Ratio.denominator(r));
      if (v.value0 === 1 && v.value1 === 1) {
          return "";
      };
      if (v.value0 === 1 && v.value1 === 2) {
          return "/";
      };
      if (v.value1 === 1) {
          return Data_Show.show(Data_Show.showInt)(v.value0);
      };
      return showRatio(r);
  };
  var decorate1 = function (s) {
      var $37 = Data_String_CodePoints.length(s) === 1;
      if ($37) {
          return s;
      };
      return "!" + (s + "! ");
  };
  var decorate = function (ds) {
      return Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(decorate1)(ds);
  };
  var concatenate = Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Semigroup.append(Data_Semigroup.semigroupString))("");
  var keyAccidentals = (function () {
      var $99 = Data_Functor.map(Data_List_Types.functorList)(function (ka) {
          return " " + Data_Show.show(Data_Abc.showPitch)(ka);
      });
      return function ($100) {
          return concatenate($99($100));
      };
  })();
  var header = function (h) {
      if (h instanceof Data_Abc.Area) {
          return "A: " + h.value0;
      };
      if (h instanceof Data_Abc.Book) {
          return "B: " + h.value0;
      };
      if (h instanceof Data_Abc.Composer) {
          return "C: " + h.value0;
      };
      if (h instanceof Data_Abc.Discography) {
          return "D: " + h.value0;
      };
      if (h instanceof Data_Abc.FileUrl) {
          return "F: " + h.value0;
      };
      if (h instanceof Data_Abc.Group) {
          return "G: " + h.value0;
      };
      if (h instanceof Data_Abc.History) {
          return "H: " + h.value0;
      };
      if (h instanceof Data_Abc.Instruction) {
          return "I: " + h.value0;
      };
      if (h instanceof Data_Abc.Key) {
          return "K: " + (key(h.value0.keySignature) + keyAccidentals(h.value0.modifications));
      };
      if (h instanceof Data_Abc.UnitNoteLength) {
          return "L: " + duration(h.value0);
      };
      if (h instanceof Data_Abc.Meter) {
          return "M: " + meter(h.value0);
      };
      if (h instanceof Data_Abc.Macro) {
          return "m: " + h.value0;
      };
      if (h instanceof Data_Abc.Notes) {
          return "N: " + h.value0;
      };
      if (h instanceof Data_Abc.Origin) {
          return "O: " + h.value0;
      };
      if (h instanceof Data_Abc.Parts) {
          return "P: " + h.value0;
      };
      if (h instanceof Data_Abc.Rhythm) {
          return "R: " + h.value0;
      };
      if (h instanceof Data_Abc.Remark) {
          return "r: " + h.value0;
      };
      if (h instanceof Data_Abc.Source) {
          return "S: " + h.value0;
      };
      if (h instanceof Data_Abc.Title) {
          return "T: " + h.value0;
      };
      if (h instanceof Data_Abc.Tempo) {
          return "Q: " + tempo(h.value0);
      };
      if (h instanceof Data_Abc.UserDefined) {
          return "U: " + h.value0;
      };
      if (h instanceof Data_Abc.Voice) {
          return "V: " + (h.value0.id + voiceProperties(h.value0.properties));
      };
      if (h instanceof Data_Abc.WordsAfter) {
          return "W: " + h.value0;
      };
      if (h instanceof Data_Abc.WordsAligned) {
          return "w: " + h.value0;
      };
      if (h instanceof Data_Abc.ReferenceNumber) {
          return "X: " + Data_Maybe.maybe("")(Data_Show.show(Data_Show.showInt))(h.value0);
      };
      if (h instanceof Data_Abc.Transcription) {
          return "Z: " + h.value0;
      };
      if (h instanceof Data_Abc.FieldContinuation) {
          return "+: " + h.value0;
      };
      if (h instanceof Data_Abc.Comment) {
          return "%" + h.value0;
      };
      return "";
  };
  var tuneHeaders = function (hs) {
      var f = function (h) {
          return function (acc) {
              return header(h) + ("\x0d\x0a" + acc);
          };
      };
      return Data_Foldable.foldr(Data_List_Types.foldableList)(f)("")(hs);
  };
  var broken = function (b) {
      if (b instanceof Data_Abc.LeftArrow) {
          return Data_String_CodePoints.take(b.value0)("<<<<<<<<<<");
      };
      if (b instanceof Data_Abc.RightArrow) {
          return Data_String_CodePoints.take(b.value0)(">>>>>>>>>>");
      };
      throw new Error("Failed pattern match at Data.Abc.Canonical (line 264, column 5 - line 269, column 36): " + [ b.constructor.name ]);
  };
  var barType = function (b) {
      var lines = Data_Show.show(Data_Abc.showThickness)(b.thickness);
      var it = Data_Maybe.fromMaybe("")(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Show.show(Data_Show.showInt))(b.iteration));
      if (b.repeat instanceof Data_Maybe.Nothing) {
          return lines + it;
      };
      if (b.repeat instanceof Data_Maybe.Just && b.repeat.value0 instanceof Data_Abc.Begin) {
          return lines + ":";
      };
      if (b.repeat instanceof Data_Maybe.Just && b.repeat.value0 instanceof Data_Abc.End) {
          return ":" + (lines + it);
      };
      if (b.repeat instanceof Data_Maybe.Just && b.repeat.value0 instanceof Data_Abc.BeginAndEnd) {
          return ":" + (lines + ":");
      };
      throw new Error("Failed pattern match at Data.Abc.Canonical (line 243, column 9 - line 254, column 36): " + [ b.repeat.constructor.name ]);
  };
  var abcRest = function (r) {
      return "z" + duration(r.duration);
  };
  var abcNote = function (a) {
      var tie = (function () {
          if (a.tied) {
              return "-";
          };
          return "";
      })();
      return Data_Show.show(Data_Abc.showAccidental)(a.accidental) + (pitch(a.octave)(a.pitchClass) + (octave(a.octave) + (duration(a.duration) + tie)));
  };
  var notes = function (ns) {
      var f = function (a) {
          return function (acc) {
              return abcNote(a) + acc;
          };
      };
      return Data_Foldable.foldr(Data_List_Types.foldableNonEmptyList)(f)("")(ns);
  };
  var grace = function (g) {
      return "{" + (notes(g.notes) + "}");
  };
  var maybeGrace = function (mGrace) {
      return Data_Maybe.fromMaybe("")(Data_Functor.map(Data_Maybe.functorMaybe)(grace)(mGrace));
  };
  var graceableNote = function (gn) {
      return maybeGrace(gn.maybeGrace) + (leftSlurs(gn.leftSlurs) + (decorate(gn.decorations) + (abcNote(gn.abcNote) + rightSlurs(gn.rightSlurs))));
  };
  var restsOrNotes = function (rns) {
      var f = function (rn) {
          return function (acc) {
              if (rn instanceof Data_Either.Left) {
                  return abcRest(rn.value0) + acc;
              };
              if (rn instanceof Data_Either.Right) {
                  return graceableNote(rn.value0) + acc;
              };
              throw new Error("Failed pattern match at Data.Abc.Canonical (line 196, column 7 - line 200, column 35): " + [ rn.constructor.name ]);
          };
      };
      return Data_Foldable.foldr(Data_List_Types.foldableNonEmptyList)(f)("")(rns);
  };
  var abcChord = function (a) {
      return "[" + (notes(a.notes) + ("]" + duration(a.duration)));
  };
  var music = function (m) {
      if (m instanceof Data_Abc.Note) {
          return graceableNote(m.value0);
      };
      if (m instanceof Data_Abc.BrokenRhythmPair) {
          return graceableNote(m.value0) + (broken(m.value1) + graceableNote(m.value2));
      };
      if (m instanceof Data_Abc.Rest) {
          return abcRest(m.value0);
      };
      if (m instanceof Data_Abc.Tuplet) {
          return maybeGrace(m.value0) + (tuplet(m.value1) + (restsOrNotes(m.value2) + " "));
      };
      if (m instanceof Data_Abc.DecoratedSpace) {
          return decorate(m.value0) + "y";
      };
      if (m instanceof Data_Abc.Annotation) {
          return "\"" + (Data_Show.show(Data_Abc.showAnnotationPlacement)(m.value0) + (m.value1 + "\""));
      };
      if (m instanceof Data_Abc.ChordSymbol) {
          return m.value0;
      };
      if (m instanceof Data_Abc.Chord) {
          return abcChord(m.value0);
      };
      if (m instanceof Data_Abc.Inline) {
          return "[" + (header(m.value0) + "]");
      };
      if (m instanceof Data_Abc.Spacer) {
          return " ";
      };
      if (m instanceof Data_Abc.Ignore) {
          return "";
      };
      if (m instanceof Data_Abc.Continuation) {
          return "\\" + (m.value0 + "\x0d\x0a");
      };
      throw new Error("Failed pattern match at Data.Abc.Canonical (line 273, column 5 - line 309, column 40): " + [ m.constructor.name ]);
  };
  var bar = function (b) {
      var f = function (m) {
          return function (acc) {
              return music(m) + acc;
          };
      };
      return barType(b.startLine) + Data_Foldable.foldr(Data_List_Types.foldableList)(f)("")(b.music);
  };
  var bars = function (bs) {
      var f = function (b) {
          return function (acc) {
              return bar(b) + acc;
          };
      };
      return Data_Foldable.foldr(Data_List_Types.foldableList)(f)("")(bs);
  };
  var bodyPart = function (bp) {
      if (bp instanceof Data_Abc.Score) {
          return bars(bp.value0);
      };
      if (bp instanceof Data_Abc.BodyInfo) {
          return header(bp.value0);
      };
      throw new Error("Failed pattern match at Data.Abc.Canonical (line 413, column 5 - line 418, column 21): " + [ bp.constructor.name ]);
  };
  var tuneBody = function (b) {
      var f = function (bp) {
          return function (acc) {
              return bodyPart(bp) + ("\x0d\x0a" + acc);
          };
      };
      return Data_Foldable.foldr(Data_List_Types.foldableList)(f)("")(b);
  };
  var fromTune = function (abcTune) {
      return tuneHeaders(abcTune.headers) + tuneBody(abcTune.body);
  };
  exports["fromTune"] = fromTune;
  exports["keySignatureAccidental"] = keySignatureAccidental;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Abc.KeySignature"] = $PS["Data.Abc.KeySignature"] || {};
  var exports = $PS["Data.Abc.KeySignature"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Array = $PS["Data.Array"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var White = (function () {
      function White(value0) {
          this.value0 = value0;
      };
      White.create = function (value0) {
          return new White(value0);
      };
      return White;
  })();
  var Black = (function () {
      function Black(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Black.create = function (value0) {
          return function (value1) {
              return new Black(value0, value1);
          };
      };
      return Black;
  })();
  var successor = function (pc) {
      return Data_Maybe.fromJust()(Data_Enum.succ(Data_Abc.enumPitchClass)(pc));
  }; 
  var rotate = function (n) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.drop(n)(xs))(Data_Array.take(n)(xs));
      };
  };
  var renameBNatural = (function () {
      var f = function (v) {
          var $41 = Data_Eq.eq(Data_Abc.eqPitchCLass)(v.value0.pitchClass)(Data_Abc.B.value) && Data_Eq.eq(Data_Abc.eqAccidental)(v.value0.accidental)(Data_Abc.Natural.value);
          if ($41) {
              return new Data_Abc.Pitch({
                  pitchClass: Data_Abc.C.value,
                  accidental: Data_Abc.Flat.value
              });
          };
          return new Data_Abc.Pitch(v.value0);
      };
      return Data_Functor.map(Data_List_Types.functorList)(f);
  })();
  var predecessor = function (pc) {
      return Data_Maybe.fromJust()(Data_Enum.pred(Data_Abc.enumPitchClass)(pc));
  };
  var pitchNumbers = new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.C.value,
      accidental: Data_Abc.Flat.value
  }), 11), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.C.value,
      accidental: Data_Abc.Natural.value
  }), 0), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.C.value,
      accidental: Data_Abc.Implicit.value
  }), 0), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.C.value,
      accidental: Data_Abc.Sharp.value
  }), 1), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.C.value,
      accidental: Data_Abc.DoubleSharp.value
  }), 2), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.D.value,
      accidental: Data_Abc.DoubleFlat.value
  }), 0), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.D.value,
      accidental: Data_Abc.Flat.value
  }), 1), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.D.value,
      accidental: Data_Abc.Natural.value
  }), 2), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.D.value,
      accidental: Data_Abc.Implicit.value
  }), 2), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.D.value,
      accidental: Data_Abc.Sharp.value
  }), 3), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.D.value,
      accidental: Data_Abc.DoubleSharp.value
  }), 4), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.E.value,
      accidental: Data_Abc.DoubleFlat.value
  }), 2), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.E.value,
      accidental: Data_Abc.Flat.value
  }), 3), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.E.value,
      accidental: Data_Abc.Natural.value
  }), 4), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.E.value,
      accidental: Data_Abc.Implicit.value
  }), 4), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.E.value,
      accidental: Data_Abc.Sharp.value
  }), 5), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.E.value,
      accidental: Data_Abc.DoubleSharp.value
  }), 6), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.F.value,
      accidental: Data_Abc.Flat.value
  }), 4), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.F.value,
      accidental: Data_Abc.Natural.value
  }), 5), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.F.value,
      accidental: Data_Abc.Implicit.value
  }), 5), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.F.value,
      accidental: Data_Abc.Sharp.value
  }), 6), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.F.value,
      accidental: Data_Abc.DoubleSharp.value
  }), 7), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.G.value,
      accidental: Data_Abc.DoubleFlat.value
  }), 5), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.G.value,
      accidental: Data_Abc.Flat.value
  }), 6), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.G.value,
      accidental: Data_Abc.Natural.value
  }), 7), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.G.value,
      accidental: Data_Abc.Implicit.value
  }), 7), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.G.value,
      accidental: Data_Abc.Sharp.value
  }), 8), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.G.value,
      accidental: Data_Abc.DoubleSharp.value
  }), 9), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.A.value,
      accidental: Data_Abc.DoubleFlat.value
  }), 7), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.A.value,
      accidental: Data_Abc.Flat.value
  }), 8), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.A.value,
      accidental: Data_Abc.Natural.value
  }), 9), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.A.value,
      accidental: Data_Abc.Implicit.value
  }), 9), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.A.value,
      accidental: Data_Abc.Sharp.value
  }), 10), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.A.value,
      accidental: Data_Abc.DoubleSharp.value
  }), 11), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.B.value,
      accidental: Data_Abc.DoubleFlat.value
  }), 9), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.B.value,
      accidental: Data_Abc.Flat.value
  }), 10), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.B.value,
      accidental: Data_Abc.Natural.value
  }), 11), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.B.value,
      accidental: Data_Abc.Implicit.value
  }), 11), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.B.value,
      accidental: Data_Abc.Sharp.value
  }), 0), new Data_List_Types.Cons(new Data_Tuple.Tuple(new Data_Abc.Pitch({
      pitchClass: Data_Abc.B.value,
      accidental: Data_Abc.DoubleSharp.value
  }), 1), Data_List_Types.Nil.value))))))))))))))))))))))))))))))))))))))));
  var pianoOctave = [ new White(Data_Abc.C.value), new Black(Data_Abc.C.value, Data_Abc.D.value), new White(Data_Abc.D.value), new Black(Data_Abc.D.value, Data_Abc.E.value), new White(Data_Abc.E.value), new White(Data_Abc.F.value), new Black(Data_Abc.F.value, Data_Abc.G.value), new White(Data_Abc.G.value), new Black(Data_Abc.G.value, Data_Abc.A.value), new White(Data_Abc.A.value), new Black(Data_Abc.A.value, Data_Abc.B.value), new White(Data_Abc.B.value) ];
  var pianoKeyToPitch = function (isFlatCtx) {
      return function (pianoKey) {
          var convertPianoKey = function (flatCtx) {
              return function (v) {
                  if (v instanceof White) {
                      return new Data_Abc.Pitch({
                          pitchClass: v.value0,
                          accidental: Data_Abc.Natural.value
                      });
                  };
                  if (v instanceof Black) {
                      if (flatCtx) {
                          return new Data_Abc.Pitch({
                              pitchClass: v.value1,
                              accidental: Data_Abc.Flat.value
                          });
                      };
                      return new Data_Abc.Pitch({
                          pitchClass: v.value0,
                          accidental: Data_Abc.Sharp.value
                      });
                  };
                  throw new Error("Failed pattern match at Data.Abc.KeySignature (line 397, column 5 - line 397, column 52): " + [ flatCtx.constructor.name, v.constructor.name ]);
              };
          };
          return convertPianoKey(isFlatCtx)(pianoKey);
      };
  };
  var notesInChromaticScale = 12;
  var modifyKeySet = function (newP) {
      return function (ks) {
          var noMatchPC = function (pc) {
              return function (v) {
                  return Data_Eq.notEq(Data_Abc.eqPitchCLass)(pc)(v.value0.pitchClass);
              };
          };
          if (newP.value0.accidental instanceof Data_Abc.Natural) {
              return ks;
          };
          return new Data_List_Types.Cons(newP, Data_List.filter(noMatchPC(newP.value0.pitchClass))(ks));
      };
  };
  var isFSharp = function (ks) {
      return Data_Eq.eq(Data_Abc.eqPitchCLass)(ks.pitchClass)(Data_Abc.F.value) && (Data_Eq.eq(Data_Abc.eqAccidental)(ks.accidental)(Data_Abc.Sharp.value) && (Data_Eq.eq(Data_Abc.eqMode)(ks.mode)(Data_Abc.Major.value) || Data_Eq.eq(Data_Abc.eqMode)(ks.mode)(Data_Abc.Ionian.value)));
  };
  var inKeySet = function (p) {
      return function (ks) {
          return Data_Foldable.elem(Data_List_Types.foldableList)(Data_Abc.eqPitch)(p)(ks);
      };
  };
  var fSharpScale = new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.F.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.G.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.A.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.B.value,
      accidental: Data_Abc.Natural.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.C.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.D.value,
      accidental: Data_Abc.Sharp.value
  }), new Data_List_Types.Cons(new Data_Abc.Pitch({
      pitchClass: Data_Abc.E.value,
      accidental: Data_Abc.Sharp.value
  }), Data_List_Types.Nil.value)))))));
  var fSharpKeySet = Data_List.filter(function (v) {
      return Data_Eq.eq(Data_Abc.eqAccidental)(v.value0.accidental)(Data_Abc.Sharp.value);
  })(fSharpScale);
  var eqPianoKey = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof White && y instanceof White) {
              return Data_Eq.eq(Data_Abc.eqPitchCLass)(x.value0)(y.value0);
          };
          if (x instanceof Black && y instanceof Black) {
              return Data_Eq.eq(Data_Abc.eqPitchCLass)(x.value0)(y.value0) && Data_Eq.eq(Data_Abc.eqPitchCLass)(x.value1)(y.value1);
          };
          return false;
      };
  });
  var distanceFromMajor = function (mode) {
      if (mode instanceof Data_Abc.Dorian) {
          return 10;
      };
      if (mode instanceof Data_Abc.Phrygian) {
          return 8;
      };
      if (mode instanceof Data_Abc.Lydian) {
          return 7;
      };
      if (mode instanceof Data_Abc.Mixolydian) {
          return 5;
      };
      if (mode instanceof Data_Abc.Aeolian) {
          return 3;
      };
      if (mode instanceof Data_Abc.Minor) {
          return 3;
      };
      if (mode instanceof Data_Abc.Locrian) {
          return 1;
      };
      if (mode instanceof Data_Abc.Major) {
          return 0;
      };
      if (mode instanceof Data_Abc.Ionian) {
          return 0;
      };
      throw new Error("Failed pattern match at Data.Abc.KeySignature (line 377, column 3 - line 386, column 16): " + [ mode.constructor.name ]);
  };
  var distanceFromC = function (keySig) {
      return Data_Maybe.fromMaybe(0)(Data_Array.elemIndex(eqPianoKey)(keySig)(pianoOctave));
  };
  var diatonicScaleOffsets = [ 0, 2, 4, 5, 7, 9, 11 ];
  var pianoKeyScale = function (keySig) {
      return function (mode) {
          var shift = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(distanceFromC(keySig) + distanceFromMajor(mode) | 0)(notesInChromaticScale);
          var scale = rotate(shift)(pianoOctave);
          var tonic = Data_Maybe.fromMaybe(new White(Data_Abc.C.value))(Data_Array.head(scale));
          var lookup = function (key) {
              return Data_Maybe.fromMaybe(new White(Data_Abc.C.value))(Data_Array.index(scale)(key));
          };
          var keys = Data_Functor.map(Data_Functor.functorArray)(lookup)(diatonicScaleOffsets);
          return new Data_Tuple.Tuple(tonic, keys);
      };
  };
  var chromaticScaleMap = Data_Map_Internal.fromFoldable(Data_Abc.ordPitch)(Data_List_Types.foldableList)(pitchNumbers);
  var pitchNumber = function (v) {
      var target = (function () {
          if (v.value0.accidental instanceof Data_Abc.Implicit) {
              return new Data_Abc.Pitch({
                  pitchClass: v.value0.pitchClass,
                  accidental: Data_Abc.Natural.value
              });
          };
          return new Data_Abc.Pitch(v.value0);
      })();
      return Data_Maybe.fromMaybe(0)(Data_Map_Internal.lookup(Data_Abc.ordPitch)(target)(chromaticScaleMap));
  };
  var buildPianoKey = function (v) {
      if (v.value0.accidental instanceof Data_Abc.Flat) {
          return new Black(predecessor(v.value0.pitchClass), v.value0.pitchClass);
      };
      if (v.value0.accidental instanceof Data_Abc.Sharp) {
          return new Black(v.value0.pitchClass, successor(v.value0.pitchClass));
      };
      return new White(v.value0.pitchClass);
  };
  var diatonicScale = function (ks) {
      var pianoKeySignature = buildPianoKey(new Data_Abc.Pitch({
          pitchClass: ks.pitchClass,
          accidental: ks.accidental
      }));
      var v = pianoKeyScale(pianoKeySignature)(ks.mode);
      var isFlatCtx = (function () {
          if (v.value0 instanceof White && v.value0.value0 instanceof Data_Abc.F) {
              return true;
          };
          if (v.value0 instanceof White) {
              return false;
          };
          return true;
      })();
      var basicKeySet = Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(Data_Functor.map(Data_Functor.functorArray)(pianoKeyToPitch(isFlatCtx))(v.value1));
      var $91 = isFSharp(ks);
      if ($91) {
          return fSharpScale;
      };
      if (v.value0 instanceof Black && (v.value0.value0 instanceof Data_Abc.F && v.value0.value1 instanceof Data_Abc.G)) {
          return renameBNatural(basicKeySet);
      };
      return basicKeySet;
  };
  var normaliseModalKey = function (ks) {
      var pianoKeySignature = buildPianoKey(new Data_Abc.Pitch({
          pitchClass: ks.pitchClass,
          accidental: ks.accidental
      }));
      var v = pianoKeyScale(pianoKeySignature)(ks.mode);
      var isFlatCtx = Data_Eq.eq(Data_Abc.eqAccidental)(ks.accidental)(Data_Abc.Flat.value);
      var v1 = pianoKeyToPitch(isFlatCtx)(v.value0);
      return {
          pitchClass: v1.value0.pitchClass,
          accidental: v1.value0.accidental,
          mode: Data_Abc.Major.value
      };
  };
  var boundedIndex = function (i) {
      var newPos = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(notesInChromaticScale);
      var $102 = newPos < 0;
      if ($102) {
          return notesInChromaticScale + newPos | 0;
      };
      return newPos;
  };
  var transposeKeyAccidentalBy = function (interval) {
      return function (v) {
          var pianoKey = buildPianoKey(new Data_Abc.Pitch(v.value0));
          var keyPos = Data_Maybe.fromMaybe(0)(Data_Array.elemIndex(eqPianoKey)(pianoKey)(pianoOctave));
          var newPos = boundedIndex(keyPos + interval | 0);
          var newPianoKey = Data_Maybe.fromMaybe(new White(Data_Abc.C.value))(Data_Array.index(pianoOctave)(newPos));
          var isFlatCtx = Data_Eq.eq(Data_Abc.eqAccidental)(v.value0.accidental)(Data_Abc.Flat.value);
          return pianoKeyToPitch(isFlatCtx)(newPianoKey);
      };
  };
  var transposeKeySignatureBy = function (interval) {
      return function (mks) {
          var pianoKey = buildPianoKey(new Data_Abc.Pitch({
              pitchClass: mks.keySignature.pitchClass,
              accidental: mks.keySignature.accidental
          }));
          var keyPos = Data_Maybe.fromMaybe(0)(Data_Array.elemIndex(eqPianoKey)(pianoKey)(pianoOctave));
          var newPos = boundedIndex(keyPos + interval | 0);
          var newPianoKey = Data_Maybe.fromMaybe(new White(Data_Abc.C.value))(Data_Array.index(pianoOctave)(newPos));
          var isFlatCtx = Data_Eq.eq(Data_Abc.eqAccidental)(mks.keySignature.accidental)(Data_Abc.Flat.value);
          var v = pianoKeyToPitch(isFlatCtx)(newPianoKey);
          var newks = {
              pitchClass: v.value0.pitchClass,
              accidental: v.value0.accidental,
              mode: mks.keySignature.mode
          };
          var modifications = Data_Functor.map(Data_List_Types.functorList)(transposeKeyAccidentalBy(interval))(mks.modifications);
          return {
              keySignature: newks,
              modifications: modifications
          };
      };
  };
  var blackKeySet = function (keySig) {
      return function (mode) {
          var v = pianoKeyScale(keySig)(mode);
          var isBlackKey = function (v1) {
              if (v1 instanceof White) {
                  return false;
              };
              if (v1 instanceof Black) {
                  return true;
              };
              throw new Error("Failed pattern match at Data.Abc.KeySignature (line 340, column 5 - line 340, column 38): " + [ v1.constructor.name ]);
          };
          return Data_Tuple.Tuple.create(v.value0)(Data_Array.filter(isBlackKey)(v.value1));
      };
  };
  var keySet = function (ks) {
      var pianoKeySignature = buildPianoKey(new Data_Abc.Pitch({
          pitchClass: ks.pitchClass,
          accidental: ks.accidental
      }));
      var v = blackKeySet(pianoKeySignature)(ks.mode);
      var isFlatCtx = (function () {
          if (v.value0 instanceof White && v.value0.value0 instanceof Data_Abc.F) {
              return true;
          };
          if (v.value0 instanceof White) {
              return false;
          };
          return true;
      })();
      var basicKeySet = Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(Data_Functor.map(Data_Functor.functorArray)(pianoKeyToPitch(isFlatCtx))(v.value1));
      var $119 = isFSharp(ks);
      if ($119) {
          return fSharpKeySet;
      };
      if (v.value0 instanceof Black && (v.value0.value0 instanceof Data_Abc.F && v.value0.value1 instanceof Data_Abc.G)) {
          return new Data_List_Types.Cons(new Data_Abc.Pitch({
              pitchClass: Data_Abc.C.value,
              accidental: Data_Abc.Flat.value
          }), basicKeySet);
      };
      return basicKeySet;
  };
  var isCOrSharpKey = function (ksig) {
      var kset = keySet(ksig);
      var isFlat = function (v) {
          return Data_Eq.eq(Data_Abc.eqAccidental)(v.value0.accidental)(Data_Abc.Flat.value);
      };
      return Data_List["null"](Data_List.filter(isFlat)(kset));
  };
  var modifiedKeySet = function (ksm) {
      var kSet = keySet(ksm.keySignature);
      var $127 = Data_List["null"](ksm.modifications);
      if ($127) {
          return kSet;
      };
      return Data_Foldable.foldr(Data_List_Types.foldableList)(modifyKeySet)(kSet)(ksm.modifications);
  };
  exports["notesInChromaticScale"] = notesInChromaticScale;
  exports["diatonicScale"] = diatonicScale;
  exports["keySet"] = keySet;
  exports["modifiedKeySet"] = modifiedKeySet;
  exports["isCOrSharpKey"] = isCOrSharpKey;
  exports["normaliseModalKey"] = normaliseModalKey;
  exports["inKeySet"] = inKeySet;
  exports["transposeKeySignatureBy"] = transposeKeySignatureBy;
  exports["pitchNumbers"] = pitchNumbers;
  exports["pitchNumber"] = pitchNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Rational"] = $PS["Data.Rational"] || {};
  var exports = $PS["Data.Rational"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ratio = $PS["Data.Ratio"];                
  var toNumber = function (x) {
      return Data_Int.toNumber(Data_Ratio.numerator(x)) / Data_Int.toNumber(Data_Ratio.denominator(x));
  };
  var fromInt = function (i) {
      return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(i)(1);
  };
  exports["toNumber"] = toNumber;
  exports["fromInt"] = fromInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Abc.Metadata"] = $PS["Data.Abc.Metadata"] || {};
  var exports = $PS["Data.Abc.Metadata"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_Rational = $PS["Data.Rational"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var normaliseChord = function (abcChord) {
      var v = Data_Rational.toNumber(abcChord.duration);
      if (v === 1.0) {
          return abcChord;
      };
      var notes = Data_Functor.map(Data_List_Types.functorNonEmptyList)(function (n) {
          return {
              duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n.duration)(abcChord.duration),
              accidental: n.accidental,
              octave: n.octave,
              pitchClass: n.pitchClass,
              tied: n.tied
          };
      })(abcChord.notes);
      return {
          notes: notes,
          duration: Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(1)
      };
  };
  var isEmptyStave = function (bars) {
      var isEmptyBar = function (bar) {
          var f = function (music$prime) {
              if (music$prime instanceof Data_Abc.Spacer) {
                  return true;
              };
              if (music$prime instanceof Data_Abc.Ignore) {
                  return true;
              };
              if (music$prime instanceof Data_Abc.Continuation) {
                  return true;
              };
              return false;
          };
          return Data_Foldable.all(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(bar.music) || Data_List["null"](bar.music);
      };
      return Data_Foldable.all(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(isEmptyBar)(bars);
  };
  var getHeaderMap = function (t) {
      var f = function (h) {
          if (h instanceof Data_Abc.Area) {
              return new Data_Tuple.Tuple("A", h);
          };
          if (h instanceof Data_Abc.Book) {
              return new Data_Tuple.Tuple("B", h);
          };
          if (h instanceof Data_Abc.Composer) {
              return new Data_Tuple.Tuple("C", h);
          };
          if (h instanceof Data_Abc.Discography) {
              return new Data_Tuple.Tuple("D", h);
          };
          if (h instanceof Data_Abc.FileUrl) {
              return new Data_Tuple.Tuple("F", h);
          };
          if (h instanceof Data_Abc.Group) {
              return new Data_Tuple.Tuple("G", h);
          };
          if (h instanceof Data_Abc.History) {
              return new Data_Tuple.Tuple("H", h);
          };
          if (h instanceof Data_Abc.Instruction) {
              return new Data_Tuple.Tuple("I", h);
          };
          if (h instanceof Data_Abc.Key) {
              return new Data_Tuple.Tuple("K", h);
          };
          if (h instanceof Data_Abc.UnitNoteLength) {
              return new Data_Tuple.Tuple("L", h);
          };
          if (h instanceof Data_Abc.Meter) {
              return new Data_Tuple.Tuple("M", h);
          };
          if (h instanceof Data_Abc.Macro) {
              return new Data_Tuple.Tuple("m", h);
          };
          if (h instanceof Data_Abc.Notes) {
              return new Data_Tuple.Tuple("N", h);
          };
          if (h instanceof Data_Abc.Origin) {
              return new Data_Tuple.Tuple("O", h);
          };
          if (h instanceof Data_Abc.Parts) {
              return new Data_Tuple.Tuple("P", h);
          };
          if (h instanceof Data_Abc.Tempo) {
              return new Data_Tuple.Tuple("Q", h);
          };
          if (h instanceof Data_Abc.Rhythm) {
              return new Data_Tuple.Tuple("R", h);
          };
          if (h instanceof Data_Abc.Remark) {
              return new Data_Tuple.Tuple("r", h);
          };
          if (h instanceof Data_Abc.Source) {
              return new Data_Tuple.Tuple("S", h);
          };
          if (h instanceof Data_Abc.SymbolLine) {
              return new Data_Tuple.Tuple("s", h);
          };
          if (h instanceof Data_Abc.Title) {
              return new Data_Tuple.Tuple("T", h);
          };
          if (h instanceof Data_Abc.UserDefined) {
              return new Data_Tuple.Tuple("U", h);
          };
          if (h instanceof Data_Abc.Voice) {
              return new Data_Tuple.Tuple("V", h);
          };
          if (h instanceof Data_Abc.WordsAfter) {
              return new Data_Tuple.Tuple("W", h);
          };
          if (h instanceof Data_Abc.WordsAligned) {
              return new Data_Tuple.Tuple("w", h);
          };
          if (h instanceof Data_Abc.ReferenceNumber) {
              return new Data_Tuple.Tuple("X", h);
          };
          if (h instanceof Data_Abc.Transcription) {
              return new Data_Tuple.Tuple("Z", h);
          };
          if (h instanceof Data_Abc.FieldContinuation) {
              return new Data_Tuple.Tuple("+", h);
          };
          if (h instanceof Data_Abc.Comment) {
              return new Data_Tuple.Tuple("-", h);
          };
          if (h instanceof Data_Abc.UnsupportedHeader) {
              return new Data_Tuple.Tuple("u", h);
          };
          throw new Error("Failed pattern match at Data.Abc.Metadata (line 55, column 7 - line 144, column 22): " + [ h.constructor.name ]);
      };
      var annotatedHeaders = Data_Functor.map(Data_List_Types.functorList)(f)(Data_List.reverse(t.headers));
      return Data_Map_Internal.fromFoldable(Data_Ord.ordChar)(Data_List_Types.foldableList)(annotatedHeaders);
  };
  var getHeader = function (code) {
      return function (t) {
          return Data_Map_Internal.lookup(Data_Ord.ordChar)(code)(getHeaderMap(t));
      };
  };
  var getKeySig = function (tune) {
      var v = getHeader("K")(tune);
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Abc.Key) {
          return new Data_Maybe.Just(v.value0.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var getMeter = function (tune) {
      var v = getHeader("M")(tune);
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Abc.Meter) {
          return new Data_Maybe.Just(Data_Maybe.fromMaybe(new Data_Tuple.Tuple(4, 4))(v.value0.value0));
      };
      return Data_Maybe.Nothing.value;
  };
  var getTempoSig = function (tune) {
      var v = getHeader("Q")(tune);
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Abc.Tempo) {
          return new Data_Maybe.Just(v.value0.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var getTitle = function (tune) {
      var v = getHeader("T")(tune);
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Abc.Title) {
          return new Data_Maybe.Just(v.value0.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var getUnitNoteLength = function (tune) {
      var v = getHeader("L")(tune);
      if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Abc.UnitNoteLength) {
          return new Data_Maybe.Just(v.value0.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var dotFactor = function (i) {
      if (i === 1) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(2);
      };
      if (i === 2) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(3)(4);
      };
      if (i === 3) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(7)(8);
      };
      return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(0)(1);
  };
  exports["getHeader"] = getHeader;
  exports["getKeySig"] = getKeySig;
  exports["getMeter"] = getMeter;
  exports["getTempoSig"] = getTempoSig;
  exports["getTitle"] = getTitle;
  exports["getUnitNoteLength"] = getUnitNoteLength;
  exports["dotFactor"] = dotFactor;
  exports["normaliseChord"] = normaliseChord;
  exports["isEmptyStave"] = isEmptyStave;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Abc.Midi.RepeatSections"] = $PS["Data.Abc.Midi.RepeatSections"] || {};
  var exports = $PS["Data.Abc.Midi.RepeatSections"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = $PS["Data.Generic.Rep.Eq"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Section = function (x) {
      return x;
  };
  var newtypeSection = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Section);
  var secondRepeat = function (pos) {
      return function (s) {
          var v = Data_Newtype.unwrap(newtypeSection)(s);
          return {
              start: v.start,
              firstEnding: v.firstEnding,
              secondEnding: new Data_Maybe.Just(pos),
              end: v.end,
              isRepeated: v.isRepeated
          };
      };
  };
  var setEndPos = function (pos) {
      return function (s) {
          var v = Data_Newtype.unwrap(newtypeSection)(s);
          return {
              start: v.start,
              firstEnding: v.firstEnding,
              secondEnding: v.secondEnding,
              end: new Data_Maybe.Just(pos),
              isRepeated: v.isRepeated
          };
      };
  };
  var setRepeated = function (s) {
      var v = Data_Newtype.unwrap(newtypeSection)(s);
      return {
          start: v.start,
          firstEnding: v.firstEnding,
          secondEnding: v.secondEnding,
          end: v.end,
          isRepeated: true
      };
  };
  var newSection = function (pos) {
      return function (isRepeated) {
          return {
              start: new Data_Maybe.Just(pos),
              firstEnding: Data_Maybe.Nothing.value,
              secondEnding: Data_Maybe.Nothing.value,
              end: new Data_Maybe.Just(0),
              isRepeated: isRepeated
          };
      };
  };
  var nullSection = newSection(0)(false);
  var initialRepeatState = {
      current: nullSection,
      sections: Data_List_Types.Nil.value
  };
  var hasFirstEnding = function (s) {
      return Data_Maybe.isJust((Data_Newtype.unwrap(newtypeSection)(s)).firstEnding);
  };
  var genericSection = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });   
  var firstRepeat = function (pos) {
      return function (s) {
          var v = Data_Newtype.unwrap(newtypeSection)(s);
          return {
              start: v.start,
              firstEnding: new Data_Maybe.Just(pos),
              secondEnding: v.secondEnding,
              end: v.end,
              isRepeated: v.isRepeated
          };
      };
  };
  var eqSection = new Data_Eq.Eq(Data_Generic_Rep_Eq.genericEq(genericSection)(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqArgument(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
      return "start";
  }))(Data_Maybe.eqMaybe(Data_Eq.eqInt)))()(new Data_Symbol.IsSymbol(function () {
      return "secondEnding";
  }))(Data_Maybe.eqMaybe(Data_Eq.eqInt)))()(new Data_Symbol.IsSymbol(function () {
      return "isRepeated";
  }))(Data_Eq.eqBoolean))()(new Data_Symbol.IsSymbol(function () {
      return "firstEnding";
  }))(Data_Maybe.eqMaybe(Data_Eq.eqInt)))()(new Data_Symbol.IsSymbol(function () {
      return "end";
  }))(Data_Maybe.eqMaybe(Data_Eq.eqInt)))))));
  var isNullSection = function (s) {
      return Data_Eq.eq(eqSection)(s)(nullSection);
  };
  var accumulateSection = function (pos) {
      return function (isRepeatStart) {
          return function (r) {
              var newCurrent = newSection(pos)(isRepeatStart);
              var $18 = !isNullSection(r.current);
              if ($18) {
                  return {
                      current: newCurrent,
                      sections: new Data_List_Types.Cons(r.current, r.sections)
                  };
              };
              return {
                  current: newCurrent,
                  sections: r.sections
              };
          };
      };
  };
  var endAndStartSection = function (endPos) {
      return function (isRepeatEnd) {
          return function (isRepeatStart) {
              return function (r) {
                  var current = (function () {
                      var $19 = isRepeatEnd && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))((Data_Newtype.unwrap(newtypeSection)(r.current)).start)(new Data_Maybe.Just(0));
                      if ($19) {
                          return setRepeated(r.current);
                      };
                      return r.current;
                  })();
                  var current$prime = setEndPos(endPos)(current);
                  var endState = {
                      current: current$prime,
                      sections: r.sections
                  };
                  return accumulateSection(endPos)(isRepeatStart)(endState);
              };
          };
      };
  };
  var endSection = function (pos) {
      return function (isRepeatEnd) {
          return function (r) {
              var $20 = hasFirstEnding(r.current);
              if ($20) {
                  var current = setEndPos(pos)(r.current);
                  return {
                      current: current,
                      sections: r.sections
                  };
              };
              return endAndStartSection(pos)(isRepeatEnd)(false)(r);
          };
      };
  };
  var startSection = function (pos) {
      return function (r) {
          return endAndStartSection(pos)(false)(true)(r);
      };
  };
  var indexBar = function (iteration) {
      return function (repeat) {
          return function (barNumber) {
              return function (r) {
                  var v = new Data_Tuple.Tuple(iteration, repeat);
                  if (v.value0 instanceof Data_Maybe.Just && v.value0.value0 === 1) {
                      return {
                          current: firstRepeat(barNumber)(r.current),
                          sections: r.sections
                      };
                  };
                  if (v.value0 instanceof Data_Maybe.Just && v.value0.value0 === 2) {
                      return {
                          current: secondRepeat(barNumber)(r.current),
                          sections: r.sections
                      };
                  };
                  if (v.value1 instanceof Data_Maybe.Just && v.value1.value0 instanceof Data_Abc.Begin) {
                      return startSection(barNumber)(r);
                  };
                  if (v.value1 instanceof Data_Maybe.Just && v.value1.value0 instanceof Data_Abc.End) {
                      return endSection(barNumber)(true)(r);
                  };
                  if (v.value1 instanceof Data_Maybe.Just && v.value1.value0 instanceof Data_Abc.BeginAndEnd) {
                      return endAndStartSection(barNumber)(true)(true)(r);
                  };
                  return r;
              };
          };
      };
  };
  var finalBar = function (iteration) {
      return function (repeat) {
          return function (barNumber) {
              return function (r) {
                  var isRepeatEnd = (function () {
                      if (repeat instanceof Data_Maybe.Just && repeat.value0 instanceof Data_Abc.End) {
                          return true;
                      };
                      return false;
                  })();
                  var repeatState = endSection(barNumber)(isRepeatEnd)(r);
                  var $39 = !isNullSection(r.current);
                  if ($39) {
                      return accumulateSection(barNumber)(false)(repeatState);
                  };
                  return repeatState;
              };
          };
      };
  };
  exports["initialRepeatState"] = initialRepeatState;
  exports["indexBar"] = indexBar;
  exports["finalBar"] = finalBar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Abc.Tempo"] = $PS["Data.Abc.Tempo"] || {};
  var exports = $PS["Data.Abc.Tempo"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Abc_Metadata = $PS["Data.Abc.Metadata"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_Rational = $PS["Data.Rational"];
  var Data_Semiring = $PS["Data.Semiring"];                
  var standardMidiTick = 480;
  var standardBeatLength = Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(4);
  var standardBPM = 120;
  var placeHeaderPenultimately = function (h) {
      return function (hs) {
          var v = Data_List.reverse(hs);
          if (v instanceof Data_List_Types.Nil) {
              return new Data_List_Types.Cons(h, Data_List_Types.Nil.value);
          };
          if (v instanceof Data_List_Types.Cons) {
              return Data_List.reverse(new Data_List_Types.Cons(v.value0, new Data_List_Types.Cons(h, v.value1)));
          };
          throw new Error("Failed pattern match at Data.Abc.Tempo (line 197, column 3 - line 201, column 27): " + [ v.constructor.name ]);
      };
  };
  var replaceTempoHeader = function (newTempoHeader) {
      return function (hs) {
          var f = function (h) {
              if (h instanceof Data_Abc.Tempo) {
                  return false;
              };
              return true;
          };
          var newhs = Data_List.filter(f)(hs);
          return placeHeaderPenultimately(newTempoHeader)(newhs);
      };
  };
  var noteTicks = function (n) {
      return Data_Int.round(Data_Rational.toNumber(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(n)(Data_Rational.fromInt(standardMidiTick))));
  };
  var midiTempo = function (t) {
      var relativeNoteLength = Data_EuclideanRing.div(Data_Ratio.euclideanRingRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(t.unitNoteLength)(t.tempoNoteLength);
      return Data_Int.round((60.0 * 1000000.0 * Data_Rational.toNumber(relativeNoteLength)) / Data_Rational.toNumber(Data_Rational.fromInt(t.bpm)));
  };
  var defaultTempo = {
      noteLengths: Data_List_NonEmpty.singleton(standardBeatLength),
      bpm: standardBPM,
      marking: Data_Maybe.Nothing.value
  };
  var getAbcTempo = function (tune) {
      var unitNoteLength = Data_Maybe.fromMaybe(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(8))(Data_Abc_Metadata.getUnitNoteLength(tune));
      var tempoSig = Data_Maybe.fromMaybe(defaultTempo)(Data_Abc_Metadata.getTempoSig(tune));
      return {
          tempoNoteLength: Data_Foldable.foldl(Data_List_Types.foldableNonEmptyList)(Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)))(Data_Rational.fromInt(0))(tempoSig.noteLengths),
          bpm: tempoSig.bpm,
          unitNoteLength: unitNoteLength
      };
  };
  var tempoHeader = function (tune) {
      return Data_Maybe.fromMaybe(new Data_Abc.Tempo(defaultTempo))(Data_Abc_Metadata.getHeader("Q")(tune));
  };
  var getBpm = function (tune) {
      var v = tempoHeader(tune);
      if (v instanceof Data_Abc.Tempo) {
          return v.value0.bpm;
      };
      return defaultTempo.bpm;
  };
  var setBpm = function (bpm) {
      return function (tune) {
          var newTempoHeader = (function () {
              var v = tempoHeader(tune);
              if (v instanceof Data_Abc.Tempo) {
                  return new Data_Abc.Tempo({
                      noteLengths: v.value0.noteLengths,
                      bpm: bpm,
                      marking: v.value0.marking
                  });
              };
              return v;
          })();
          var newHeaders = replaceTempoHeader(newTempoHeader)(tune.headers);
          return {
              headers: newHeaders,
              body: tune.body
          };
      };
  };
  exports["defaultTempo"] = defaultTempo;
  exports["getAbcTempo"] = getAbcTempo;
  exports["midiTempo"] = midiTempo;
  exports["getBpm"] = getBpm;
  exports["setBpm"] = setBpm;
  exports["standardMidiTick"] = standardMidiTick;
  exports["noteTicks"] = noteTicks;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Abc.Midi"] = $PS["Data.Abc.Midi"] || {};
  var exports = $PS["Data.Abc.Midi"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_State = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Abc_Accidentals = $PS["Data.Abc.Accidentals"];
  var Data_Abc_Canonical = $PS["Data.Abc.Canonical"];
  var Data_Abc_KeySignature = $PS["Data.Abc.KeySignature"];
  var Data_Abc_Metadata = $PS["Data.Abc.Metadata"];
  var Data_Abc_Midi_RepeatSections = $PS["Data.Abc.Midi.RepeatSections"];
  var Data_Abc_Tempo = $PS["Data.Abc.Tempo"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Midi = $PS["Data.Midi"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_Rational = $PS["Data.Rational"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var updateState = function (f) {
      return function (abc) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (tpl) {
              var tstate = Data_Tuple.fst(tpl);
              var tstate$prime = f(tstate)(abc);
              var recording = Data_Tuple.snd(tpl);
              var tpl$prime = new Data_Tuple.Tuple(tstate$prime, recording);
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(tpl$prime))(function () {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(recording);
              });
          });
      };
  };
  var skeletalRecording = (function () {
      var header = {
          formatType: 0,
          trackCount: 1,
          ticksPerBeat: Data_Abc_Tempo.standardMidiTick
      };
      return {
          header: header,
          tracks: Data_List_Types.Nil.value
      };
  })();
  var midiTempoMsg = function (abcTempo) {
      return new Data_Midi.Message(0, Data_Midi.Tempo.create(Data_Abc_Tempo.midiTempo(abcTempo)));
  };
  var midiPitchOffset = function (n) {
      return function (mks) {
          return function (barAccidentals) {
              var inKeyAccidental = Data_Abc_Accidentals.implicitInKeySet(n.pitchClass)(Data_Abc_KeySignature.modifiedKeySet(mks));
              var inBarAccidental = Data_Abc_Accidentals.lookup(n.pitchClass)(barAccidentals);
              var accidental = (function () {
                  if (n.accidental instanceof Data_Abc.Implicit) {
                      return Data_Maybe.fromMaybe(Data_Abc.Natural.value)(Data_Foldable.oneOf(Data_List_Types.foldableList)(Data_Maybe.plusMaybe)(new Data_List_Types.Cons(inBarAccidental, new Data_List_Types.Cons(inKeyAccidental, Data_List_Types.Nil.value))));
                  };
                  return n.accidental;
              })();
              var accidentalPattern = Data_Abc_Canonical.keySignatureAccidental(accidental);
              var pattern = new Data_Abc.Pitch({
                  pitchClass: n.pitchClass,
                  accidental: accidental
              });
              return Data_Abc_KeySignature.pitchNumber(pattern);
          };
      };
  };
  var toMidiPitch = function (n) {
      return function (mks) {
          return function (barAccidentals) {
              return (n.octave * Data_Abc_KeySignature.notesInChromaticScale | 0) + midiPitchOffset(n)(mks)(barAccidentals) | 0;
          };
      };
  };
  var isBarEmpty = function (mb) {
      return Data_List["null"](mb.midiMessages);
  };
  var initialBar = function (initialMsg) {
      return {
          number: 0,
          repeat: Data_Maybe.Nothing.value,
          iteration: Data_Maybe.Nothing.value,
          midiMessages: new Data_List_Types.Cons(initialMsg, Data_List_Types.Nil.value)
      };
  };
  var gracifyFirstNote = function (maybeGrace) {
      return function (restsOrNotes) {
          var tl = Data_List_NonEmpty.tail(restsOrNotes);
          var hd = Data_List_NonEmpty.head(restsOrNotes);
          var f = Data_Bifunctor.bimap(Data_Either.bifunctorEither)(Control_Category.identity(Control_Category.categoryFn))(function (gn) {
              return {
                  maybeGrace: maybeGrace,
                  abcNote: gn.abcNote,
                  decorations: gn.decorations,
                  leftSlurs: gn.leftSlurs,
                  rightSlurs: gn.rightSlurs
              };
          });
          return new Data_List_Types.Cons(f(hd), tl);
      };
  };
  var graceFraction = Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(10);
  var individualGraceNote = function (abcNote) {
      return function (graceNote) {
          return {
              pitchClass: graceNote.pitchClass,
              accidental: graceNote.accidental,
              octave: graceNote.octave,
              duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(graceFraction)(abcNote.duration),
              tied: graceNote.tied
          };
      };
  };
  var defaultVolume = 80;
  var midiNoteOff = function (ticks) {
      return function (pitch) {
          return new Data_Midi.Message(ticks, new Data_Midi.NoteOff(0, pitch, defaultVolume));
      };
  };
  var midiNoteOn = function (ticks) {
      return function (pitch) {
          return new Data_Midi.Message(ticks, new Data_Midi.NoteOn(0, pitch, defaultVolume));
      };
  };
  var emitNoteOn = function (tstate) {
      return function (abcNote) {
          var pitch = toMidiPitch(abcNote)(tstate.modifiedKeySignature)(tstate.currentBarAccidentals);
          return midiNoteOn(0)(pitch);
      };
  };
  var emitNoteOnOff = function (tempoModifier) {
      return function (tstate) {
          return function (abcNote) {
              var ticks = Data_Abc_Tempo.noteTicks(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(abcNote.duration)(tempoModifier));
              var pitch = toMidiPitch(abcNote)(tstate.modifiedKeySignature)(tstate.currentBarAccidentals);
              return new Data_List_Types.Cons(midiNoteOff(ticks)(pitch), new Data_List_Types.Cons(midiNoteOn(0)(pitch), Data_List_Types.Nil.value));
          };
      };
  };
  var emitNotesOnOff = function (tempoModifier) {
      return function (tstate) {
          return function (abcNotes) {
              var f = function (n) {
                  return function (acc) {
                      return Data_Semigroup.append(Data_List_Types.semigroupList)(acc)(emitNoteOnOff(tempoModifier)(tstate)(n));
                  };
              };
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(Data_List_Types.Nil.value)(abcNotes);
          };
      };
  };
  var processChordalNote = function (tempoModifier) {
      return function (tstate) {
          return function (abcNote) {
              var msgOn = emitNoteOn(tstate)(abcNote);
              if (tstate.lastNoteTied instanceof Data_Maybe.Just) {
                  var tiedNotes = emitNoteOnOff(tempoModifier)(tstate)(tstate.lastNoteTied.value0);
                  return new Data_Tuple.Tuple(new Data_List_Types.Cons(msgOn, Data_Semigroup.append(Data_List_Types.semigroupList)(tiedNotes)(tstate.currentBar.midiMessages)), Data_Maybe.Nothing.value);
              };
              return new Data_Tuple.Tuple(new Data_List_Types.Cons(msgOn, tstate.currentBar.midiMessages), Data_Maybe.Nothing.value);
          };
      };
  };
  var defaultKey = {
      keySignature: {
          pitchClass: Data_Abc.C.value,
          accidental: Data_Abc.Natural.value,
          mode: Data_Abc.Major.value
      },
      modifications: Data_List_Types.Nil.value
  };
  var initialState = function (tune) {
      var keySignature = Data_Maybe.fromMaybe(defaultKey)(Data_Abc_Metadata.getKeySig(tune));
      var abcTempo = Data_Abc_Tempo.getAbcTempo(tune);
      var initialMsg = midiTempoMsg(abcTempo);
      return new Data_Tuple.Tuple({
          modifiedKeySignature: keySignature,
          abcTempo: abcTempo,
          currentBar: initialBar(initialMsg),
          currentBarAccidentals: Data_Abc_Accidentals.empty,
          lastNoteTied: Data_Maybe.Nothing.value,
          repeatState: Data_Abc_Midi_RepeatSections.initialRepeatState,
          rawTrack: Data_List_Types.Nil.value
      }, skeletalRecording);
  };
  var curtailedGracedNote = function (maybeGrace) {
      return function (abcNote) {
          if (maybeGrace instanceof Data_Maybe.Just) {
              var totalFraction = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Rational.fromInt(Data_List_NonEmpty.length(maybeGrace.value0.notes)))(graceFraction);
              var duration = Data_Ring.sub(Data_Ratio.ringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(abcNote.duration)(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(abcNote.duration)(totalFraction));
              return {
                  pitchClass: abcNote.pitchClass,
                  accidental: abcNote.accidental,
                  octave: abcNote.octave,
                  duration: duration,
                  tied: abcNote.tied
              };
          };
          return abcNote;
      };
  };
  var processNoteWithTie = function (tempoModifier) {
      return function (maybeGrace) {
          return function (tstate) {
              return function (abcNote) {
                  if (tstate.lastNoteTied instanceof Data_Maybe.Just) {
                      var combinedAbcNote = {
                          duration: Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(abcNote.duration)(tstate.lastNoteTied.value0.duration),
                          accidental: abcNote.accidental,
                          octave: abcNote.octave,
                          pitchClass: abcNote.pitchClass,
                          tied: abcNote.tied
                      };
                      if (abcNote.tied) {
                          return new Data_Tuple.Tuple(tstate.currentBar.midiMessages, new Data_Maybe.Just(combinedAbcNote));
                      };
                      var notes = emitNoteOnOff(tempoModifier)(tstate)(combinedAbcNote);
                      return new Data_Tuple.Tuple(Data_Semigroup.append(Data_List_Types.semigroupList)(notes)(tstate.currentBar.midiMessages), Data_Maybe.Nothing.value);
                  };
                  var gracedNote = curtailedGracedNote(maybeGrace)(abcNote);
                  var graceAbcNotes = (function () {
                      if (maybeGrace instanceof Data_Maybe.Just) {
                          return Data_Functor.map(Data_List_Types.functorList)(individualGraceNote(abcNote))(Data_List_NonEmpty.toList(maybeGrace.value0.notes));
                      };
                      return Data_List_Types.Nil.value;
                  })();
                  var graceNotes = emitNotesOnOff(tempoModifier)(tstate)(graceAbcNotes);
                  if (gracedNote.tied) {
                      return new Data_Tuple.Tuple(Data_Semigroup.append(Data_List_Types.semigroupList)(graceNotes)(tstate.currentBar.midiMessages), new Data_Maybe.Just(gracedNote));
                  };
                  var notes = emitNoteOnOff(tempoModifier)(tstate)(gracedNote);
                  return new Data_Tuple.Tuple(Data_Semigroup.append(Data_List_Types.semigroupList)(notes)(Data_Semigroup.append(Data_List_Types.semigroupList)(graceNotes)(tstate.currentBar.midiMessages)), Data_Maybe.Nothing.value);
              };
          };
      };
  };
  var coalesceBar = function (tstate) {
      return function (barType) {
          var barRepeats = new Data_Tuple.Tuple(tstate.currentBar.repeat, barType.repeat);
          var newRepeat = (function () {
              if (barRepeats.value0 instanceof Data_Maybe.Just && (barRepeats.value0.value0 instanceof Data_Abc.End && (barRepeats.value1 instanceof Data_Maybe.Just && barRepeats.value1.value0 instanceof Data_Abc.Begin))) {
                  return new Data_Maybe.Just(Data_Abc.BeginAndEnd.value);
              };
              if (barRepeats.value0 instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(barRepeats.value0.value0);
              };
              return barType.repeat;
          })();
          var bar$prime = {
              repeat: newRepeat,
              iteration: barType.iteration,
              midiMessages: tstate.currentBar.midiMessages,
              number: tstate.currentBar.number
          };
          return {
              modifiedKeySignature: tstate.modifiedKeySignature,
              abcTempo: tstate.abcTempo,
              currentBar: bar$prime,
              currentBarAccidentals: tstate.currentBarAccidentals,
              lastNoteTied: tstate.lastNoteTied,
              repeatState: tstate.repeatState,
              rawTrack: tstate.rawTrack
          };
      };
  };
  var buildNewBar = function (i) {
      return function (barType) {
          return {
              number: i,
              repeat: barType.repeat,
              iteration: barType.iteration,
              midiMessages: Data_List_Types.Nil.value
          };
      };
  };
  var brokenTempo = function (i) {
      return function (isUp) {
          if (isUp) {
              return Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Rational.fromInt(1))(Data_Abc_Metadata.dotFactor(i));
          };
          return Data_Ring.sub(Data_Ratio.ringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Rational.fromInt(1))(Data_Abc_Metadata.dotFactor(i));
      };
  };
  var barSelector = function (strt) {
      return function (fin) {
          return function (mb) {
              return mb.number >= strt && mb.number < fin;
          };
      };
  };
  var addUnitNoteLenToState = function (tstate) {
      return function (d) {
          var abcTempo$prime = {
              unitNoteLength: d,
              bpm: tstate.abcTempo.bpm,
              tempoNoteLength: tstate.abcTempo.tempoNoteLength
          };
          var tempoMsg = midiTempoMsg(abcTempo$prime);
          var bar$prime = {
              midiMessages: new Data_List_Types.Cons(tempoMsg, tstate.currentBar.midiMessages),
              iteration: tstate.currentBar.iteration,
              number: tstate.currentBar.number,
              repeat: tstate.currentBar.repeat
          };
          return {
              modifiedKeySignature: tstate.modifiedKeySignature,
              abcTempo: abcTempo$prime,
              currentBar: bar$prime,
              currentBarAccidentals: tstate.currentBarAccidentals,
              lastNoteTied: tstate.lastNoteTied,
              repeatState: tstate.repeatState,
              rawTrack: tstate.rawTrack
          };
      };
  };
  var addTempoToState = function (tstate) {
      return function (tempoSig) {
          var abcTempo$prime = {
              tempoNoteLength: Data_Foldable.foldl(Data_List_Types.foldableNonEmptyList)(Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)))(Data_Rational.fromInt(0))(tempoSig.noteLengths),
              bpm: tempoSig.bpm,
              unitNoteLength: tstate.abcTempo.unitNoteLength
          };
          var tempoMsg = midiTempoMsg(abcTempo$prime);
          var bar$prime = {
              midiMessages: new Data_List_Types.Cons(tempoMsg, tstate.currentBar.midiMessages),
              iteration: tstate.currentBar.iteration,
              number: tstate.currentBar.number,
              repeat: tstate.currentBar.repeat
          };
          return {
              modifiedKeySignature: tstate.modifiedKeySignature,
              abcTempo: abcTempo$prime,
              currentBar: bar$prime,
              currentBarAccidentals: tstate.currentBarAccidentals,
              lastNoteTied: tstate.lastNoteTied,
              repeatState: tstate.repeatState,
              rawTrack: tstate.rawTrack
          };
      };
  };
  var addRestToState = function (tstate) {
      return function (duration) {
          var msg = midiNoteOn(Data_Abc_Tempo.noteTicks(duration))(0);
          var bar$prime = {
              midiMessages: new Data_List_Types.Cons(msg, tstate.currentBar.midiMessages),
              iteration: tstate.currentBar.iteration,
              number: tstate.currentBar.number,
              repeat: tstate.currentBar.repeat
          };
          return {
              modifiedKeySignature: tstate.modifiedKeySignature,
              abcTempo: tstate.abcTempo,
              currentBar: bar$prime,
              currentBarAccidentals: tstate.currentBarAccidentals,
              lastNoteTied: tstate.lastNoteTied,
              repeatState: tstate.repeatState,
              rawTrack: tstate.rawTrack
          };
      };
  };
  var addNoteToBarAccidentals = function (abcNote) {
      return function (accs) {
          if (abcNote.accidental instanceof Data_Abc.Implicit) {
              return accs;
          };
          return Data_Abc_Accidentals.add(abcNote.pitchClass)(abcNote.accidental)(accs);
      };
  };
  var addNoteToState = function (chordal) {
      return function (tempoModifier) {
          return function (maybeGrace) {
              return function (tstate) {
                  return function (abcNote) {
                      var v = (function () {
                          if (chordal) {
                              return processChordalNote(tempoModifier)(tstate)(abcNote);
                          };
                          return processNoteWithTie(tempoModifier)(maybeGrace)(tstate)(abcNote);
                      })();
                      var barAccidentals = addNoteToBarAccidentals(abcNote)(tstate.currentBarAccidentals);
                      return {
                          modifiedKeySignature: tstate.modifiedKeySignature,
                          abcTempo: tstate.abcTempo,
                          currentBar: {
                              number: tstate.currentBar.number,
                              repeat: tstate.currentBar.repeat,
                              iteration: tstate.currentBar.iteration,
                              midiMessages: v.value0
                          },
                          currentBarAccidentals: barAccidentals,
                          lastNoteTied: v.value1,
                          repeatState: tstate.repeatState,
                          rawTrack: tstate.rawTrack
                      };
                  };
              };
          };
      };
  };
  var addNotesToState = function (chordal) {
      return function (tempoModifier) {
          return function (tstate) {
              return function (abcNotes) {
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(addNoteToState(chordal)(tempoModifier)(Data_Maybe.Nothing.value))(tstate)(abcNotes);
              };
          };
      };
  };
  var addNoteOffToState = function (duration) {
      return function (tstate) {
          return function (abcNote) {
              var pitch = toMidiPitch(abcNote)(tstate.modifiedKeySignature)(tstate.currentBarAccidentals);
              var msg = midiNoteOff(Data_Abc_Tempo.noteTicks(duration))(pitch);
              var bar$prime = {
                  midiMessages: new Data_List_Types.Cons(msg, tstate.currentBar.midiMessages),
                  iteration: tstate.currentBar.iteration,
                  number: tstate.currentBar.number,
                  repeat: tstate.currentBar.repeat
              };
              return {
                  modifiedKeySignature: tstate.modifiedKeySignature,
                  abcTempo: tstate.abcTempo,
                  currentBar: bar$prime,
                  currentBarAccidentals: tstate.currentBarAccidentals,
                  lastNoteTied: tstate.lastNoteTied,
                  repeatState: tstate.repeatState,
                  rawTrack: tstate.rawTrack
              };
          };
      };
  };
  var addNoteOffsToState = function (duration) {
      return function (tstate) {
          return function (abcNotes) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(addNoteOffToState(duration))(tstate)(abcNotes);
          };
      };
  };
  var addKeySigToState = function (tstate) {
      return function (mks) {
          return {
              modifiedKeySignature: mks,
              abcTempo: tstate.abcTempo,
              currentBar: tstate.currentBar,
              currentBarAccidentals: tstate.currentBarAccidentals,
              lastNoteTied: tstate.lastNoteTied,
              repeatState: tstate.repeatState,
              rawTrack: tstate.rawTrack
          };
      };
  };
  var transformHeader = function (h) {
      if (h instanceof Data_Abc.UnitNoteLength) {
          return updateState(addUnitNoteLenToState)(h.value0);
      };
      if (h instanceof Data_Abc.Key) {
          return updateState(addKeySigToState)(h.value0);
      };
      if (h instanceof Data_Abc.Tempo) {
          return updateState(addTempoToState)(h.value0);
      };
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (tpl) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Tuple.snd(tpl));
      });
  };
  var addGraceableNoteToState = function (chordal) {
      return function (tempoModifier) {
          return function (tstate) {
              return function (graceableNote) {
                  return addNoteToState(chordal)(tempoModifier)(graceableNote.maybeGrace)(tstate)(graceableNote.abcNote);
              };
          };
      };
  };
  var addRestOrNoteToState = function (chordal) {
      return function (tempoModifier) {
          return function (tstate) {
              return function (restOrNote) {
                  if (restOrNote instanceof Data_Either.Left) {
                      return addRestToState(tstate)(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(restOrNote.value0.duration)(tempoModifier));
                  };
                  if (restOrNote instanceof Data_Either.Right) {
                      return addGraceableNoteToState(chordal)(tempoModifier)(tstate)(restOrNote.value0);
                  };
                  throw new Error("Failed pattern match at Data.Abc.Midi (line 369, column 3 - line 374, column 61): " + [ restOrNote.constructor.name ]);
              };
          };
      };
  };
  var addTupletContentsToState = function (mGrace) {
      return function (tempoModifier) {
          return function (tstate) {
              return function (restsOrNotes) {
                  var gracedRestsOrNotes = gracifyFirstNote(mGrace)(restsOrNotes);
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(addRestOrNoteToState(false)(tempoModifier))(tstate)(gracedRestsOrNotes);
              };
          };
      };
  };
  var transformMusic = function (m) {
      if (m instanceof Data_Abc.Note) {
          return updateState(addGraceableNoteToState(false)(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(1)))(m.value0);
      };
      if (m instanceof Data_Abc.Rest) {
          return updateState(addRestToState)(m.value0.duration);
      };
      if (m instanceof Data_Abc.Tuplet) {
          return updateState(addTupletContentsToState(m.value0)(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(m.value1.q)(m.value1.p)))(m.value2);
      };
      if (m instanceof Data_Abc.Chord) {
          var others = Data_List_NonEmpty.tail(m.value0.notes);
          var first = Data_List_NonEmpty.head(m.value0.notes);
          var duration = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(m.value0.duration)(first.duration);
          var arbitraryNote = {
              pitchClass: Data_Abc.C.value,
              accidental: Data_Abc.Implicit.value,
              octave: 0,
              duration: Data_Rational.fromInt(0),
              tied: false
          };
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(updateState(addNotesToState(true)(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(1)))(Data_List_NonEmpty.toList(m.value0.notes)))(function () {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(updateState(addNoteOffToState(duration))(first))(function () {
                  return updateState(addNoteOffsToState(Data_Rational.fromInt(0)))(others);
              });
          });
      };
      if (m instanceof Data_Abc.BrokenRhythmPair) {
          if (m.value1 instanceof Data_Abc.LeftArrow) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(updateState(addGraceableNoteToState(false)(brokenTempo(m.value1.value0)(false)))(m.value0))(function () {
                  return updateState(addGraceableNoteToState(false)(brokenTempo(m.value1.value0)(true)))(m.value2);
              });
          };
          if (m.value1 instanceof Data_Abc.RightArrow) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(updateState(addGraceableNoteToState(false)(brokenTempo(m.value1.value0)(true)))(m.value0))(function () {
                  return updateState(addGraceableNoteToState(false)(brokenTempo(m.value1.value0)(false)))(m.value2);
              });
          };
          throw new Error("Failed pattern match at Data.Abc.Midi (line 264, column 7 - line 272, column 84): " + [ m.value1.constructor.name ]);
      };
      if (m instanceof Data_Abc.Inline) {
          return transformHeader(m.value0);
      };
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (tpl) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Tuple.snd(tpl));
      });
  };
  var transformMusicLine = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (tpl) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Tuple.snd(tpl));
          });
      };
      if (v instanceof Data_List_Types.Cons) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transformMusic(v.value0))(function () {
              return transformMusicLine(v.value1);
          });
      };
      throw new Error("Failed pattern match at Data.Abc.Midi (line 218, column 1 - line 218, column 76): " + [ v.constructor.name ]);
  };
  var addBarToState = function (tstate) {
      return function (barType) {
          var $78 = isBarEmpty(tstate.currentBar);
          if ($78) {
              return coalesceBar(tstate)(barType);
          };
          var rawTrack = new Data_List_Types.Cons(tstate.currentBar, tstate.rawTrack);
          var repeatState = Data_Abc_Midi_RepeatSections.indexBar(tstate.currentBar.iteration)(tstate.currentBar.repeat)(tstate.currentBar.number)(tstate.repeatState);
          return {
              modifiedKeySignature: tstate.modifiedKeySignature,
              abcTempo: tstate.abcTempo,
              currentBar: buildNewBar(tstate.currentBar.number + 1 | 0)(barType),
              currentBarAccidentals: Data_Abc_Accidentals.empty,
              lastNoteTied: tstate.lastNoteTied,
              repeatState: repeatState,
              rawTrack: rawTrack
          };
      };
  };
  var transformBar = function (bar) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(updateState(addBarToState)(bar.startLine))(function () {
          return transformMusicLine(bar.music);
      });
  };
  var transformBarList = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (tpl) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Tuple.snd(tpl));
          });
      };
      if (v instanceof Data_List_Types.Cons) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transformBar(v.value0))(function () {
              return transformBarList(v.value1);
          });
      };
      throw new Error("Failed pattern match at Data.Abc.Midi (line 201, column 1 - line 201, column 73): " + [ v.constructor.name ]);
  };
  var transformBodyPart = function (bodyPart) {
      if (bodyPart instanceof Data_Abc.Score) {
          return transformBarList(bodyPart.value0);
      };
      if (bodyPart instanceof Data_Abc.BodyInfo) {
          return transformHeader(bodyPart.value0);
      };
      throw new Error("Failed pattern match at Data.Abc.Midi (line 195, column 3 - line 199, column 29): " + [ bodyPart.constructor.name ]);
  };
  var accumulateMessages = function (mbs) {
      return Data_List.reverse(Data_List.concatMap(function (v) {
          return v.midiMessages;
      })(mbs));
  };
  var trackSlice = function (start) {
      return function (finish) {
          return function (mbs) {
              return accumulateMessages(Data_List.filter(barSelector(start)(finish))(mbs));
          };
      };
  };
  var variantSlice = function (start) {
      return function (firstRepeat) {
          return function (secondRepeat) {
              return function (end) {
                  return function (mbs) {
                      var section = Data_List.filter(barSelector(start)(end))(mbs);
                      var secondSection = Data_Semigroup.append(Data_List_Types.semigroupList)(trackSlice(start)(firstRepeat)(section))(trackSlice(secondRepeat)(end)(section));
                      var firstSection = trackSlice(start)(secondRepeat)(section);
                      return Data_Semigroup.append(Data_List_Types.semigroupList)(firstSection)(secondSection);
                  };
              };
          };
      };
  };
  var repeatedSection = function (mbs) {
      return function (acc) {
          return function (v) {
              if (v.start instanceof Data_Maybe.Just && (v.firstEnding instanceof Data_Maybe.Just && (v.secondEnding instanceof Data_Maybe.Just && v.end instanceof Data_Maybe.Just))) {
                  return Data_Semigroup.append(Data_List_Types.semigroupList)(variantSlice(v.start.value0)(v.firstEnding.value0)(v.secondEnding.value0)(v.end.value0)(mbs))(acc);
              };
              if (v.start instanceof Data_Maybe.Just && (v.end instanceof Data_Maybe.Just && !v.isRepeated)) {
                  return Data_Semigroup.append(Data_List_Types.semigroupList)(trackSlice(v.start.value0)(v.end.value0)(mbs))(acc);
              };
              if (v.start instanceof Data_Maybe.Just && (v.end instanceof Data_Maybe.Just && v.isRepeated)) {
                  return Data_Semigroup.append(Data_List_Types.semigroupList)(trackSlice(v.start.value0)(v.end.value0)(mbs))(Data_Semigroup.append(Data_List_Types.semigroupList)(trackSlice(v.start.value0)(v.end.value0)(mbs))(acc));
              };
              return acc;
          };
      };
  };
  var buildRepeatedMelody = function (mbs) {
      return function (sections) {
          var $111 = Data_List["null"](sections);
          if ($111) {
              return Data_List_Types.Nil.value;
          };
          return Data_Midi.Track(Data_Foldable.foldl(Data_List_Types.foldableList)(repeatedSection(mbs))(Data_List_Types.Nil.value)(sections));
      };
  };
  var finaliseMelody = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (tpl) {
      var v = Data_Tuple.snd(tpl);
      var tstate = Data_Tuple.fst(tpl);
      var repeatState = Data_Abc_Midi_RepeatSections.finalBar(tstate.currentBar.iteration)(tstate.currentBar.repeat)(tstate.currentBar.number)(tstate.repeatState);
      var tstate$prime = (function () {
          var $113 = {};
          for (var $114 in tstate) {
              if ({}.hasOwnProperty.call(tstate, $114)) {
                  $113[$114] = tstate[$114];
              };
          };
          $113.rawTrack = new Data_List_Types.Cons(tstate.currentBar, tstate.rawTrack);
          $113.repeatState = repeatState;
          return $113;
      })();
      var track = buildRepeatedMelody(tstate$prime.rawTrack)(tstate$prime.repeatState.sections);
      var recording$prime = {
          header: v.header,
          tracks: Data_List.singleton(track)
      };
      var tpl$prime = new Data_Tuple.Tuple(tstate$prime, recording$prime);
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(tpl$prime))(function () {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(recording$prime);
      });
  });
  var transformBody = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return finaliseMelody;
      };
      if (v instanceof Data_List_Types.Cons) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transformBodyPart(v.value0))(function () {
              return transformBody(v.value1);
          });
      };
      throw new Error("Failed pattern match at Data.Abc.Midi (line 184, column 1 - line 184, column 70): " + [ v.constructor.name ]);
  };
  var transformTune = function (tune) {
      return transformBody(tune.body);
  };
  var toMidi = function (tune) {
      return Control_Monad_State.evalState(transformTune(tune))(initialState(tune));
  };
  exports["toMidi"] = toMidi;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Abc.Octave"] = $PS["Data.Abc.Octave"] || {};
  var exports = $PS["Data.Abc.Octave"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var moveNoteBy = function (i) {
      return function (note) {
          return {
              pitchClass: note.pitchClass,
              accidental: note.accidental,
              octave: note.octave + i | 0,
              duration: note.duration,
              tied: note.tied
          };
      };
  };
  var moveNoteList = function (i) {
      return Data_Functor.map(Data_List_Types.functorNonEmptyList)(moveNoteBy(i));
  };
  var moveMaybeGraceBy = function (i) {
      return function (mGrace) {
          var moveGraceBy = function (g) {
              return {
                  isAcciaccatura: g.isAcciaccatura,
                  notes: moveNoteList(i)(g.notes)
              };
          };
          return Data_Functor.map(Data_Maybe.functorMaybe)(moveGraceBy)(mGrace);
      };
  };
  var moveGraceableNoteBy = function (i) {
      return function (gn) {
          var maybeGrace = moveMaybeGraceBy(i)(gn.maybeGrace);
          var abcNote = moveNoteBy(i)(gn.abcNote);
          return {
              maybeGrace: maybeGrace,
              leftSlurs: gn.leftSlurs,
              decorations: gn.decorations,
              abcNote: abcNote,
              rightSlurs: gn.rightSlurs
          };
      };
  };
  var moveRestOrNoteList = function (i) {
      var f = function (rn) {
          if (rn instanceof Data_Either.Left) {
              return new Data_Either.Left(rn.value0);
          };
          if (rn instanceof Data_Either.Right) {
              return new Data_Either.Right(moveGraceableNoteBy(i)(rn.value0));
          };
          throw new Error("Failed pattern match at Data.Abc.Octave (line 119, column 7 - line 121, column 51): " + [ rn.constructor.name ]);
      };
      return Data_Functor.map(Data_List_Types.functorNonEmptyList)(f);
  };
  var moveChord = function (i) {
      return function (c) {
          return {
              notes: moveNoteList(i)(c.notes),
              duration: c.duration
          };
      };
  };
  var moveOctave = function (i) {
      return function (m) {
          if (m instanceof Data_Abc.Note) {
              return new Data_Abc.Note(moveGraceableNoteBy(i)(m.value0));
          };
          if (m instanceof Data_Abc.BrokenRhythmPair) {
              return new Data_Abc.BrokenRhythmPair(moveGraceableNoteBy(i)(m.value0), m.value1, moveGraceableNoteBy(i)(m.value2));
          };
          if (m instanceof Data_Abc.Tuplet) {
              return new Data_Abc.Tuplet(moveMaybeGraceBy(i)(m.value0), m.value1, moveRestOrNoteList(i)(m.value2));
          };
          if (m instanceof Data_Abc.Chord) {
              return new Data_Abc.Chord(moveChord(i)(m.value0));
          };
          return m;
      };
  };
  var moveBar = function (i) {
      return function (bar) {
          var newMusic = Data_Functor.map(Data_List_Types.functorList)(moveOctave(i))(bar.music);
          return {
              startLine: bar.startLine,
              music: newMusic
          };
      };
  };
  var moveBarList = function (i) {
      return Data_Functor.map(Data_List_Types.functorList)(moveBar(i));
  };
  var moveBodyPart = function (i) {
      return function (bp) {
          if (bp instanceof Data_Abc.Score) {
              return new Data_Abc.Score(moveBarList(i)(bp.value0));
          };
          return bp;
      };
  };
  var moveTuneBody = function (i) {
      return Data_Functor.map(Data_List_Types.functorList)(moveBodyPart(i));
  };
  var moveTune = function (i) {
      return function (t) {
          return {
              headers: t.headers,
              body: moveTuneBody(i)(t.body)
          };
      };
  };
  var up = function (t) {
      return moveTune(1)(t);
  };
  var down = function (t) {
      return moveTune(-1 | 0)(t);
  };
  var move = function (isUp) {
      if (isUp) {
          return up;
      };
      return down;
  };
  exports["move"] = move;
})(PS);
(function(exports) {
  "use strict";

  function _codePointAt (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          var codePointArray = Array.from(s);
          var isWithinRange  = i >= 0 && i < codePointArray.length;

          return isWithinRange ? just(codePointArray[i].codePointAt(0)) : nothing;
        };
      };
    };
  }

  function _codePointAtP (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.codePointAt(i)) : nothing;
        };
      };
    };
  }

  function endsWith (searchString) {
    return function (s) {
      return s.endsWith(searchString);
    };
  }

  function endsWithP (searchString) {
    return function (position) {
      return function (s) {
        return s.endsWith(searchString, position);
      };
    };
  }

  function escapeRegex (str) {
    return str.replace(/[.*+?^${}()|[\]\-\\]/g, "\\$&");
  }

  function fromCharArray (array) {
    return array.join("");
  }

  function includes (searchString) {
    return function (str) {
      return str.includes(searchString);
    };
  }

  function includesP (needle) {
    return function (position) {
      return function (haystack) {
        // For negative `position` values, we search from the beginning of the
        // string. This is in accordance with the native
        // `String.prototype.include` function.
        var pos = Math.max(0, position);

        // Converting to arrays takes care of any surrogate code points
        var needleA    = Array.from(needle);
        var haystackA  = Array.from(haystack).slice(pos);
        var needleALen = needleA.length;

        var maxIndex = haystackA.length + 1 - needleALen;
        var found    = false;
        var i;

        // Naive implementation, at some point we should check whether Boyer-Moore
        // or Knuth-Morris-Pratt are worthwhile
        for (i = 0; i < maxIndex; i++) {
          if (needleA.every(function (e, j) { return e === haystackA[i+j]; })) {
            found = true;
            break;
          }
        }

        return found;
      };
    };
  }

  function length (str) {
    return Array.from(str).length;
  }

  function lines (str) {
    // See http://www.unicode.org/reports/tr18/#RL1.6
    return str.split(/\r\n|[\n\v\f\r\u0085\u2028\u2029]/);
  }

  function normalize (str) {
    return str.normalize();
  }

  function _normalizeP (normalizationForm) {
    return function (str) {
      return str.normalize(normalizationForm);
    };
  }

  function _repeat (just) {
    return function (nothing) {
      return function (n) {
        return function (str) {
          var result;

          try {
            result = just(str.repeat(n));
          }
          catch (error) {
            result = nothing;
          }

          return result;
        };
      };
    };
  }

  function startsWith (searchString) {
    return function (s) {
      return s.startsWith(searchString);
    };
  }

  function startsWithP (searchString) {
    return function (position) {
      return function (s) {
        return s.startsWith(searchString, position);
      };
    };
  }

  function stripChars (chars) {
    return function (s) {
      return s.replace(RegExp("[" + escapeRegex(chars) + "]", "g"), "");
    };
  }

  function stripDiacritics (str) {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  }

  function toCharArray (str) {
    return Array.from(str);
  }

  function unsafeCodePointAt (i) {
    return function (s) {
      var codePointArray = Array.from(s);
      var isWithinRange = i >= 0 && i < codePointArray.length;

      if (isWithinRange) {
        return codePointArray[i].codePointAt(0);
      }
      else {
        throw new Error("Data.String.Utils.unsafeCodePointAt: Invalid index");
      }
    };
  }

  function unsafeCodePointAtP (i) {
    return function (s) {
      if (i >= 0 && i < s.length) {
        return s.codePointAt(i);
      }
      else {
        throw new Error("Data.String.Utils.unsafeCodePointAt': Invalid index");
      }
    };
  }

  function unsafeRepeat (n) {
    return function (str) {
      try {
        return str.repeat(n);
      }
      catch (error) {
        throw new Error("Data.String.Utils.unsafeRepeat: Invalid count");
      }
    };
  }

  function words (s) {
    // Split at every Unicode whitespace character (25 as of Unicode 12.1)
    return s.split(/[\u000a-\u000d\u0085\u2028\u2029\u0009\u0020\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000]+/);
  }                                          
  exports.endsWith           = endsWith;     
  exports.includes           = includes;
  exports.startsWith         = startsWith;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Utils"] = $PS["Data.String.Utils"] || {};
  var exports = $PS["Data.String.Utils"];
  var $foreign = $PS["Data.String.Utils"];
  exports["endsWith"] = $foreign.endsWith;
  exports["includes"] = $foreign.includes;
  exports["startsWith"] = $foreign.startsWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.StringParser"] = $PS["Text.Parsing.StringParser"] || {};
  var exports = $PS["Text.Parsing.StringParser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];          
  var ParseError = (function () {
      function ParseError(value0) {
          this.value0 = value0;
      };
      ParseError.create = function (value0) {
          return new ParseError(value0);
      };
      return ParseError;
  })();
  var unParser = function (v) {
      return v;
  };
  var $$try = function (v) {
      return function (v1) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v2) {
              return {
                  pos: v1.pos,
                  error: v2.error
              };
          })(v(v1));
      };
  }; 
  var functorParser = new Data_Functor.Functor(function (f) {
      return function (v) {
          var $80 = Data_Functor.map(Data_Either.functorEither)(function (v1) {
              return {
                  result: f(v1.result),
                  suffix: v1.suffix
              };
          });
          return function ($81) {
              return $80(v($81));
          };
      };
  });
  var fail = function (msg) {
      return function (v) {
          return new Data_Either.Left({
              pos: v.pos,
              error: new ParseError(msg)
          });
      };
  }; 
  var applyParser = new Control_Apply.Apply(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(v1(v2.suffix))(function (v3) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          result: v2.result(v3.result),
                          suffix: v3.suffix
                      });
                  });
              });
          };
      };
  });
  var bindParser = new Control_Bind.Bind(function () {
      return applyParser;
  }, function (v) {
      return function (f) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v1) {
                  return unParser(f(v1.result))(v1.suffix);
              });
          };
      };
  });
  var applicativeParser = new Control_Applicative.Applicative(function () {
      return applyParser;
  }, function (a) {
      return function (s) {
          return new Data_Either.Right({
              result: a,
              suffix: s
          });
      };
  });
  var monadParser = new Control_Monad.Monad(function () {
      return applicativeParser;
  }, function () {
      return bindParser;
  });
  var monadRecParser = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadParser;
  }, function (f) {
      return function (a) {
          var split = function (v) {
              if (v.result instanceof Control_Monad_Rec_Class.Loop) {
                  return new Control_Monad_Rec_Class.Loop({
                      state: v.result.value0,
                      str: v.suffix
                  });
              };
              if (v.result instanceof Control_Monad_Rec_Class.Done) {
                  return new Control_Monad_Rec_Class.Done({
                      result: v.result.value0,
                      suffix: v.suffix
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.StringParser (line 88, column 7 - line 88, column 70): " + [ v.constructor.name ]);
          };
          return function (str) {
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEither)(function (st) {
                  return Data_Functor.map(Data_Either.functorEither)(split)(unParser(f(st.state))(st.str));
              })({
                  state: a,
                  str: str
              });
          };
      };
  });
  var altParser = new Control_Alt.Alt(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              var v2 = v(s);
              if (v2 instanceof Data_Either.Left) {
                  if (s.pos === v2.value0.pos) {
                      return v1(s);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Either.Left({
                          error: v2.value0.error,
                          pos: v2.value0.pos
                      });
                  };
              };
              return v2;
          };
      };
  });
  var plusParser = new Control_Plus.Plus(function () {
      return altParser;
  }, fail("No alternative"));
  var alternativeParser = new Control_Alternative.Alternative(function () {
      return applicativeParser;
  }, function () {
      return plusParser;
  });
  exports["ParseError"] = ParseError;
  exports["fail"] = fail;
  exports["try"] = $$try;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["altParser"] = altParser;
  exports["alternativeParser"] = alternativeParser;
  exports["bindParser"] = bindParser;
  exports["monadRecParser"] = monadRecParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.StringParser.Combinators"] = $PS["Text.Parsing.StringParser.Combinators"] || {};
  var exports = $PS["Text.Parsing.StringParser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Unit = $PS["Data.Unit"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];                
  var withError = function (p) {
      return function (msg) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Text_Parsing_StringParser.fail(msg));
      };
  };
  var optional = function (p) {
      return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_Unit.unit);
      }))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_Unit.unit));
  };
  var option = function (a) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
      };
  };
  var optionMaybe = function (p) {
      return option(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(p));
  };
  var many1Till = function (p) {
      return function (end) {
          var ending = function (acc) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(end)(function () {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Done(Data_List_NonEmpty.reverse(acc)));
              });
          };
          var $$continue = function (acc) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (c) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Loop(Data_List_NonEmpty.cons(c)(acc)));
              });
          };
          var inner = function (acc) {
              return Control_Alt.alt(Text_Parsing_StringParser.altParser)(ending(acc))($$continue(acc));
          };
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (x) {
              return Control_Monad_Rec_Class.tailRecM(Text_Parsing_StringParser.monadRecParser)(inner)(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(x));
          });
      };
  };
  var manyTill = function (p) {
      return function (end) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(end)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value)))(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.toList)(many1Till(p)(end)));
      };
  };
  var many = Data_List.manyRec(Text_Parsing_StringParser.monadRecParser)(Text_Parsing_StringParser.alternativeParser);
  var cons$prime = function (h) {
      return function (t) {
          return new Data_NonEmpty.NonEmpty(h, t);
      };
  };
  var many1 = function (p) {
      return Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(cons$prime)(p))(many(p));
  };
  var sepBy1 = function (p) {
      return function (sep) {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (a) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(many(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(sep)(p)))(function (as) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(cons$prime(a)(as));
              });
          });
      };
  };
  var sepBy = function (p) {
      return function (sep) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.toList)(sepBy1(p)(sep)))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value));
      };
  };
  var choice = function (dictFoldable) {
      return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_StringParser.altParser))(Text_Parsing_StringParser.fail("Nothing to parse"));
  };
  var between = function (open) {
      return function (close) {
          return function (p) {
              return Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(open)(p))(close);
          };
      };
  };
  exports["many"] = many;
  exports["many1"] = many1;
  exports["withError"] = withError;
  exports["between"] = between;
  exports["option"] = option;
  exports["optional"] = optional;
  exports["optionMaybe"] = optionMaybe;
  exports["sepBy"] = sepBy;
  exports["choice"] = choice;
  exports["manyTill"] = manyTill;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.StringParser.CodePoints"] = $PS["Text.Parsing.StringParser.CodePoints"] || {};
  var exports = $PS["Text.Parsing.StringParser.CodePoints"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Char = $PS["Data.Char"];
  var Data_Either = $PS["Data.Either"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_Unit = $PS["Data.Unit"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = $PS["Text.Parsing.StringParser.Combinators"];                
  var string = function (nt) {
      return function (s) {
          if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints["indexOf'"](nt)(s.pos)(s.str))(new Data_Maybe.Just(s.pos))) {
              return new Data_Either.Right({
                  result: nt,
                  suffix: {
                      str: s.str,
                      pos: s.pos + Data_String_CodePoints.length(nt) | 0
                  }
              });
          };
          return new Data_Either.Left({
              pos: s.pos,
              error: new Text_Parsing_StringParser.ParseError("Expected '" + (nt + "'."))
          });
      };
  };
  var regex = function (pat) {
      var pattern = (function () {
          var v = Data_String_CodeUnits.stripPrefix("^")(pat);
          if (v instanceof Data_Maybe.Nothing) {
              return "^" + pat;
          };
          return pat;
      })();
      var matchRegex = function (r) {
          return function (v) {
              var remainder = Data_String_CodePoints.drop(v.pos)(v.str);
              var v1 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.head)(Data_String_Regex.match(r)(remainder));
              if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Data_Maybe.Just) {
                  return new Data_Either.Right({
                      result: v1.value0.value0,
                      suffix: {
                          str: v.str,
                          pos: v.pos + Data_String_CodePoints.length(v1.value0.value0) | 0
                      }
                  });
              };
              return new Data_Either.Left({
                  pos: v.pos,
                  error: new Text_Parsing_StringParser.ParseError("no match")
              });
          };
      };
      var v = Data_String_Regex.regex(pattern)(Data_String_Regex_Flags.noFlags);
      if (v instanceof Data_Either.Left) {
          return Text_Parsing_StringParser.fail("Text.Parsing.StringParser.String.regex': illegal regex " + pat);
      };
      if (v instanceof Data_Either.Right) {
          return matchRegex(v.value0);
      };
      throw new Error("Failed pattern match at Text.Parsing.StringParser.CodePoints (line 132, column 3 - line 136, column 19): " + [ v.constructor.name ]);
  };
  var eof = function (s) {
      if (s.pos < Data_String_CodePoints.length(s.str)) {
          return new Data_Either.Left({
              pos: s.pos,
              error: new Text_Parsing_StringParser.ParseError("Expected EOF")
          });
      };
      return new Data_Either.Right({
          result: Data_Unit.unit,
          suffix: s
      });
  };
  var anyChar = (function () {
      var toChar = (function () {
          var $38 = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint);
          return function ($39) {
              return Data_Char.fromCharCode($38($39));
          };
      })();
      return function (v) {
          var v1 = Data_String_CodePoints.codePointAt(v.pos)(v.str);
          if (v1 instanceof Data_Maybe.Just) {
              var v2 = toChar(v1.value0);
              if (v2 instanceof Data_Maybe.Just) {
                  return new Data_Either.Right({
                      result: v2.value0,
                      suffix: {
                          str: v.str,
                          pos: v.pos + 1 | 0
                      }
                  });
              };
              if (v2 instanceof Data_Maybe.Nothing) {
                  return new Data_Either.Left({
                      pos: v.pos,
                      error: Text_Parsing_StringParser.ParseError.create("CodePoint " + (Data_Show.show(Data_String_CodePoints.showCodePoint)(v1.value0) + " is not a character"))
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.StringParser.CodePoints (line 53, column 16 - line 55, column 100): " + [ v2.constructor.name ]);
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return new Data_Either.Left({
                  pos: v.pos,
                  error: new Text_Parsing_StringParser.ParseError("Unexpected EOF")
              });
          };
          throw new Error("Failed pattern match at Text.Parsing.StringParser.CodePoints (line 52, column 3 - line 56, column 64): " + [ v1.constructor.name ]);
      };
  })();
  var anyDigit = Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (c) {
      var $34 = c >= "0" && c <= "9";
      if ($34) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(c);
      };
      return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(c) + " is not a digit"));
  }));
  var lowerCaseChar = Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (c) {
      var $35 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(Data_Char.toCharCode(c))(Data_Array.range(97)(122));
      if ($35) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(c);
      };
      return Text_Parsing_StringParser.fail("Expected a lower case character but found " + Data_Show.show(Data_Show.showChar)(c));
  }));
  var satisfy = function (f) {
      return Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (c) {
          var $36 = f(c);
          if ($36) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(c);
          };
          return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(c) + " did not satisfy predicate"));
      }));
  };
  var $$char = function (c) {
      return Text_Parsing_StringParser_Combinators.withError(satisfy(function (v) {
          return v === c;
      }))("Could not match character " + Data_Show.show(Data_Show.showChar)(c));
  };                                                                                         
  var upperCaseChar = Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (c) {
      var $37 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(Data_Char.toCharCode(c))(Data_Array.range(65)(90));
      if ($37) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(c);
      };
      return Text_Parsing_StringParser.fail("Expected an upper case character but found " + Data_Show.show(Data_Show.showChar)(c));
  }));
  var anyLetter = Text_Parsing_StringParser_Combinators.withError(Control_Alt.alt(Text_Parsing_StringParser.altParser)(lowerCaseChar)(upperCaseChar))("Expected a letter");
  var alphaNum = Text_Parsing_StringParser_Combinators.withError(Control_Alt.alt(Text_Parsing_StringParser.altParser)(anyLetter)(anyDigit))("Expected a letter or a number");
  exports["eof"] = eof;
  exports["string"] = string;
  exports["satisfy"] = satisfy;
  exports["char"] = $$char;
  exports["alphaNum"] = alphaNum;
  exports["regex"] = regex;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Abc.Parser"] = $PS["Data.Abc.Parser"] || {};
  var exports = $PS["Data.Abc.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_Rational = $PS["Data.Rational"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_CodePoints = $PS["Text.Parsing.StringParser.CodePoints"];
  var Text_Parsing_StringParser_Combinators = $PS["Text.Parsing.StringParser.Combinators"];                
  var TempoDesignation = (function () {
      function TempoDesignation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TempoDesignation.create = function (value0) {
          return function (value1) {
              return new TempoDesignation(value0, value1);
          };
      };
      return TempoDesignation;
  })();
  var tupletLength = Text_Parsing_StringParser_CodePoints.regex("[2-9]");
  var tup = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Control_Bind.join(Data_Maybe.bindMaybe))(Text_Parsing_StringParser_Combinators.optionMaybe(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodePoints["char"](":"))(Text_Parsing_StringParser_Combinators.optionMaybe(tupletLength))));
  var toTupletInt = function (s) {
      return Data_Maybe.fromMaybe(3)(Data_Int.fromString(s));
  };
  var strToEol = Text_Parsing_StringParser_CodePoints.regex("[^\x0d\x0a]*");
  var space = Text_Parsing_StringParser_CodePoints["char"](" ");
  var shortDecoration = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_CodePoints.regex("[\\.~HLMOPSTuv]"))("short decoration");
  var sharpOrFlat = Data_Functor.map(Text_Parsing_StringParser.functorParser)(function (x) {
      var $10 = x === "#";
      if ($10) {
          return Data_Abc.Sharp.value;
      };
      return Data_Abc.Flat.value;
  })(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_CodePoints["char"]("#"))(Text_Parsing_StringParser_CodePoints["char"]("b")));
  var scoreSpace = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_CodePoints["char"]("\x09"))(space);
  var spacer = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Spacer.create)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.length)(Text_Parsing_StringParser_Combinators.many1(scoreSpace))))("space");
  var whiteSpace = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(function ($48) {
      return Data_String_CodePoints.singleton(Data_String_CodePoints.codePointFromChar($48));
  }))(Text_Parsing_StringParser_Combinators.many(scoreSpace));
  var unsupportedHeaderCode = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodePoints.regex("[a-qt-vx-zEJ]:"))(whiteSpace);
  var unsupportedHeader = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.UnsupportedHeader.value)(unsupportedHeaderCode))(strToEol))("unsupported header");
  var scientificPitchNotation = function (pc) {
      return function (oct) {
          var $11 = Data_String_Utils.includes(pc)("ABCDEFG");
          if ($11) {
              return Data_Abc.middlecOctave + oct | 0;
          };
          return (Data_Abc.middlecOctave + 1 | 0) + oct | 0;
      };
  };
  var runParser1 = function (v) {
      return function (s) {
          var formatErr = function (v1) {
              return {
                  pos: v1.pos,
                  error: v1.error.value0
              };
          };
          return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(formatErr)(function (v1) {
              return v1.result;
          })(v({
              str: s,
              pos: 0
          }));
      };
  };
  var rightBracket = Text_Parsing_StringParser_CodePoints["char"](")");
  var rightSlurBrackets = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List.length)(Text_Parsing_StringParser_Combinators.many(rightBracket)))("right slurs");
  var pitch = Text_Parsing_StringParser_CodePoints.regex("[A-Ga-g]");
  var phrygian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Phrygian.value)(whiteSpace))(Text_Parsing_StringParser_CodePoints.regex("[P|p][H|h][R|r][A-Za-z]*"));
  var octaveShift = function (s) {
      var up = Data_Array.length(Data_Array.filter(Data_Eq.eq(Data_Eq.eqChar)("'"))(Data_String_CodeUnits.toCharArray(s)));
      var down = Data_Array.length(Data_Array.filter(Data_Eq.eq(Data_Eq.eqChar)(","))(Data_String_CodeUnits.toCharArray(s)));
      return up - down | 0;
  };
  var nometer = Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Maybe.Nothing.value)(Text_Parsing_StringParser_CodePoints.string("none"));
  var newline = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_CodePoints.satisfy(Data_Eq.eq(Data_Eq.eqChar)("\x0a")))("expected newline");
  var moveOctave = Data_Functor.map(Text_Parsing_StringParser.functorParser)(octaveShift)(Text_Parsing_StringParser_CodePoints.regex("[',]*"));
  var mixolydian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Mixolydian.value)(whiteSpace))(Text_Parsing_StringParser_CodePoints.regex("[M|m][I|i][X|x][A-Za-z]*"));
  var minor = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Minor.value)(whiteSpace))(Text_Parsing_StringParser_CodePoints.regex("[M|m][A-Za-z]*"));
  var maybeTie = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
      return "-";
  }))(Text_Parsing_StringParser_Combinators.optionMaybe(Text_Parsing_StringParser_CodePoints.regex(" *-"))))("tie");
  var manyTill1 = Text_Parsing_StringParser_Combinators.manyTill;
  var major = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Major.value)(whiteSpace))(Text_Parsing_StringParser_CodePoints.regex("[M|m][A|a][J|j][A-Za-z]*"));
  var lydian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Lydian.value)(whiteSpace))(Text_Parsing_StringParser_CodePoints.regex("[L|l][Y|y][D|d][A-Za-z]*"));
  var lookupPitch = function (p) {
      var v = Data_String_Common.toUpper(p);
      if (v === "A") {
          return Data_Abc.A.value;
      };
      if (v === "B") {
          return Data_Abc.B.value;
      };
      if (v === "C") {
          return Data_Abc.C.value;
      };
      if (v === "D") {
          return Data_Abc.D.value;
      };
      if (v === "E") {
          return Data_Abc.E.value;
      };
      if (v === "F") {
          return Data_Abc.F.value;
      };
      if (v === "G") {
          return Data_Abc.G.value;
      };
      return Data_Abc.C.value;
  };
  var longDecoration = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_CodePoints["char"]("!"))(Text_Parsing_StringParser_CodePoints["char"]("!"))(Text_Parsing_StringParser_CodePoints.regex("[^\x0d\x0a!]*")))("long decoration");
  var locrian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Locrian.value)(whiteSpace))(Text_Parsing_StringParser_CodePoints.regex("[L|l][O|o][C|c][A-Za-z]*"));
  var literalQuotedString = (function () {
      var quotedString = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodePoints.string("\""))(Text_Parsing_StringParser_CodePoints.regex("(\\\\\"|[^\"\x0a])*")))(Text_Parsing_StringParser_CodePoints.string("\"")))("quoted string");
      return Data_Functor.map(Text_Parsing_StringParser.functorParser)(function (s) {
          return "\"" + (s + "\"");
      })(quotedString);
  })();
  var spacedQuotedString = Text_Parsing_StringParser["try"](Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(literalQuotedString))(whiteSpace));
  var leftBracket = Text_Parsing_StringParser_CodePoints["char"]("(");
  var leftSlurBrackets = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List.length)(Text_Parsing_StringParser_Combinators.many(leftBracket)))("left slurs");
  var keyName = Text_Parsing_StringParser_CodePoints.regex("[A-G]");
  var ionian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Ionian.value)(whiteSpace))(Text_Parsing_StringParser_CodePoints.regex("[I|i][O|o][N|n][A-Za-z]*"));
  var invisibleBarType = {
      thickness: Data_Abc.Invisible.value,
      repeat: Data_Maybe.Nothing.value,
      iteration: Data_Maybe.Nothing.value
  };
  var inlineInfo = function (isInline) {
      var pattern = (function () {
          if (isInline) {
              return "[^\x0d\x0a\\[\\]]*";
          };
          return "[^\x0d\x0a]*";
      })();
      return Text_Parsing_StringParser_CodePoints.regex(pattern);
  };
  var ignore = Text_Parsing_StringParser_Combinators.withError(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Ignore.value)(Text_Parsing_StringParser_CodePoints.regex("[#@;`\\*\\?]+")))("ignored character");
  var headerCode = function (c) {
      var pattern = Data_String_CodeUnits.fromCharArray([ c, ":" ]);
      return Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodePoints.string(pattern))(whiteSpace);
  };
  var history = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.History.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("H"))(strToEol)))("H header");
  var instruction = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Instruction.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("I"))(inlineInfo(isInline))))("I header");
  };
  var macro = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Macro.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("m"))(inlineInfo(isInline))))("m header");
  };
  var notes = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Notes.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("N"))(inlineInfo(isInline))))("N header");
  };
  var origin = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Origin.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("O"))(strToEol)))("O header");
  var parts = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Parts.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("P"))(inlineInfo(isInline))))("P header");
  };
  var remark = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Remark.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("r"))(inlineInfo(isInline))))("r header");
  };
  var rhythm = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Rhythm.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("R"))(inlineInfo(isInline))))("R header");
  };
  var source = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Source.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("S"))(strToEol)))("S header");
  var symbolLine = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.SymbolLine.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("s"))(inlineInfo(isInline))))("s header");
  };
  var title = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Title.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("T"))(inlineInfo(isInline))))("T header");
  };
  var transcription = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Transcription.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("Z"))(strToEol)))("Z header");
  var userDefined = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.UserDefined.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("U"))(inlineInfo(isInline))))("U header");
  };
  var wordsAfter = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.WordsAfter.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("W"))(inlineInfo(isInline))))("W header");
  };
  var wordsAligned = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.WordsAligned.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("w"))(inlineInfo(isInline))))("w header");
  };
  var tuneBodyOnlyInfo = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ symbolLine(isInline), wordsAligned(isInline) ]))("tune body only info");
  };
  var group = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Group.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("G"))(strToEol)))("G header");
  var fileUrl = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.FileUrl.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("F"))(strToEol)))("F header");
  var fieldContinuation = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.FieldContinuation.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("+"))(strToEol)))("field continuation");
  var endOfLine = Text_Parsing_StringParser_CodePoints.regex("\x0d\x0a");
  var dorian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Dorian.value)(whiteSpace))(Text_Parsing_StringParser_CodePoints.regex("[D|d][O|o][R|r][A-Za-z]*"));
  var discography = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Discography.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("D"))(strToEol)))("D header");
  var degenerateTupletBracket = Text_Parsing_StringParser["try"](Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_CodePoints.string("(("))(Text_Parsing_StringParser_CodePoints.string("(")));
  var decoration = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(shortDecoration)(longDecoration))(whiteSpace))("decoration");
  var decorations = Text_Parsing_StringParser_Combinators.many(decoration);
  var decoratedSpace = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.DecoratedSpace.create)(decorations))(Text_Parsing_StringParser_CodePoints["char"]("y"));
  var cutTime = Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(new Data_Maybe.Just(new Data_Tuple.Tuple(2, 2)))(Text_Parsing_StringParser_CodePoints.string("C|"));
  var crlf = Text_Parsing_StringParser_Combinators.withError(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)("\x0a")(endOfLine))("expected crlf");
  var eol = Control_Alt.alt(Text_Parsing_StringParser.altParser)(newline)(crlf);
  var counted = function (num) {
      return function (parser) {
          return Data_Unfoldable1.replicate1A(Text_Parsing_StringParser.applyParser)(Data_List_Types.unfoldable1NonEmptyList)(Data_List_Types.traversable1NonEmptyList)(num)(parser);
      };
  };
  var continuation = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Continuation.create)(Text_Parsing_StringParser_CodePoints["char"]("\\")))(Text_Parsing_StringParser_CodePoints.regex("[^\x0d\x0a]*")))(eol))("continuation");
  var composer = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Composer.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("C"))(strToEol)))("C header");
  var commonTime = Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(new Data_Maybe.Just(new Data_Tuple.Tuple(4, 4)))(Text_Parsing_StringParser_CodePoints["char"]("C"));
  var comment = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Comment.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodePoints.regex("%"))(strToEol)))("comment");
  var chordSymbol = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.ChordSymbol.create)(literalQuotedString))("chord symbol");
  var buildVoice = function (code) {
      return function (id) {
          return function (properties) {
              return new Data_Abc.Voice({
                  id: id,
                  properties: properties
              });
          };
      };
  };
  var buildTupletSignature = function (ps) {
      return function (mq) {
          return function (mr) {
              var p = toTupletInt(ps);
              var qdefault = (function () {
                  if (p === 2) {
                      return 3;
                  };
                  if (p === 3) {
                      return 2;
                  };
                  if (p === 4) {
                      return 3;
                  };
                  if (p === 6) {
                      return 2;
                  };
                  if (p === 8) {
                      return 3;
                  };
                  return 2;
              })();
              var q = Data_Maybe.fromMaybe(qdefault)(Data_Functor.map(Data_Maybe.functorMaybe)(toTupletInt)(mq));
              var r = Data_Maybe.fromMaybe(p)(Data_Functor.map(Data_Maybe.functorMaybe)(toTupletInt)(mr));
              return {
                  p: p,
                  q: q,
                  r: r
              };
          };
      };
  };
  var tupletSignature = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTupletSignature)(tupletLength))(tup))(tup))(whiteSpace);
  var buildTempoSignature3 = function (bpm) {
      var noteLengths = Data_List_NonEmpty.singleton(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(4));
      return {
          noteLengths: noteLengths,
          bpm: bpm,
          marking: Data_Maybe.Nothing.value
      };
  };
  var buildTempoSignature = function (marking) {
      return function (td) {
          return {
              noteLengths: td.value0,
              bpm: td.value1,
              marking: marking
          };
      };
  };
  var buildTempoSignature2 = function (marking) {
      return function (td) {
          return buildTempoSignature(new Data_Maybe.Just(marking))(td);
      };
  };
  var buildRest = function (r) {
      return {
          duration: r
      };
  };
  var buildRationalFromSlashList = function (xs) {
      var f = function (i) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(Data_Int.pow(2)(i));
      };
      return f(Data_List_NonEmpty.length(xs));
  };
  var manySlashes = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildRationalFromSlashList)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.cons)(Text_Parsing_StringParser_CodePoints["char"]("/")))(Text_Parsing_StringParser_Combinators.many1(Text_Parsing_StringParser_CodePoints["char"]("/"))));
  var buildPitch = function (a) {
      return function (pitchStr) {
          return new Data_Abc.Pitch({
              pitchClass: lookupPitch(pitchStr),
              accidental: a
          });
      };
  };
  var buildNote = function (macc) {
      return function (pitchStr) {
          return function (octave) {
              return function (ml) {
                  return function (mt) {
                      var tied = (function () {
                          if (mt instanceof Data_Maybe.Just) {
                              return true;
                          };
                          return false;
                      })();
                      var spn = scientificPitchNotation(pitchStr)(octave);
                      var pc = lookupPitch(Data_String_Common.toUpper(pitchStr));
                      var l = Data_Maybe.fromMaybe(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(1))(ml);
                      var acc = (function () {
                          if (macc instanceof Data_Maybe.Nothing) {
                              return Data_Abc.Implicit.value;
                          };
                          if (macc instanceof Data_Maybe.Just) {
                              return macc.value0;
                          };
                          throw new Error("Failed pattern match at Data.Abc.Parser (line 1240, column 7 - line 1242, column 20): " + [ macc.constructor.name ]);
                      })();
                      return {
                          pitchClass: pc,
                          accidental: acc,
                          octave: spn,
                          duration: l,
                          tied: tied
                      };
                  };
              };
          };
      };
  };
  var buildKeySignature = function (pStr) {
      return function (ma) {
          return function (mm) {
              return {
                  pitchClass: lookupPitch(pStr),
                  accidental: ma,
                  mode: Data_Maybe.fromMaybe(Data_Abc.Major.value)(mm)
              };
          };
      };
  };
  var buildKey = function (code) {
      return function (ks) {
          return function (pitches) {
              return new Data_Abc.Key({
                  keySignature: ks,
                  modifications: pitches
              });
          };
      };
  };
  var buildGraceableNote = function (maybeGrace) {
      return function (leftSlurs) {
          return function (decs) {
              return function (n) {
                  return function (rightSlurs) {
                      return {
                          maybeGrace: maybeGrace,
                          leftSlurs: leftSlurs,
                          decorations: decs,
                          abcNote: n,
                          rightSlurs: rightSlurs
                      };
                  };
              };
          };
      };
  };
  var buildGrace = function (isAcciaccatura) {
      return function (ns) {
          return {
              isAcciaccatura: isAcciaccatura,
              notes: ns
          };
      };
  };
  var buildChord = function (ns) {
      return function (ml) {
          var l = Data_Maybe.fromMaybe(Data_Rational.fromInt(1))(ml);
          return {
              notes: ns,
              duration: l
          };
      };
  };
  var buildBrokenOperator = function (s) {
      var $28 = Data_String_Utils.startsWith("<")(s);
      if ($28) {
          return new Data_Abc.LeftArrow(Data_String_CodePoints.length(s));
      };
      return new Data_Abc.RightArrow(Data_String_CodePoints.length(s));
  };
  var buildBarline = function (s) {
      return function (i) {
          var thickness = (function () {
              var $29 = Data_String_Utils.includes("|]")(s);
              if ($29) {
                  return Data_Abc.ThinThick.value;
              };
              var $30 = Data_String_Utils.includes("[|")(s);
              if ($30) {
                  return Data_Abc.ThickThin.value;
              };
              var $31 = Data_String_Utils.includes("||")(s);
              if ($31) {
                  return Data_Abc.ThinThin.value;
              };
              return Data_Abc.Thin.value;
          })();
          var f = function (c) {
              if (c === "[") {
                  return "|";
              };
              if (c === "]") {
                  return "|";
              };
              return c;
          };
          var normalised = Data_Functor.map(Data_Functor.functorArray)(f)(Data_String_CodeUnits.toCharArray(s));
          var repeatCount = Data_Array.length(Data_Array.filter(function (c) {
              return c === ":";
          })(normalised));
          var repeat = (function () {
              var $33 = repeatCount === 0;
              if ($33) {
                  return Data_Maybe.Nothing.value;
              };
              var $34 = repeatCount === 1;
              if ($34) {
                  var $35 = Data_String_Utils.includes(":|")(Data_String_CodeUnits.fromCharArray(normalised));
                  if ($35) {
                      return new Data_Maybe.Just(Data_Abc.End.value);
                  };
                  return new Data_Maybe.Just(Data_Abc.Begin.value);
              };
              return new Data_Maybe.Just(Data_Abc.BeginAndEnd.value);
          })();
          return {
              thickness: thickness,
              repeat: repeat,
              iteration: i
          };
      };
  };
  var buildBarTypeRecord = function (t) {
      return function (r) {
          return function (i) {
              return {
                  thickness: t,
                  repeat: r,
                  iteration: i
              };
          };
      };
  };
  var buildBar = function (bt) {
      return function (m) {
          return {
              startLine: bt,
              music: m
          };
      };
  };
  var buildAnnotation = function (s) {
      var firstChar = Data_String_CodeUnits.charAt(0)(s);
      var placement = (function () {
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === "^") {
              return Data_Abc.AboveNextSymbol.value;
          };
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === "_") {
              return Data_Abc.BelowNextSymbol.value;
          };
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === "<") {
              return Data_Abc.LeftOfNextSymbol.value;
          };
          if (firstChar instanceof Data_Maybe.Just && firstChar.value0 === ">") {
              return Data_Abc.RightOfNextSymbol.value;
          };
          return Data_Abc.Discretional.value;
      })();
      return new Data_Abc.Annotation(placement, Data_String_CodePoints.drop(1)(s));
  };
  var buildAccidental = function (s) {
      if (s === "^^") {
          return Data_Abc.DoubleSharp.value;
      };
      if (s === "__") {
          return Data_Abc.DoubleFlat.value;
      };
      if (s === "^") {
          return Data_Abc.Sharp.value;
      };
      if (s === "_") {
          return Data_Abc.Flat.value;
      };
      return Data_Abc.Natural.value;
  };
  var buildAbcTune = function (hs) {
      return function (b) {
          return {
              headers: hs,
              body: b
          };
      };
  };
  var brokenRhythmOperator = Text_Parsing_StringParser_CodePoints.regex("(<+|>+)");
  var degenerateBrokenRhythmOperator = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_Combinators.optional(leftBracket))(brokenRhythmOperator))(Text_Parsing_StringParser_Combinators.optional(rightBracket));
  var brokenRhythmTie = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBrokenOperator)(degenerateBrokenRhythmOperator))(whiteSpace);
  var book = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Book.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("B"))(strToEol)))("B Header");
  var barSeparator = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser_CodePoints.string("[|"), Text_Parsing_StringParser_CodePoints.string("|]:"), Text_Parsing_StringParser_CodePoints.string("|]"), Text_Parsing_StringParser_CodePoints.string("]|:"), Text_Parsing_StringParser_CodePoints.string("]|"), Text_Parsing_StringParser_CodePoints.string(":[|"), Text_Parsing_StringParser_CodePoints.string("|:"), Text_Parsing_StringParser_CodePoints.string(":|:"), Text_Parsing_StringParser_CodePoints.string(":||:"), Text_Parsing_StringParser_CodePoints.string(":|]"), Text_Parsing_StringParser_CodePoints.string(":||"), Text_Parsing_StringParser_CodePoints.string(":|"), Text_Parsing_StringParser_CodePoints.string("::"), Text_Parsing_StringParser_CodePoints.string("||:"), Text_Parsing_StringParser_CodePoints.string("||"), Text_Parsing_StringParser_CodePoints.string("|") ]);
  var area = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Area.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("A"))(strToEol)))("A header");
  var anyInt = Text_Parsing_StringParser_CodePoints.regex("(0|[1-9][0-9]*)");
  var $$int = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Functor.map(Data_Functor.functorFn)(Data_Maybe.fromMaybe(1))(Data_Int.fromString))(anyInt))("expected a positive integer");
  var anyRat = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Text_Parsing_StringParser_Combinators.option(1)($$int)))(Text_Parsing_StringParser_CodePoints["char"]("/")))(Text_Parsing_StringParser_Combinators.option(2)($$int));
  var degenerateBarRepeat = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBarTypeRecord(Data_Abc.Thin.value)(Data_Maybe.Nothing.value))(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(Text_Parsing_StringParser_CodePoints["char"]("[")))($$int)));
  var degenerateTempo = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTempoSignature3)($$int);
  var integralAsRational = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Rational.fromInt)($$int);
  var noteDur = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](manySlashes), Text_Parsing_StringParser["try"](anyRat), integralAsRational ]);
  var meterSignature = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Tuple.Tuple.create)($$int))(Text_Parsing_StringParser_CodePoints["char"]("/")))($$int))(whiteSpace));
  var meterDefinition = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ cutTime, commonTime, meterSignature, nometer ]);
  var meter = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Meter.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("M"))(meterDefinition)))("M header");
  var rational = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))($$int))(Text_Parsing_StringParser_CodePoints["char"]("/")))($$int);
  var headerRational = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(rational)(whiteSpace);
  var noteDuration = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(rational)(whiteSpace);
  var unitNoteLength = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.UnitNoteLength.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("L"))(noteDuration)))("L header");
  var referenceNumber = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.ReferenceNumber.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("X"))(Text_Parsing_StringParser_Combinators.optionMaybe($$int))))("x header");
  var tuneInfo = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ area, book, composer, discography, fileUrl, group, history, origin, source, referenceNumber, transcription, unsupportedHeader ]))("tune info");
  var repeatSection = $$int;
  var normalBarline = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBarline)(barSeparator))(Text_Parsing_StringParser_Combinators.optionMaybe(repeatSection)))("bartype");
  var barline = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ normalBarline, degenerateBarRepeat ]);
  var tempoDesignation = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(TempoDesignation.create)(Text_Parsing_StringParser_Combinators.many1(headerRational)))(Text_Parsing_StringParser_CodePoints["char"]("=")))($$int);
  var prefixedTempoDesignation = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTempoSignature2)(spacedQuotedString))(tempoDesignation);
  var suffixedTempoDesignation = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Function.flip(buildTempoSignature2))(tempoDesignation))(spacedQuotedString);
  var unlabelledTempoDesignation = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildTempoSignature(Data_Maybe.Nothing.value))(tempoDesignation);
  var tempoSignature = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](suffixedTempoDesignation), Text_Parsing_StringParser["try"](unlabelledTempoDesignation), degenerateTempo, prefixedTempoDesignation ]))(whiteSpace);
  var tempo = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Tempo.create)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(headerCode("Q"))(tempoSignature)))("Q header");
  var annotationString = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodePoints.string("\""))(Text_Parsing_StringParser_CodePoints.regex("[\\^\\>\\<-@](\\\\\"|[^\"\x0a])*")))(Text_Parsing_StringParser_CodePoints.string("\"")))("annotation");
  var annotation = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildAnnotation)(annotationString))("annotation");
  var alphaNumString = Data_Functor.map(Text_Parsing_StringParser.functorParser)((function () {
      var $49 = Data_Array.fromFoldable(Data_List_Types.foldableList);
      return function ($50) {
          return Data_String_CodeUnits.fromCharArray($49(Data_List_NonEmpty.toList($50)));
      };
  })())(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(Text_Parsing_StringParser_Combinators.many1(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_CodePoints.alphaNum)(Text_Parsing_StringParser_CodePoints["char"]("-")))(Text_Parsing_StringParser_CodePoints["char"]("+")))));
  var kvPair = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Tuple.Tuple.create)(alphaNumString))(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodePoints["char"]("="))(Control_Alt.alt(Text_Parsing_StringParser.altParser)(literalQuotedString)(alphaNumString)));
  var voiceProperties = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_List_Types.foldableList))(Text_Parsing_StringParser_Combinators.many(kvPair)))(whiteSpace);
  var voice = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildVoice)(headerCode("V")))(alphaNumString))(voiceProperties))("V header");
  };
  var aeolian = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(Data_Abc.Aeolian.value)(whiteSpace))(Text_Parsing_StringParser_CodePoints.regex("[A|a][E|e][O|o][A-Za-z]*"));
  var mode = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](major), ionian, dorian, phrygian, lydian, mixolydian, aeolian, locrian, minor ]);
  var keySignature = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildKeySignature)(keyName))(Text_Parsing_StringParser_Combinators.option(Data_Abc.Natural.value)(sharpOrFlat)))(whiteSpace))(Text_Parsing_StringParser_Combinators.optionMaybe(mode));
  var parseKeySignature = function (s) {
      var v = runParser1(keySignature)(s);
      if (v instanceof Data_Either.Right) {
          return new Data_Either.Right({
              keySignature: v.value0,
              modifications: Data_List_Types.Nil.value
          });
      };
      if (v instanceof Data_Either.Left) {
          return new Data_Either.Left(v.value0);
      };
      throw new Error("Failed pattern match at Data.Abc.Parser (line 1552, column 5 - line 1560, column 19): " + [ v.constructor.name ]);
  };
  var accidental = Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildAccidental)(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser_CodePoints.string("^^"), Text_Parsing_StringParser_CodePoints.string("__"), Text_Parsing_StringParser_CodePoints.string("^"), Text_Parsing_StringParser_CodePoints.string("_"), Text_Parsing_StringParser_CodePoints.string("=") ]));
  var keyAccidental = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildPitch)(accidental))(pitch);
  var keyAccidentals = Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(whiteSpace)(Text_Parsing_StringParser_Combinators.sepBy(keyAccidental)(space));
  var key = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildKey)(headerCode("K")))(keySignature))(keyAccidentals))("K header");
  var anywhereInfo = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ instruction(isInline), key, unitNoteLength, meter, macro(isInline), notes(isInline), parts(isInline), tempo, rhythm(isInline), remark(isInline), title(isInline), userDefined(isInline), voice(isInline), wordsAfter(isInline), fieldContinuation, comment ]))("anywhere info");
  };
  var informationField = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ anywhereInfo(isInline), tuneInfo ]))("header");
  };
  var header = Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(informationField(false))(eol);
  var headers = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.many(header))("headers");
  var tuneBodyInfo = function (isInline) {
      return Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ tuneBodyOnlyInfo(isInline), anywhereInfo(isInline) ]))("tune body info");
  };
  var inline = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Inline.create)(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_CodePoints["char"]("["))(Text_Parsing_StringParser_CodePoints["char"]("]"))(tuneBodyInfo(true))))("inline header");
  var tuneBodyHeader = Text_Parsing_StringParser_Combinators.withError(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.BodyInfo.create)(tuneBodyInfo(true)))(eol))("tune body header");
  var maybeAccidental = Text_Parsing_StringParser_Combinators.optionMaybe(accidental);
  var acciaccatura = Data_Functor.map(Text_Parsing_StringParser.functorParser)(function (v) {
      return true;
  })(Text_Parsing_StringParser_Combinators.optionMaybe(Text_Parsing_StringParser_CodePoints["char"]("/")));
  var abcRest = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildRest)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.fromMaybe(Data_Rational.fromInt(1)))(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodePoints.regex("[XxZz]"))(Text_Parsing_StringParser_Combinators.optionMaybe(noteDur)))))("abcRest");
  var rest = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Rest.create)(abcRest))("rest");
  var abcNote = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildNote)(maybeAccidental))(pitch))(moveOctave))(Text_Parsing_StringParser_Combinators.optionMaybe(noteDur)))(maybeTie))("ABC note");
  var grace = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildGrace)(acciaccatura))(Text_Parsing_StringParser_Combinators.many1(abcNote));
  var graceBracket = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_CodePoints["char"]("{"))(Text_Parsing_StringParser_CodePoints["char"]("}"))(grace))("grace bracket");
  var graceableNote = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildGraceableNote)(Text_Parsing_StringParser_Combinators.optionMaybe(graceBracket)))(leftSlurBrackets))(decorations))(abcNote))(rightSlurBrackets))("graceable note");
  var brokenRhythmPair = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.BrokenRhythmPair.create)(graceableNote))(brokenRhythmTie))(graceableNote))("broken rhythm pair");
  var note = Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Note.create)(graceableNote);
  var restOrNote = Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Either.Left.create)(abcRest))(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Either.Right.create)(graceableNote))(whiteSpace));
  var tuplet = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.optionMaybe(graceBracket))(function (maybeGrace) {
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(degenerateTupletBracket)(tupletSignature))(function (signature) {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(counted(signature.r)(restOrNote))(function (contents) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Data_Abc.Tuplet(maybeGrace, signature, contents));
          });
      });
  });
  var abcChord = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildChord)(Text_Parsing_StringParser_Combinators.between(Text_Parsing_StringParser_CodePoints["char"]("["))(Text_Parsing_StringParser_CodePoints["char"]("]"))(Text_Parsing_StringParser_Combinators.many1(abcNote))))(Text_Parsing_StringParser_Combinators.optionMaybe(noteDur)))("ABC chord");
  var chord = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Chord.create)(abcChord))("chord");
  var scoreItem = Text_Parsing_StringParser_Combinators.withError(Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ Text_Parsing_StringParser["try"](chord), Text_Parsing_StringParser["try"](inline), continuation, Text_Parsing_StringParser["try"](decoratedSpace), ignore, spacer, Text_Parsing_StringParser["try"](annotation), chordSymbol, Text_Parsing_StringParser["try"](tuplet), rest, Text_Parsing_StringParser["try"](brokenRhythmPair), note ]))("score item");
  var bar = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBar)(barline))(Text_Parsing_StringParser_Combinators.many(scoreItem)))("bar");
  var fullyBarredLine = Text_Parsing_StringParser_Combinators.withError(manyTill1(bar)(eol))("fully barred line");
  var introBar = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildBar(invisibleBarType))(Text_Parsing_StringParser_Combinators.many(scoreItem)))("intro bar");
  var introLine = Text_Parsing_StringParser_Combinators.withError(Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_Types.Cons.create)(introBar))(manyTill1(bar)(eol)))("intro line");
  var score = Text_Parsing_StringParser_Combinators.withError(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Abc.Score.create)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(introLine)(fullyBarredLine)))("score");
  var body = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_Types.Cons.create)(score))(Text_Parsing_StringParser_Combinators.manyTill(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser["try"](tuneBodyHeader))(score))(Text_Parsing_StringParser_CodePoints.eof));
  var abc = Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(buildAbcTune)(headers))(body);
  var parse = function (s) {
      var v = runParser1(abc)(s);
      if (v instanceof Data_Either.Right) {
          return new Data_Either.Right(v.value0);
      };
      if (v instanceof Data_Either.Left) {
          return new Data_Either.Left(v.value0);
      };
      throw new Error("Failed pattern match at Data.Abc.Parser (line 1543, column 5 - line 1548, column 19): " + [ v.constructor.name ]);
  };
  exports["parse"] = parse;
  exports["parseKeySignature"] = parseKeySignature;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Abc.Transposition"] = $PS["Data.Abc.Transposition"] || {};
  var exports = $PS["Data.Abc.Transposition"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Abc_Accidentals = $PS["Data.Abc.Accidentals"];
  var Data_Abc_KeySignature = $PS["Data.Abc.KeySignature"];
  var Data_Abc_Metadata = $PS["Data.Abc.Metadata"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var transpositionDistance = function (target) {
      return function (source) {
          var distance = Data_Abc_KeySignature.pitchNumber(target) - Data_Abc_KeySignature.pitchNumber(source) | 0;
          var $14 = distance <= (-7 | 0);
          if ($14) {
              return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_Abc_KeySignature.notesInChromaticScale + distance | 0)(Data_Abc_KeySignature.notesInChromaticScale);
          };
          return distance;
      };
  };
  var sharpenFlatEnharmonic = function (ka) {
      if (ka.value0.pitchClass instanceof Data_Abc.G && ka.value0.accidental instanceof Data_Abc.Flat) {
          return new Data_Abc.Pitch({
              pitchClass: Data_Abc.F.value,
              accidental: Data_Abc.Sharp.value
          });
      };
      if (ka.value0.pitchClass instanceof Data_Abc.D && ka.value0.accidental instanceof Data_Abc.Flat) {
          return new Data_Abc.Pitch({
              pitchClass: Data_Abc.C.value,
              accidental: Data_Abc.Sharp.value
          });
      };
      return ka;
  };
  var sharpNoteNumbers = (function () {
      var f = function (nn) {
          var v = Data_Tuple.fst(nn);
          var pos = Data_Tuple.snd(nn);
          return Data_Eq.eq(Data_Abc.eqAccidental)(v.value0.accidental)(Data_Abc.Sharp.value) && (Data_Eq.notEq(Data_Abc.eqPitchCLass)(v.value0.pitchClass)(Data_Abc.E.value) && Data_Eq.notEq(Data_Abc.eqPitchCLass)(v.value0.pitchClass)(Data_Abc.B.value)) || Data_Eq.eq(Data_Abc.eqAccidental)(v.value0.accidental)(Data_Abc.Natural.value);
      };
      return Data_List.filter(f)(Data_Abc_KeySignature.pitchNumbers);
  })();
  var sharpNotedNumbers = (function () {
      var invert = function (v) {
          return new Data_Tuple.Tuple(v.value1, v.value0);
      };
      return Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(invert)(sharpNoteNumbers));
  })();
  var replaceKeyHeader = function (newmks) {
      return function (hs) {
          var f = function (h) {
              if (h instanceof Data_Abc.Key) {
                  return false;
              };
              return true;
          };
          var newhs = Data_List.filter(f)(hs);
          return Data_List.reverse(new Data_List_Types.Cons(new Data_Abc.Key(newmks), Data_List.reverse(newhs)));
      };
  };
  var processHeader = function (h) {
      if (h instanceof Data_Abc.Key) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (state) {
              var newmks = Data_Abc_KeySignature.transposeKeySignatureBy(state.keyDistance)(h.value0);
              var newState = (function () {
                  var $30 = {};
                  for (var $31 in state) {
                      if ({}.hasOwnProperty.call(state, $31)) {
                          $30[$31] = state[$31];
                      };
                  };
                  $30.sourcemks = h.value0;
                  $30.sourceBarAccidentals = Data_Abc_Accidentals.empty;
                  $30.targetmks = newmks;
                  $30.targetKeySet = Data_Abc_KeySignature.modifiedKeySet(newmks);
                  $30.targetScale = Data_Abc_KeySignature.diatonicScale(newmks.keySignature);
                  $30.targetBarAccidentals = Data_Abc_Accidentals.empty;
                  return $30;
              })();
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(newState))(function () {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Abc.Key(newmks));
              });
          });
      };
      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(h);
  };
  var noteNumber = function (n) {
      return Data_Abc_KeySignature.pitchNumber(new Data_Abc.Pitch({
          pitchClass: n.pitchClass,
          accidental: n.accidental
      }));
  };
  var noteIndex = function (from) {
      return function (increment) {
          var to = from + increment | 0;
          var $34 = to < 0;
          if ($34) {
              return {
                  notePosition: Data_Abc_KeySignature.notesInChromaticScale + to | 0,
                  octaveIncrement: -1 | 0
              };
          };
          var $35 = to >= Data_Abc_KeySignature.notesInChromaticScale;
          if ($35) {
              return {
                  notePosition: to - Data_Abc_KeySignature.notesInChromaticScale | 0,
                  octaveIncrement: 1
              };
          };
          return {
              notePosition: to,
              octaveIncrement: 0
          };
      };
  };
  var keyDistance = function (targetmks) {
      return function (srcmks) {
          var $36 = Data_Eq.notEq(Data_Abc.eqMode)(targetmks.keySignature.mode)(srcmks.keySignature.mode);
          if ($36) {
              return new Data_Either.Left("incompatible modes");
          };
          return new Data_Either.Right(transpositionDistance(new Data_Abc.Pitch({
              pitchClass: targetmks.keySignature.pitchClass,
              accidental: targetmks.keySignature.accidental
          }))(new Data_Abc.Pitch({
              pitchClass: srcmks.keySignature.pitchClass,
              accidental: srcmks.keySignature.accidental
          })));
      };
  };
  var flatNoteNumbers = (function () {
      var f = function (nn) {
          var v = Data_Tuple.fst(nn);
          var pos = Data_Tuple.snd(nn);
          return Data_Eq.eq(Data_Abc.eqAccidental)(v.value0.accidental)(Data_Abc.Flat.value) && (Data_Eq.notEq(Data_Abc.eqPitchCLass)(v.value0.pitchClass)(Data_Abc.F.value) && Data_Eq.notEq(Data_Abc.eqPitchCLass)(v.value0.pitchClass)(Data_Abc.C.value)) || Data_Eq.eq(Data_Abc.eqAccidental)(v.value0.accidental)(Data_Abc.Natural.value);
      };
      return Data_List.filter(f)(Data_Abc_KeySignature.pitchNumbers);
  })();
  var flatNotedNumbers = (function () {
      var invert = function (v) {
          return new Data_Tuple.Tuple(v.value1, v.value0);
      };
      return Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(invert)(flatNoteNumbers));
  })();
  var pitchFromInt = function (ks) {
      return function (i) {
          var dict = (function () {
              var $42 = Data_Abc_KeySignature.isCOrSharpKey(ks);
              if ($42) {
                  return sharpNotedNumbers;
              };
              return flatNotedNumbers;
          })();
          return Data_Maybe.fromMaybe(new Data_Abc.Pitch({
              pitchClass: Data_Abc.C.value,
              accidental: Data_Abc.Natural.value
          }))(Data_Map_Internal.lookup(Data_Ord.ordInt)(i)(dict));
      };
  };
  var defaultKey = {
      keySignature: {
          pitchClass: Data_Abc.C.value,
          accidental: Data_Abc.Natural.value,
          mode: Data_Abc.Major.value
      },
      modifications: Data_List_Types.Nil.value
  };
  var addBarAccidental = function (pc) {
      return function (acc) {
          return function (accs) {
              if (acc instanceof Data_Abc.Implicit) {
                  return accs;
              };
              return Data_Abc_Accidentals.add(pc)(acc)(accs);
          };
      };
  };
  var transposeNoteBy = function (note) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (state) {
          var inSourceKeyAccidental = Data_Abc_Accidentals.implicitInKeySet(note.pitchClass)(Data_Abc_KeySignature.modifiedKeySet(state.sourcemks));
          var inSourceBarAccidental = Data_Map_Internal.lookup(Data_Abc.ordPitchCLass)(note.pitchClass)(state.sourceBarAccidentals);
          var maybeSourceAccidental = Data_Foldable.oneOf(Data_List_Types.foldableList)(Data_Maybe.plusMaybe)(new Data_List_Types.Cons(inSourceBarAccidental, new Data_List_Types.Cons(inSourceKeyAccidental, Data_List_Types.Nil.value)));
          var implicitSourceAccidental = Data_Maybe.fromMaybe(Data_Abc.Implicit.value)(maybeSourceAccidental);
          var explicitSourceNote = (function () {
              if (note.accidental instanceof Data_Abc.Implicit) {
                  return {
                      accidental: implicitSourceAccidental,
                      duration: note.duration,
                      octave: note.octave,
                      pitchClass: note.pitchClass,
                      tied: note.tied
                  };
              };
              return note;
          })();
          var srcNum = noteNumber(explicitSourceNote);
          var noteIdx = noteIndex(srcNum)(state.keyDistance);
          var ka = pitchFromInt(state.targetmks.keySignature)(noteIdx.notePosition);
          var v = sharpenFlatEnharmonic(ka);
          var targetBarAcc = Data_Abc_Accidentals.lookup(v.value0.pitchClass)(state.targetBarAccidentals);
          var targetAcc = (function () {
              var $46 = Data_Abc_Accidentals.member(new Data_Abc.Pitch(v.value0))(state.targetBarAccidentals);
              if ($46) {
                  return Data_Abc.Implicit.value;
              };
              var $47 = Data_Maybe.isJust(targetBarAcc);
              if ($47) {
                  return v.value0.accidental;
              };
              var $48 = Data_Abc_KeySignature.inKeySet(new Data_Abc.Pitch(v.value0))(state.targetScale);
              if ($48) {
                  return Data_Abc.Implicit.value;
              };
              return v.value0.accidental;
          })();
          var transposedNote = {
              pitchClass: v.value0.pitchClass,
              accidental: targetAcc,
              octave: note.octave + noteIdx.octaveIncrement | 0,
              duration: note.duration,
              tied: note.tied
          };
          var newTargetAccs = (function () {
              if (targetAcc instanceof Data_Abc.Implicit) {
                  return state.targetBarAccidentals;
              };
              return addBarAccidental(v.value0.pitchClass)(v.value0.accidental)(state.targetBarAccidentals);
          })();
          var newSourceAccs = addBarAccidental(note.pitchClass)(note.accidental)(state.sourceBarAccidentals);
          var newState = (function () {
              var $50 = {};
              for (var $51 in state) {
                  if ({}.hasOwnProperty.call(state, $51)) {
                      $50[$51] = state[$51];
                  };
              };
              $50.sourceBarAccidentals = newSourceAccs;
              $50.targetBarAccidentals = newTargetAccs;
              return $50;
          })();
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(newState))(function () {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(transposedNote);
          });
      });
  };
  var transposeNoteList = function (nonemptyns) {
      return Data_Traversable.traverse(Data_List_Types.traversableNonEmptyList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(transposeNoteBy)(nonemptyns);
  };
  var transposeChord = function (c) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeNoteList(c.notes))(function (newNotes) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))({
              notes: newNotes,
              duration: c.duration
          });
      });
  };
  var transposeGrace = function (mGrace) {
      if (mGrace instanceof Data_Maybe.Just) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeNoteList(mGrace.value0.notes))(function (newNotes) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Maybe.Just({
                  notes: newNotes,
                  isAcciaccatura: mGrace.value0.isAcciaccatura
              }));
          });
      };
      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
  };
  var transposeGraceableNoteBy = function (gn) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeNoteBy(gn.abcNote))(function (abcNote) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeGrace(gn.maybeGrace))(function (maybeGrace) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))({
                  maybeGrace: maybeGrace,
                  leftSlurs: gn.leftSlurs,
                  decorations: gn.decorations,
                  abcNote: abcNote,
                  rightSlurs: gn.rightSlurs
              });
          });
      });
  };
  var transposeRestOrNoteBy = function (restOrNote) {
      if (restOrNote instanceof Data_Either.Left) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Either.Left(restOrNote.value0));
      };
      if (restOrNote instanceof Data_Either.Right) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeGraceableNoteBy(restOrNote.value0))(function (newN) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Either.Right(newN));
          });
      };
      throw new Error("Failed pattern match at Data.Abc.Transposition (line 300, column 3 - line 305, column 24): " + [ restOrNote.constructor.name ]);
  };
  var transposeRestOrNoteList = function (nonemptyns) {
      return Data_Traversable.traverse(Data_List_Types.traversableNonEmptyList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(transposeRestOrNoteBy)(nonemptyns);
  };
  var transposeMusic = function (m) {
      if (m instanceof Data_Abc.Note) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeGraceableNoteBy(m.value0))(function (newN) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Abc.Note(newN));
          });
      };
      if (m instanceof Data_Abc.BrokenRhythmPair) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeGraceableNoteBy(m.value0))(function (result1) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeGraceableNoteBy(m.value2))(function (result2) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Abc.BrokenRhythmPair(result1, m.value1, result2));
              });
          });
      };
      if (m instanceof Data_Abc.Tuplet) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeGrace(m.value0))(function (newGrace) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeRestOrNoteList(m.value2))(function (newNs) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Abc.Tuplet(newGrace, m.value1, newNs));
              });
          });
      };
      if (m instanceof Data_Abc.Chord) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeChord(m.value0))(function (newC) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Abc.Chord(newC));
          });
      };
      if (m instanceof Data_Abc.ChordSymbol) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Abc.Ignore.value);
      };
      if (m instanceof Data_Abc.Inline) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(processHeader(m.value0))(function (newH) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Abc.Inline(newH));
          });
      };
      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(m);
  };
  var transposeMusicList = function (musics) {
      return Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(transposeMusic)(musics);
  };
  var transposeBar = function (bar) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (state) {
          var state$prime = (function () {
              var $73 = {};
              for (var $74 in state) {
                  if ({}.hasOwnProperty.call(state, $74)) {
                      $73[$74] = state[$74];
                  };
              };
              $73.sourceBarAccidentals = Data_Abc_Accidentals.empty;
              $73.targetBarAccidentals = Data_Abc_Accidentals.empty;
              return $73;
          })();
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(state$prime))(function () {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeMusicList(bar.music))(function (newMusic) {
                  var newBar = {
                      music: newMusic,
                      startLine: bar.startLine
                  };
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(newBar);
              });
          });
      });
  };
  var transposeBarList = function (bars) {
      return Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(transposeBar)(bars);
  };
  var transposeBodyPart = function (bp) {
      if (bp instanceof Data_Abc.Score) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeBarList(bp.value0))(function (newBars) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Abc.Score(newBars));
          });
      };
      if (bp instanceof Data_Abc.BodyInfo) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(processHeader(bp.value0))(function (newHeader) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Abc.BodyInfo(newHeader));
          });
      };
      throw new Error("Failed pattern match at Data.Abc.Transposition (line 211, column 3 - line 222, column 34): " + [ bp.constructor.name ]);
  };
  var transposeTuneBody = function (body) {
      return Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(transposeBodyPart)(body);
  };
  var transposeTune = function (t) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (state) {
          var newHeaders = replaceKeyHeader(state.targetmks)(t.headers);
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(transposeTuneBody(t.body))(function (newTuneBody) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))({
                  headers: newHeaders,
                  body: newTuneBody
              });
          });
      });
  };
  var runTune = function (state) {
      return function (tune) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_State_Trans.evalStateT(Data_Identity.functorIdentity)(transposeTune(tune))(state));
      };
  };
  var transposeTo = function (v) {
      return function (t) {
          var mks = Data_Maybe.fromMaybe(defaultKey)(Data_Abc_Metadata.getKeySig(t));
          var targetmks = {
              keySignature: {
                  pitchClass: v.value0.pitchClass,
                  accidental: v.value0.accidental,
                  mode: mks.keySignature.mode
              },
              modifications: Data_List_Types.Nil.value
          };
          var d = transpositionDistance(new Data_Abc.Pitch(v.value0))(new Data_Abc.Pitch({
              pitchClass: mks.keySignature.pitchClass,
              accidental: mks.keySignature.accidental
          }));
          var $81 = d === 0;
          if ($81) {
              return t;
          };
          var transpositionState = {
              keyDistance: d,
              sourcemks: mks,
              sourceBarAccidentals: Data_Abc_Accidentals.empty,
              targetmks: targetmks,
              targetKeySet: Data_Abc_KeySignature.modifiedKeySet(targetmks),
              targetScale: Data_Abc_KeySignature.diatonicScale(targetmks.keySignature),
              targetBarAccidentals: Data_Abc_Accidentals.empty
          };
          return runTune(transpositionState)(t);
      };
  };
  exports["transposeTo"] = transposeTo;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Coyoneda"] = $PS["Data.Coyoneda"] || {};
  var exports = $PS["Data.Coyoneda"];
  var Control_Category = $PS["Control.Category"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Functor = $PS["Data.Functor"];                        
  var CoyonedaF = (function () {
      function CoyonedaF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CoyonedaF.create = function (value0) {
          return function (value1) {
              return new CoyonedaF(value0, value1);
          };
      };
      return CoyonedaF;
  })();
  var Coyoneda = function (x) {
      return x;
  };
  var unCoyoneda = function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return f(v1.value0)(v1.value1);
          })(v);
      };
  };
  var coyoneda = function (k) {
      return function (fi) {
          return Coyoneda(Data_Exists.mkExists(new CoyonedaF(k, fi)));
      };
  };
  var functorCoyoneda = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return coyoneda(function ($85) {
                  return f(v1.value0($85));
              })(v1.value1);
          })(v);
      };
  });
  var liftCoyoneda = coyoneda(Control_Category.identity(Control_Category.categoryFn));
  exports["unCoyoneda"] = unCoyoneda;
  exports["liftCoyoneda"] = liftCoyoneda;
  exports["functorCoyoneda"] = functorCoyoneda;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Data.OrdBox"] = $PS["Halogen.Data.OrdBox"] || {};
  var exports = $PS["Halogen.Data.OrdBox"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];                
  var OrdBox = (function () {
      function OrdBox(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OrdBox.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OrdBox(value0, value1, value2);
              };
          };
      };
      return OrdBox;
  })();
  var mkOrdBox = function (dictOrd) {
      return OrdBox.create(Data_Eq.eq(dictOrd.Eq0()))(Data_Ord.compare(dictOrd));
  };
  var eqOrdBox = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0(v.value2)(v1.value2);
      };
  });
  var ordOrdBox = new Data_Ord.Ord(function () {
      return eqOrdBox;
  }, function (v) {
      return function (v1) {
          return v.value1(v.value2)(v1.value2);
      };
  });
  exports["mkOrdBox"] = mkOrdBox;
  exports["ordOrdBox"] = ordOrdBox;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Data.Slot"] = $PS["Halogen.Data.Slot"] || {};
  var exports = $PS["Halogen.Data.Slot"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Halogen_Data_OrdBox = $PS["Halogen.Data.OrdBox"];
  var pop = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (sym) {
                  return function (key) {
                      return function (v) {
                          return Data_Map_Internal.pop(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
                      };
                  };
              };
          };
      };
  };
  var lookup = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (sym) {
                  return function (key) {
                      return function (v) {
                          return Data_Map_Internal.lookup(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(v);
                      };
                  };
              };
          };
      };
  };
  var insert = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (sym) {
                  return function (key) {
                      return function (val) {
                          return function (v) {
                              return Data_Map_Internal.insert(Data_Tuple.ordTuple(Data_Ord.ordString)(Halogen_Data_OrdBox.ordOrdBox))(new Data_Tuple.Tuple(Data_Symbol.reflectSymbol(dictIsSymbol)(sym), Halogen_Data_OrdBox.mkOrdBox(dictOrd)(key)))(val)(v);
                          };
                      };
                  };
              };
          };
      };
  };
  var foreachSlot = function (dictApplicative) {
      return function (v) {
          return function (k) {
              return Data_Foldable.traverse_(dictApplicative)(Data_Map_Internal.foldableMap)(function ($37) {
                  return k($37);
              })(v);
          };
      };
  };
  var empty = Data_Map_Internal.empty;
  exports["empty"] = empty;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["pop"] = pop;
  exports["foreachSlot"] = foreachSlot;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Aff.Class"] = $PS["Effect.Aff.Class"] || {};
  var exports = $PS["Effect.Aff.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var MonadAff = function (MonadEffect0, liftAff) {
      this.MonadEffect0 = MonadEffect0;
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(function () {
      return Effect_Aff.monadEffectAff;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  exports["liftAff"] = liftAff;
  exports["MonadAff"] = MonadAff;
  exports["monadAffAff"] = monadAffAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Query.ChildQuery"] = $PS["Halogen.Query.ChildQuery"] || {};
  var exports = $PS["Halogen.Query.ChildQuery"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ChildQuery = (function () {
      function ChildQuery(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ChildQuery.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ChildQuery(value0, value1, value2);
              };
          };
      };
      return ChildQuery;
  })();
  var unChildQueryBox = Unsafe_Coerce.unsafeCoerce;
  var mkChildQueryBox = Unsafe_Coerce.unsafeCoerce;
  exports["ChildQuery"] = ChildQuery;
  exports["mkChildQueryBox"] = mkChildQueryBox;
  exports["unChildQueryBox"] = unChildQueryBox;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Query.HalogenM"] = $PS["Halogen.Query.HalogenM"] || {};
  var exports = $PS["Halogen.Query.HalogenM"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Halogen_Query_ChildQuery = $PS["Halogen.Query.ChildQuery"];                  
  var SubscriptionId = function (x) {
      return x;
  };
  var ForkId = function (x) {
      return x;
  };
  var State = (function () {
      function State(value0) {
          this.value0 = value0;
      };
      State.create = function (value0) {
          return new State(value0);
      };
      return State;
  })();
  var Subscribe = (function () {
      function Subscribe(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Subscribe.create = function (value0) {
          return function (value1) {
              return new Subscribe(value0, value1);
          };
      };
      return Subscribe;
  })();
  var Unsubscribe = (function () {
      function Unsubscribe(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Unsubscribe.create = function (value0) {
          return function (value1) {
              return new Unsubscribe(value0, value1);
          };
      };
      return Unsubscribe;
  })();
  var Lift = (function () {
      function Lift(value0) {
          this.value0 = value0;
      };
      Lift.create = function (value0) {
          return new Lift(value0);
      };
      return Lift;
  })();
  var ChildQuery = (function () {
      function ChildQuery(value0) {
          this.value0 = value0;
      };
      ChildQuery.create = function (value0) {
          return new ChildQuery(value0);
      };
      return ChildQuery;
  })();
  var Raise = (function () {
      function Raise(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Raise.create = function (value0) {
          return function (value1) {
              return new Raise(value0, value1);
          };
      };
      return Raise;
  })();
  var Par = (function () {
      function Par(value0) {
          this.value0 = value0;
      };
      Par.create = function (value0) {
          return new Par(value0);
      };
      return Par;
  })();
  var Fork = (function () {
      function Fork(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fork.create = function (value0) {
          return function (value1) {
              return new Fork(value0, value1);
          };
      };
      return Fork;
  })();
  var Kill = (function () {
      function Kill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Kill.create = function (value0) {
          return function (value1) {
              return new Kill(value0, value1);
          };
      };
      return Kill;
  })();
  var GetRef = (function () {
      function GetRef(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GetRef.create = function (value0) {
          return function (value1) {
              return new GetRef(value0, value1);
          };
      };
      return GetRef;
  })();
  var HalogenM = function (x) {
      return x;
  };
  var raise = function (o) {
      return HalogenM(Control_Monad_Free.liftF(new Raise(o, Data_Unit.unit)));
  };
  var query = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (label) {
                  return function (p) {
                      return function (q) {
                          return HalogenM(Control_Monad_Free.liftF(ChildQuery.create(Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                              return function (k) {
                                  var $135 = Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value))(k);
                                  var $136 = Halogen_Data_Slot.lookup()(dictIsSymbol)(dictOrd)(label)(p);
                                  return function ($137) {
                                      return $135($136($137));
                                  };
                              };
                          }, q, Control_Category.identity(Control_Category.categoryFn))))));
                      };
                  };
              };
          };
      };
  };
  var ordSubscriptionId = Data_Ord.ordInt;
  var ordForkId = Data_Ord.ordInt;
  var monadHalogenM = Control_Monad_Free.freeMonad;
  var monadStateHalogenM = new Control_Monad_State_Class.MonadState(function () {
      return monadHalogenM;
  }, function ($139) {
      return HalogenM(Control_Monad_Free.liftF(State.create($139)));
  });
  var monadEffectHalogenM = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadHalogenM;
      }, (function () {
          var $144 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($145) {
              return HalogenM(Control_Monad_Free.liftF(Lift.create($144($145))));
          };
      })());
  };
  var monadAffHalogenM = function (dictMonadAff) {
      return new Effect_Aff_Class.MonadAff(function () {
          return monadEffectHalogenM(dictMonadAff.MonadEffect0());
      }, (function () {
          var $146 = Effect_Aff_Class.liftAff(dictMonadAff);
          return function ($147) {
              return HalogenM(Control_Monad_Free.liftF(Lift.create($146($147))));
          };
      })());
  };
  var functorHalogenM = Control_Monad_Free.freeFunctor;
  var bindHalogenM = Control_Monad_Free.freeBind;           
  var applicativeHalogenM = Control_Monad_Free.freeApplicative;
  exports["State"] = State;
  exports["Subscribe"] = Subscribe;
  exports["Unsubscribe"] = Unsubscribe;
  exports["Lift"] = Lift;
  exports["ChildQuery"] = ChildQuery;
  exports["Raise"] = Raise;
  exports["Par"] = Par;
  exports["Fork"] = Fork;
  exports["Kill"] = Kill;
  exports["GetRef"] = GetRef;
  exports["raise"] = raise;
  exports["query"] = query;
  exports["SubscriptionId"] = SubscriptionId;
  exports["ForkId"] = ForkId;
  exports["functorHalogenM"] = functorHalogenM;
  exports["applicativeHalogenM"] = applicativeHalogenM;
  exports["bindHalogenM"] = bindHalogenM;
  exports["monadEffectHalogenM"] = monadEffectHalogenM;
  exports["monadAffHalogenM"] = monadAffHalogenM;
  exports["monadStateHalogenM"] = monadStateHalogenM;
  exports["ordSubscriptionId"] = ordSubscriptionId;
  exports["ordForkId"] = ordForkId;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Query.HalogenQ"] = $PS["Halogen.Query.HalogenQ"] || {};
  var exports = $PS["Halogen.Query.HalogenQ"];           
  var Initialize = (function () {
      function Initialize(value0) {
          this.value0 = value0;
      };
      Initialize.create = function (value0) {
          return new Initialize(value0);
      };
      return Initialize;
  })();
  var Finalize = (function () {
      function Finalize(value0) {
          this.value0 = value0;
      };
      Finalize.create = function (value0) {
          return new Finalize(value0);
      };
      return Finalize;
  })();
  var Receive = (function () {
      function Receive(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Receive.create = function (value0) {
          return function (value1) {
              return new Receive(value0, value1);
          };
      };
      return Receive;
  })();
  var Action = (function () {
      function Action(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Action.create = function (value0) {
          return function (value1) {
              return new Action(value0, value1);
          };
      };
      return Action;
  })();
  var Query = (function () {
      function Query(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Query.create = function (value0) {
          return function (value1) {
              return new Query(value0, value1);
          };
      };
      return Query;
  })();
  exports["Initialize"] = Initialize;
  exports["Finalize"] = Finalize;
  exports["Receive"] = Receive;
  exports["Action"] = Action;
  exports["Query"] = Query;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Component"] = $PS["Halogen.Component"] || {};
  var exports = $PS["Halogen.Component"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Coyoneda = $PS["Data.Coyoneda"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Halogen_Query_HalogenQ = $PS["Halogen.Query.HalogenQ"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ComponentSlot = (function () {
      function ComponentSlot(value0) {
          this.value0 = value0;
      };
      ComponentSlot.create = function (value0) {
          return new ComponentSlot(value0);
      };
      return ComponentSlot;
  })();
  var ThunkSlot = (function () {
      function ThunkSlot(value0) {
          this.value0 = value0;
      };
      ThunkSlot.create = function (value0) {
          return new ThunkSlot(value0);
      };
      return ThunkSlot;
  })();
  var unComponentSlot = Unsafe_Coerce.unsafeCoerce;
  var unComponent = Unsafe_Coerce.unsafeCoerce;
  var mkEval = function (args) {
      return function (v) {
          if (v instanceof Halogen_Query_HalogenQ.Initialize) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.initialize))(v.value0);
          };
          if (v instanceof Halogen_Query_HalogenQ.Finalize) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.finalize))(v.value0);
          };
          if (v instanceof Halogen_Query_HalogenQ.Receive) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(Data_Foldable.traverse_(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Foldable.foldableMaybe)(args.handleAction)(args.receive(v.value0)))(v.value1);
          };
          if (v instanceof Halogen_Query_HalogenQ.Action) {
              return Data_Functor.voidLeft(Halogen_Query_HalogenM.functorHalogenM)(args.handleAction(v.value0))(v.value1);
          };
          if (v instanceof Halogen_Query_HalogenQ.Query) {
              return Data_Coyoneda.unCoyoneda(function (g) {
                  var $28 = Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(Data_Maybe.maybe(v.value1(Data_Unit.unit))(g));
                  return function ($29) {
                      return $28(args.handleQuery($29));
                  };
              })(v.value0);
          };
          throw new Error("Failed pattern match at Halogen.Component (line 172, column 15 - line 182, column 70): " + [ v.constructor.name ]);
      };
  };
  var mkComponentSlot = Unsafe_Coerce.unsafeCoerce;
  var mkComponent = Unsafe_Coerce.unsafeCoerce;
  var defaultEval = {
      handleAction: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit)),
      handleQuery: Data_Function["const"](Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Maybe.Nothing.value)),
      receive: Data_Function["const"](Data_Maybe.Nothing.value),
      initialize: Data_Maybe.Nothing.value,
      finalize: Data_Maybe.Nothing.value
  };
  var componentSlot = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (label) {
                  return function (p) {
                      return function (comp) {
                          return function (input) {
                              return function (output) {
                                  return mkComponentSlot({
                                      get: Halogen_Data_Slot.lookup()(dictIsSymbol)(dictOrd)(label)(p),
                                      pop: Halogen_Data_Slot.pop()(dictIsSymbol)(dictOrd)(label)(p),
                                      set: Halogen_Data_Slot.insert()(dictIsSymbol)(dictOrd)(label)(p),
                                      component: comp,
                                      input: input,
                                      output: output
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["mkComponent"] = mkComponent;
  exports["unComponent"] = unComponent;
  exports["mkEval"] = mkEval;
  exports["defaultEval"] = defaultEval;
  exports["ComponentSlot"] = ComponentSlot;
  exports["ThunkSlot"] = ThunkSlot;
  exports["componentSlot"] = componentSlot;
  exports["unComponentSlot"] = unComponentSlot;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.VDom.Machine"] = $PS["Halogen.VDom.Machine"] || {};
  var exports = $PS["Halogen.VDom.Machine"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Step = (function () {
      function Step(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Step.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Step(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Step;
  })();
  var unStep = Unsafe_Coerce.unsafeCoerce;
  var step = function (v, a) {
      return v.value2(v.value1, a);
  };
  var mkStep = Unsafe_Coerce.unsafeCoerce;
  var halt = function (v) {
      return v.value3(v.value1);
  };
  var extract = unStep(function (v) {
      return v.value0;
  });
  exports["Step"] = Step;
  exports["mkStep"] = mkStep;
  exports["unStep"] = unStep;
  exports["extract"] = extract;
  exports["step"] = step;
  exports["halt"] = halt;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGetAny = function (key, obj) {
    return obj[key];
  };

  exports.unsafeHasAny = function (key, obj) {
    return obj.hasOwnProperty(key);
  };

  exports.unsafeSetAny = function (key, val, obj) {
      obj[key] = val;
  };

  exports.forE = function (a, f) {
    var b = [];
    for (var i = 0; i < a.length; i++) {
      b.push(f(i, a[i]));
    }
    return b;
  };

  exports.forEachE = function (a, f) {
    for (var i = 0; i < a.length; i++) {
      f(a[i]);
    }
  };

  exports.forInE = function (o, f) {
    var ks = Object.keys(o);
    for (var i = 0; i < ks.length; i++) {
      var k = ks[i];
      f(k, o[k]);
    }
  };

  exports.diffWithIxE = function (a1, a2, f1, f2, f3) {
    var a3 = [];
    var l1 = a1.length;
    var l2 = a2.length;
    var i  = 0;
    while (1) {
      if (i < l1) {
        if (i < l2) {
          a3.push(f1(i, a1[i], a2[i]));
        } else {
          f2(i, a1[i]);
        }
      } else if (i < l2) {
        a3.push(f3(i, a2[i]));
      } else {
        break;
      }
      i++;
    }
    return a3;
  };

  exports.strMapWithIxE = function (as, fk, f) {
    var o = {};
    for (var i = 0; i < as.length; i++) {
      var a = as[i];
      var k = fk(a);
      o[k] = f(k, i, a);
    }
    return o;
  };

  exports.diffWithKeyAndIxE = function (o1, as, fk, f1, f2, f3) {
    var o2 = {};
    for (var i = 0; i < as.length; i++) {
      var a = as[i];
      var k = fk(a);
      if (o1.hasOwnProperty(k)) {
        o2[k] = f1(k, i, o1[k], a);
      } else {
        o2[k] = f3(k, i, a);
      }
    }
    for (var k in o1) {
      if (k in o2) {
        continue;
      }
      f2(k, o1[k]);
    }
    return o2;
  };

  exports.refEq = function (a, b) {
    return a === b;
  };

  exports.createTextNode = function (s, doc) {
    return doc.createTextNode(s);
  };

  exports.setTextContent = function (s, n) {
    n.textContent = s;
  };

  exports.createElement = function (ns, name, doc) {
    if (ns != null) {
      return doc.createElementNS(ns, name);
    } else {
      return doc.createElement(name)
    }
  };

  exports.insertChildIx = function (i, a, b) {
    var n = b.childNodes.item(i) || null;
    if (n !== a) {
      b.insertBefore(a, n);
    }
  };

  exports.removeChild = function (a, b) {
    if (b && a.parentNode === b) {
      b.removeChild(a);
    }
  };

  exports.parentNode = function (a) {
    return a.parentNode;
  };

  exports.setAttribute = function (ns, attr, val, el) {
    if (ns != null) {
      el.setAttributeNS(ns, attr, val);
    } else {
      el.setAttribute(attr, val);
    }
  };

  exports.removeAttribute = function (ns, attr, el) {
    if (ns != null) {
      el.removeAttributeNS(ns, attr);
    } else {
      el.removeAttribute(attr);
    }
  };

  exports.hasAttribute = function (ns, attr, el) {
    if (ns != null) {
      return el.hasAttributeNS(ns, attr);
    } else {
      return el.hasAttribute(attr);
    }
  };

  exports.addEventListener = function (ev, listener, el) {
    el.addEventListener(ev, listener, false);
  };

  exports.removeEventListener = function (ev, listener, el) {
    el.removeEventListener(ev, listener, false);
  };

  exports.jsUndefined = void 0;
})(PS["Halogen.VDom.Util"] = PS["Halogen.VDom.Util"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.VDom.Util"] = $PS["Halogen.VDom.Util"] || {};
  var exports = $PS["Halogen.VDom.Util"];
  var $foreign = $PS["Halogen.VDom.Util"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var unsafeLookup = $foreign.unsafeGetAny;
  var unsafeFreeze = Unsafe_Coerce.unsafeCoerce;
  var pokeMutMap = $foreign.unsafeSetAny;
  var newMutMap = Foreign_Object_ST["new"];
  exports["newMutMap"] = newMutMap;
  exports["pokeMutMap"] = pokeMutMap;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeLookup"] = unsafeLookup;
  exports["unsafeGetAny"] = $foreign.unsafeGetAny;
  exports["unsafeHasAny"] = $foreign.unsafeHasAny;
  exports["unsafeSetAny"] = $foreign.unsafeSetAny;
  exports["forE"] = $foreign.forE;
  exports["forEachE"] = $foreign.forEachE;
  exports["forInE"] = $foreign.forInE;
  exports["diffWithIxE"] = $foreign.diffWithIxE;
  exports["diffWithKeyAndIxE"] = $foreign.diffWithKeyAndIxE;
  exports["strMapWithIxE"] = $foreign.strMapWithIxE;
  exports["refEq"] = $foreign.refEq;
  exports["createTextNode"] = $foreign.createTextNode;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["createElement"] = $foreign.createElement;
  exports["insertChildIx"] = $foreign.insertChildIx;
  exports["removeChild"] = $foreign.removeChild;
  exports["parentNode"] = $foreign.parentNode;
  exports["setAttribute"] = $foreign.setAttribute;
  exports["removeAttribute"] = $foreign.removeAttribute;
  exports["hasAttribute"] = $foreign.hasAttribute;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
  exports["jsUndefined"] = $foreign.jsUndefined;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.VDom.DOM.Prop"] = $PS["Halogen.VDom.DOM.Prop"] || {};
  var exports = $PS["Halogen.VDom.DOM.Prop"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Foreign = $PS["Foreign"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Util = $PS["Halogen.VDom.Util"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];                
  var Created = (function () {
      function Created(value0) {
          this.value0 = value0;
      };
      Created.create = function (value0) {
          return new Created(value0);
      };
      return Created;
  })();
  var Removed = (function () {
      function Removed(value0) {
          this.value0 = value0;
      };
      Removed.create = function (value0) {
          return new Removed(value0);
      };
      return Removed;
  })();
  var Attribute = (function () {
      function Attribute(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Attribute.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Attribute(value0, value1, value2);
              };
          };
      };
      return Attribute;
  })();
  var Property = (function () {
      function Property(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Property.create = function (value0) {
          return function (value1) {
              return new Property(value0, value1);
          };
      };
      return Property;
  })();
  var Handler = (function () {
      function Handler(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Handler.create = function (value0) {
          return function (value1) {
              return new Handler(value0, value1);
          };
      };
      return Handler;
  })();
  var Ref = (function () {
      function Ref(value0) {
          this.value0 = value0;
      };
      Ref.create = function (value0) {
          return new Ref(value0);
      };
      return Ref;
  })();
  var unsafeGetProperty = Halogen_VDom_Util.unsafeGetAny;
  var setProperty = Halogen_VDom_Util.unsafeSetAny;
  var removeProperty = function (key, el) {
      var v = Halogen_VDom_Util.hasAttribute(Data_Nullable["null"], key, el);
      if (v) {
          return Halogen_VDom_Util.removeAttribute(Data_Nullable["null"], key, el);
      };
      var v1 = Foreign.typeOf(Halogen_VDom_Util.unsafeGetAny(key, el));
      if (v1 === "string") {
          return Halogen_VDom_Util.unsafeSetAny(key, "", el);
      };
      if (key === "rowSpan") {
          return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
      };
      if (key === "colSpan") {
          return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
      };
      return Halogen_VDom_Util.unsafeSetAny(key, Halogen_VDom_Util.jsUndefined, el);
  };
  var propToStrKey = function (v) {
      if (v instanceof Attribute && v.value0 instanceof Data_Maybe.Just) {
          return "attr/" + (v.value0.value0 + (":" + v.value1));
      };
      if (v instanceof Attribute) {
          return "attr/:" + v.value1;
      };
      if (v instanceof Property) {
          return "prop/" + v.value0;
      };
      if (v instanceof Handler) {
          return "handler/" + v.value0;
      };
      if (v instanceof Ref) {
          return "ref";
      };
      throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 182, column 16 - line 187, column 16): " + [ v.constructor.name ]);
  };
  var propFromString = Unsafe_Coerce.unsafeCoerce;
  var propFromNumber = Unsafe_Coerce.unsafeCoerce;
  var propFromInt = Unsafe_Coerce.unsafeCoerce;
  var propFromBoolean = Unsafe_Coerce.unsafeCoerce;
  var buildProp = function (emit) {
      return function (el) {
          var removeProp = function (prevEvents) {
              return function (v, v1) {
                  if (v1 instanceof Attribute) {
                      return Halogen_VDom_Util.removeAttribute(Data_Nullable.toNullable(v1.value0), v1.value1, el);
                  };
                  if (v1 instanceof Property) {
                      return removeProperty(v1.value0, el);
                  };
                  if (v1 instanceof Handler) {
                      var handler = Halogen_VDom_Util.unsafeLookup(v1.value0, prevEvents);
                      return Halogen_VDom_Util.removeEventListener(v1.value0, Data_Tuple.fst(handler), el);
                  };
                  if (v1 instanceof Ref) {
                      return Data_Unit.unit;
                  };
                  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 169, column 5 - line 179, column 18): " + [ v1.constructor.name ]);
              };
          };
          var mbEmit = function (v) {
              if (v instanceof Data_Maybe.Just) {
                  return emit(v.value0)();
              };
              return Data_Unit.unit;
          };
          var haltProp = function (state) {
              var v = Foreign_Object.lookup("ref")(state.props);
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Ref) {
                  return mbEmit(v.value0.value0(new Removed(el)));
              };
              return Data_Unit.unit;
          };
          var diffProp = function (prevEvents, events) {
              return function (v, v1, v11, v2) {
                  if (v11 instanceof Attribute && v2 instanceof Attribute) {
                      var $56 = v11.value2 === v2.value2;
                      if ($56) {
                          return v2;
                      };
                      Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                      return v2;
                  };
                  if (v11 instanceof Property && v2 instanceof Property) {
                      var v4 = Halogen_VDom_Util.refEq(v11.value1, v2.value1);
                      if (v4) {
                          return v2;
                      };
                      if (v2.value0 === "value") {
                          var elVal = unsafeGetProperty("value", el);
                          var $65 = Halogen_VDom_Util.refEq(elVal, v2.value1);
                          if ($65) {
                              return v2;
                          };
                          setProperty(v2.value0, v2.value1, el);
                          return v2;
                      };
                      setProperty(v2.value0, v2.value1, el);
                      return v2;
                  };
                  if (v11 instanceof Handler && v2 instanceof Handler) {
                      var handler = Halogen_VDom_Util.unsafeLookup(v2.value0, prevEvents);
                      Effect_Ref.write(v2.value1)(Data_Tuple.snd(handler))();
                      Halogen_VDom_Util.pokeMutMap(v2.value0, handler, events);
                      return v2;
                  };
                  return v2;
              };
          };
          var applyProp = function (events) {
              return function (v, v1, v2) {
                  if (v2 instanceof Attribute) {
                      Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el);
                      return v2;
                  };
                  if (v2 instanceof Property) {
                      setProperty(v2.value0, v2.value1, el);
                      return v2;
                  };
                  if (v2 instanceof Handler) {
                      var v3 = Halogen_VDom_Util.unsafeGetAny(v2.value0, events);
                      if (Halogen_VDom_Util.unsafeHasAny(v2.value0, events)) {
                          Effect_Ref.write(v2.value1)(Data_Tuple.snd(v3))();
                          return v2;
                      };
                      var ref = Effect_Ref["new"](v2.value1)();
                      var listener = Web_Event_EventTarget.eventListener(function (ev) {
                          return function __do() {
                              var f$prime = Effect_Ref.read(ref)();
                              return mbEmit(f$prime(ev));
                          };
                      })();
                      Halogen_VDom_Util.pokeMutMap(v2.value0, new Data_Tuple.Tuple(listener, ref), events);
                      Halogen_VDom_Util.addEventListener(v2.value0, listener, el);
                      return v2;
                  };
                  if (v2 instanceof Ref) {
                      mbEmit(v2.value0(new Created(el)));
                      return v2;
                  };
                  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 113, column 5 - line 135, column 15): " + [ v2.constructor.name ]);
              };
          };
          var patchProp = function (state, ps2) {
              var events = Halogen_VDom_Util.newMutMap();
              var onThis = removeProp(state.events);
              var onThese = diffProp(state.events, events);
              var onThat = applyProp(events);
              var props = Halogen_VDom_Util.diffWithKeyAndIxE(state.props, ps2, propToStrKey, onThese, onThis, onThat);
              var nextState = {
                  events: Halogen_VDom_Util.unsafeFreeze(events),
                  props: props
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, nextState, patchProp, haltProp));
          };
          var renderProp = function (ps1) {
              var events = Halogen_VDom_Util.newMutMap();
              var ps1$prime = Halogen_VDom_Util.strMapWithIxE(ps1, propToStrKey, applyProp(events));
              var state = {
                  events: Halogen_VDom_Util.unsafeFreeze(events),
                  props: ps1$prime
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Data_Unit.unit, state, patchProp, haltProp));
          };
          return renderProp;
      };
  };
  exports["Attribute"] = Attribute;
  exports["Property"] = Property;
  exports["Handler"] = Handler;
  exports["propFromString"] = propFromString;
  exports["propFromBoolean"] = propFromBoolean;
  exports["propFromInt"] = propFromInt;
  exports["propFromNumber"] = propFromNumber;
  exports["buildProp"] = buildProp;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.VDom.Types"] = $PS["Halogen.VDom.Types"] || {};
  var exports = $PS["Halogen.VDom.Types"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var Elem = (function () {
      function Elem(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Elem.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Elem(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Elem;
  })();
  var Keyed = (function () {
      function Keyed(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Keyed.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Keyed(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Keyed;
  })();
  var Widget = (function () {
      function Widget(value0) {
          this.value0 = value0;
      };
      Widget.create = function (value0) {
          return new Widget(value0);
      };
      return Widget;
  })();
  var Grafted = (function () {
      function Grafted(value0) {
          this.value0 = value0;
      };
      Grafted.create = function (value0) {
          return new Grafted(value0);
      };
      return Grafted;
  })();
  var Graft = (function () {
      function Graft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Graft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Graft(value0, value1, value2);
              };
          };
      };
      return Graft;
  })();
  var unGraft = function (f) {
      return function ($58) {
          return f($58);
      };
  };           
  var graft = Unsafe_Coerce.unsafeCoerce;
  var bifunctorGraft = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return unGraft(function (v) {
              return graft(new Graft(function ($60) {
                  return f(v.value0($60));
              }, function ($61) {
                  return g(v.value1($61));
              }, v.value2));
          });
      };
  });
  var runGraft = unGraft(function (v) {
      var go = function (v2) {
          if (v2 instanceof Text) {
              return new Text(v2.value0);
          };
          if (v2 instanceof Elem) {
              return new Elem(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(go)(v2.value3));
          };
          if (v2 instanceof Keyed) {
              return new Keyed(v2.value0, v2.value1, v.value0(v2.value2), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(go))(v2.value3));
          };
          if (v2 instanceof Widget) {
              return new Widget(v.value1(v2.value0));
          };
          if (v2 instanceof Grafted) {
              return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(v.value0)(v.value1)(v2.value0));
          };
          throw new Error("Failed pattern match at Halogen.VDom.Types (line 86, column 7 - line 86, column 27): " + [ v2.constructor.name ]);
      };
      return go(v.value2);
  });
  exports["Text"] = Text;
  exports["Elem"] = Elem;
  exports["Keyed"] = Keyed;
  exports["Widget"] = Widget;
  exports["Grafted"] = Grafted;
  exports["runGraft"] = runGraft;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.HTML.Core"] = $PS["Halogen.HTML.Core"] || {};
  var exports = $PS["Halogen.HTML.Core"];
  var DOM_HTML_Indexed_InputAcceptType = $PS["DOM.HTML.Indexed.InputAcceptType"];
  var DOM_HTML_Indexed_InputType = $PS["DOM.HTML.Indexed.InputType"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Halogen_VDom_DOM_Prop = $PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Types = $PS["Halogen.VDom.Types"];
  var HTML = function (x) {
      return x;
  };
  var ClassName = function (x) {
      return x;
  };
  var IsProp = function (toPropValue) {
      this.toPropValue = toPropValue;
  };
  var widget = function ($30) {
      return HTML(Halogen_VDom_Types.Widget.create($30));
  };
  var toPropValue = function (dict) {
      return dict.toPropValue;
  };
  var text = function ($31) {
      return HTML(Halogen_VDom_Types.Text.create($31));
  };
  var prop = function (dictIsProp) {
      return function (v) {
          var $33 = Halogen_VDom_DOM_Prop.Property.create(v);
          var $34 = toPropValue(dictIsProp);
          return function ($35) {
              return $33($34($35));
          };
      };
  };           
  var newtypeHTML = new Data_Newtype.Newtype(function (n) {
      return n;
  }, HTML);
  var newtypeClassName = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ClassName);
  var isPropString = new IsProp(Halogen_VDom_DOM_Prop.propFromString);
  var isPropNumber = new IsProp(Halogen_VDom_DOM_Prop.propFromNumber);
  var isPropInt = new IsProp(Halogen_VDom_DOM_Prop.propFromInt);
  var isPropInputType = new IsProp(function ($49) {
      return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputType.renderInputType($49));
  });
  var isPropInputAcceptType = new IsProp(function ($50) {
      return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputAcceptType.renderInputAcceptType($50));
  });
  var isPropBoolean = new IsProp(Halogen_VDom_DOM_Prop.propFromBoolean);
  var handler = Halogen_VDom_DOM_Prop.Handler.create;
  var element = function (ns) {
      return function (name) {
          return function (props) {
              return function (children) {
                  return new Halogen_VDom_Types.Elem(ns, name, props, children);
              };
          };
      };
  };                                                                             
  var attr = function (ns) {
      return function (v) {
          return Halogen_VDom_DOM_Prop.Attribute.create(ns)(v);
      };
  };
  exports["widget"] = widget;
  exports["text"] = text;
  exports["element"] = element;
  exports["prop"] = prop;
  exports["attr"] = attr;
  exports["handler"] = handler;
  exports["newtypeHTML"] = newtypeHTML;
  exports["isPropString"] = isPropString;
  exports["isPropInt"] = isPropInt;
  exports["isPropNumber"] = isPropNumber;
  exports["isPropBoolean"] = isPropBoolean;
  exports["isPropInputType"] = isPropInputType;
  exports["isPropInputAcceptType"] = isPropInputAcceptType;
  exports["newtypeClassName"] = newtypeClassName;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.HTML.Properties"] = $PS["Halogen.HTML.Properties"] || {};
  var exports = $PS["Halogen.HTML.Properties"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var prop = function (dictIsProp) {
      return Halogen_HTML_Core.prop(dictIsProp);
  };                                                         
  var rows = prop(Halogen_HTML_Core.isPropInt)("rows");                
  var src = prop(Halogen_HTML_Core.isPropString)("src");    
  var type_ = function (dictIsProp) {
      return prop(dictIsProp)("type");
  };
  var value = prop(Halogen_HTML_Core.isPropString)("value");       
  var min = prop(Halogen_HTML_Core.isPropNumber)("min");          
  var max = prop(Halogen_HTML_Core.isPropNumber)("max");   
  var id_ = prop(Halogen_HTML_Core.isPropString)("id");
  var $$for = prop(Halogen_HTML_Core.isPropString)("htmlFor");    
  var disabled = prop(Halogen_HTML_Core.isPropBoolean)("disabled");
  var enabled = (function () {
      var $12 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
      return function ($13) {
          return disabled($12($13));
      };
  })();                                                            
  var cols = prop(Halogen_HTML_Core.isPropInt)("cols");
  var class_ = (function () {
      var $18 = prop(Halogen_HTML_Core.isPropString)("className");
      var $19 = Data_Newtype.unwrap(Halogen_HTML_Core.newtypeClassName);
      return function ($20) {
          return $18($19($20));
      };
  })();                                                            
  var autofocus = prop(Halogen_HTML_Core.isPropBoolean)("autofocus");
  var attr = Halogen_HTML_Core.attr(Data_Maybe.Nothing.value);
  var accept = prop(Halogen_HTML_Core.isPropInputAcceptType)("accept");
  exports["prop"] = prop;
  exports["attr"] = attr;
  exports["class_"] = class_;
  exports["cols"] = cols;
  exports["rows"] = rows;
  exports["for"] = $$for;
  exports["id_"] = id_;
  exports["src"] = src;
  exports["type_"] = type_;
  exports["value"] = value;
  exports["min"] = min;
  exports["max"] = max;
  exports["disabled"] = disabled;
  exports["enabled"] = enabled;
  exports["autofocus"] = autofocus;
  exports["accept"] = accept;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.HTML.CSS"] = $PS["Halogen.HTML.CSS"] || {};
  var exports = $PS["Halogen.HTML.CSS"];
  var CSS_Render = $PS["CSS.Render"];
  var CSS_Stylesheet = $PS["CSS.Stylesheet"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var style = (function () {
      var toString = (function () {
          var $4 = Data_String_Common.joinWith("; ");
          var $5 = Foreign_Object.foldMap(Data_Monoid.monoidArray)(function (key) {
              return function (val) {
                  return [ key + (": " + val) ];
              };
          });
          return function ($6) {
              return $4($5($6));
          };
      })();
      var rights = Data_Array.concatMap(Data_Foldable.foldMap(Data_Either.foldableEither)(Data_Monoid.monoidArray)(Data_Array.singleton));
      var property = function (v) {
          if (v instanceof CSS_Stylesheet.Property) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
          };
          return Data_Maybe.Nothing.value;
      };
      var rules = function (rs) {
          var properties = Control_Bind.bind(Control_Bind.bindArray)(Data_Array.mapMaybe(property)(rs))(function ($7) {
              return rights(CSS_Render.collect($7));
          });
          return Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(properties);
      };
      var $8 = Halogen_HTML_Properties.attr("style");
      return function ($9) {
          return $8(toString(rules(CSS_Stylesheet.runS($9))));
      };
  })();
  exports["style"] = style;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.HTML.Elements"] = $PS["Halogen.HTML.Elements"] || {};
  var exports = $PS["Halogen.HTML.Elements"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var element = Halogen_HTML_Core.element(Data_Maybe.Nothing.value);
  var h2 = element("h2");
  var input = function (props) {
      return element("input")(props)([  ]);
  };                   
  var label = element("label");  
  var option = element("option");
  var p = element("p");
  var p_ = p([  ]);    
  var progress = element("progress");
  var select = element("select");
  var span = element("span");
  var textarea = function (es) {
      return element("textarea")(es)([  ]);
  };                 
  var div = element("div");
  var div_ = div([  ]);
  var button = element("button");
  exports["button"] = button;
  exports["div"] = div;
  exports["div_"] = div_;
  exports["h2"] = h2;
  exports["input"] = input;
  exports["label"] = label;
  exports["option"] = option;
  exports["p_"] = p_;
  exports["progress"] = progress;
  exports["select"] = select;
  exports["span"] = span;
  exports["textarea"] = textarea;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Foreign = $PS["Foreign"];
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var readProp = unsafeReadProp;
  exports["readProp"] = readProp;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Query.Input"] = $PS["Halogen.Query.Input"] || {};
  var exports = $PS["Halogen.Query.Input"];
  var RefUpdate = (function () {
      function RefUpdate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RefUpdate.create = function (value0) {
          return function (value1) {
              return new RefUpdate(value0, value1);
          };
      };
      return RefUpdate;
  })();
  var Action = (function () {
      function Action(value0) {
          this.value0 = value0;
      };
      Action.create = function (value0) {
          return new Action(value0);
      };
      return Action;
  })();
  exports["RefUpdate"] = RefUpdate;
  exports["Action"] = Action;
})(PS);
(function(exports) {
  "use strict";

  exports._currentTarget = function (e) {
    return e.currentTarget;
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  var Data_Nullable = $PS["Data.Nullable"];
  var currentTarget = function ($8) {
      return Data_Nullable.toMaybe($foreign["_currentTarget"]($8));
  };
  exports["currentTarget"] = currentTarget;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.HTML.Event.EventTypes"] = $PS["Web.HTML.Event.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.EventTypes"];
  var input = "input";
  var domcontentloaded = "DOMContentLoaded";
  var change = "change";
  exports["change"] = change;
  exports["domcontentloaded"] = domcontentloaded;
  exports["input"] = input;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.UIEvent.MouseEvent.EventTypes"] = $PS["Web.UIEvent.MouseEvent.EventTypes"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent.EventTypes"];
  var click = "click";
  exports["click"] = click;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.HTML.Events"] = $PS["Halogen.HTML.Events"] || {};
  var exports = $PS["Halogen.HTML.Events"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_HTML_Event_EventTypes = $PS["Web.HTML.Event.EventTypes"];
  var Web_UIEvent_MouseEvent_EventTypes = $PS["Web.UIEvent.MouseEvent.EventTypes"];
  var mouseHandler = Unsafe_Coerce.unsafeCoerce;
  var handler = function (et) {
      var $1 = Halogen_HTML_Core.handler(et);
      var $2 = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Halogen_Query_Input.Action.create));
      return function ($3) {
          return $1($2($3));
      };
  };                             
  var onChange = handler(Web_HTML_Event_EventTypes.change);
  var onClick = (function () {
      var $4 = handler(Web_UIEvent_MouseEvent_EventTypes.click);
      return function ($5) {
          return $4(mouseHandler($5));
      };
  })();
  var addForeignPropHandler = function (key) {
      return function (prop) {
          return function (reader) {
              return function (f) {
                  var go = function (a) {
                      return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(reader)(Foreign_Index.readProp(prop))(Foreign.unsafeToForeign(a));
                  };
                  return handler(key)(Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Web_Event_Event.currentTarget)(function (e) {
                      return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(f)(Control_Monad_Except.runExcept(go(e)));
                  }));
              };
          };
      };
  };                                                                                                                    
  var onValueChange = addForeignPropHandler(Web_HTML_Event_EventTypes.change)("value")(Foreign.readString);
  var onValueInput = addForeignPropHandler(Web_HTML_Event_EventTypes.input)("value")(Foreign.readString);
  exports["onChange"] = onChange;
  exports["onClick"] = onClick;
  exports["onValueChange"] = onValueChange;
  exports["onValueInput"] = onValueInput;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Editor.EditorComponent"] = $PS["Editor.EditorComponent"] || {};
  var exports = $PS["Editor.EditorComponent"];
  var CSS_Font = $PS["CSS.Font"];
  var Color = $PS["Color"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Abc_Parser = $PS["Data.Abc.Parser"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unit = $PS["Data.Unit"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_CSS = $PS["Halogen.HTML.CSS"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];                
  var UpdateContent = (function () {
      function UpdateContent(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UpdateContent.create = function (value0) {
          return function (value1) {
              return new UpdateContent(value0, value1);
          };
      };
      return UpdateContent;
  })();
  var UpdateEnabled = (function () {
      function UpdateEnabled(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UpdateEnabled.create = function (value0) {
          return function (value1) {
              return new UpdateEnabled(value0, value1);
          };
      };
      return UpdateEnabled;
  })();
  var GetText = (function () {
      function GetText(value0) {
          this.value0 = value0;
      };
      GetText.create = function (value0) {
          return new GetText(value0);
      };
      return GetText;
  })();
  var TuneResult = (function () {
      function TuneResult(value0) {
          this.value0 = value0;
      };
      TuneResult.create = function (value0) {
          return new TuneResult(value0);
      };
      return TuneResult;
  })();
  var UpdateContentAction = (function () {
      function UpdateContentAction(value0) {
          this.value0 = value0;
      };
      UpdateContentAction.create = function (value0) {
          return new UpdateContentAction(value0);
      };
      return UpdateContentAction;
  })();
  var nullTune = new Data_Either.Left({
      pos: 0,
      error: ""
  });
  var handleQuery = function (v) {
      if (v instanceof UpdateContent) {
          var tuneResult = (function () {
              var $7 = Data_String_Common["null"](v.value0);
              if ($7) {
                  return nullTune;
              };
              return Data_Abc_Parser.parse(v.value0 + "|\x0d\x0a");
          })();
          var parseError = Data_Either.either(Data_Maybe.Just.create)(function (success) {
              return Data_Maybe.Nothing.value;
          })(tuneResult);
          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (state) {
              var $8 = {};
              for (var $9 in state) {
                  if ({}.hasOwnProperty.call(state, $9)) {
                      $8[$9] = state[$9];
                  };
              };
              $8.text = v.value0;
              $8.parseError = parseError;
              return $8;
          }))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.raise(new TuneResult(tuneResult)))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value1));
              });
          });
      };
      if (v instanceof UpdateEnabled) {
          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (state) {
              var $13 = {};
              for (var $14 in state) {
                  if ({}.hasOwnProperty.call(state, $14)) {
                      $13[$14] = state[$14];
                  };
              };
              $13.isEnabled = v.value0;
              return $13;
          }))(function () {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value1));
          });
      };
      if (v instanceof GetText) {
          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value0(state.text)));
          });
      };
      throw new Error("Failed pattern match at Editor.EditorComponent (line 91, column 15 - line 109, column 35): " + [ v.constructor.name ]);
  };
  var handleAction = function (v) {
      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(handleQuery(new UpdateContent(v.value0, Data_Unit.unit)))(function () {
          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
      });
  };
  var errorHighlightStyle = Halogen_HTML_CSS.style(CSS_Font.color(Color.rgb(255)(0)(0)));
  var renderParseError = function (state) {
      var txt = Data_String_CodeUnits.toCharArray(state.text);
      if (state.parseError instanceof Data_Maybe.Just) {
          var $22 = Data_String_Common["null"](state.text);
          if ($22) {
              return Halogen_HTML_Elements.div_([  ]);
          };
          var startSuffix = Data_Ord.min(Data_Ord.ordInt)(state.parseError.value0.pos + 1 | 0)(Data_Array.length(txt));
          var startPhrase = Data_Ord.max(Data_Ord.ordInt)(state.parseError.value0.pos - 10 | 0)(0);
          var errorPrefix = Data_Array.slice(startPhrase)(state.parseError.value0.pos)(txt);
          var errorChar = Data_Array.slice(state.parseError.value0.pos)(state.parseError.value0.pos + 1 | 0)(txt);
          var endSuffix = Data_Ord.min(Data_Ord.ordInt)((state.parseError.value0.pos + 10 | 0) + 1 | 0)(Data_Array.length(txt));
          var errorSuffix = Data_Array.slice(startSuffix)(endSuffix)(txt);
          return Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text(state.parseError.value0.error + " - "), Halogen_HTML_Core.text(Data_String_CodeUnits.fromCharArray(errorPrefix)), Halogen_HTML_Elements.span([ errorHighlightStyle ])([ Halogen_HTML_Core.text(Data_String_CodeUnits.fromCharArray(errorChar)) ]), Halogen_HTML_Core.text(Data_String_CodeUnits.fromCharArray(errorSuffix)) ]);
      };
      return Halogen_HTML_Elements.div_([  ]);
  };
  var component = (function () {
      var render = function (state) {
          return Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.textarea([ Halogen_HTML_Properties.rows(13), Halogen_HTML_Properties.cols(60), Halogen_HTML_Properties.autofocus(true), Halogen_HTML_Properties.value(state.text), Halogen_HTML_Properties.class_("abcEdit"), Halogen_HTML_Properties.enabled(state.isEnabled), Halogen_HTML_Events.onValueInput(function ($24) {
              return Data_Maybe.Just.create(UpdateContentAction.create($24));
          }) ]), renderParseError(state) ]);
      };
      var initialState = function (v) {
          return {
              text: "",
              parseError: Data_Maybe.Nothing.value,
              isEnabled: true
          };
      };
      return Halogen_Component.mkComponent({
          initialState: initialState,
          render: render,
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction,
              handleQuery: handleQuery,
              receive: Halogen_Component.defaultEval.receive,
              initialize: Data_Maybe.Nothing.value,
              finalize: Data_Maybe.Nothing.value
          })
      });
  })();
  exports["UpdateContent"] = UpdateContent;
  exports["GetText"] = GetText;
  exports["nullTune"] = nullTune;
  exports["component"] = component;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Editor.Transposition"] = $PS["Editor.Transposition"] || {};
  var exports = $PS["Editor.Transposition"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Abc_Accidentals = $PS["Data.Abc.Accidentals"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var MenuOption = (function () {
      function MenuOption(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MenuOption.create = function (value0) {
          return function (value1) {
              return new MenuOption(value0, value1);
          };
      };
      return MenuOption;
  })();
  var showKey = function (mode) {
      return function (v) {
          var showAcc = (function () {
              if (v.value0.accidental instanceof Data_Abc.Sharp) {
                  return "#";
              };
              if (v.value0.accidental instanceof Data_Abc.Flat) {
                  return "b";
              };
              return "";
          })();
          return Data_Show.show(Data_Abc.showPitchClass)(v.value0.pitchClass) + (showAcc + (" " + Data_Show.show(Data_Abc.showMode)(mode)));
      };
  };
  var pitch = function (pc) {
      return function (a) {
          return new Data_Abc.Pitch({
              pitchClass: pc,
              accidental: a
          });
      };
  };
  var sharpKeys = [ pitch(Data_Abc.C.value)(Data_Abc.Sharp.value), pitch(Data_Abc.F.value)(Data_Abc.Sharp.value), pitch(Data_Abc.G.value)(Data_Abc.Sharp.value) ];
  var showKeySig = function (ks) {
      return showKey(ks.mode)(pitch(ks.pitchClass)(ks.accidental));
  };
  var flatKeys = [ pitch(Data_Abc.A.value)(Data_Abc.Flat.value), pitch(Data_Abc.B.value)(Data_Abc.Flat.value), pitch(Data_Abc.E.value)(Data_Abc.Flat.value) ];
  var cMajor = {
      keySignature: {
          pitchClass: Data_Abc.C.value,
          accidental: Data_Abc.Natural.value,
          mode: Data_Abc.Major.value
      },
      modifications: Data_List_Types.Nil.value
  };
  var basicKeys = [ pitch(Data_Abc.C.value)(Data_Abc.Natural.value), pitch(Data_Abc.D.value)(Data_Abc.Natural.value), pitch(Data_Abc.E.value)(Data_Abc.Natural.value), pitch(Data_Abc.F.value)(Data_Abc.Natural.value), pitch(Data_Abc.G.value)(Data_Abc.Natural.value), pitch(Data_Abc.A.value)(Data_Abc.Natural.value), pitch(Data_Abc.B.value)(Data_Abc.Natural.value) ];
  var keyMenuOptions = function (targetKey) {
      var keys = (function () {
          if (targetKey.mode instanceof Data_Abc.Major) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(basicKeys)(flatKeys);
          };
          if (targetKey.mode instanceof Data_Abc.Minor) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(basicKeys)(sharpKeys);
          };
          return basicKeys;
      })();
      var kacc = Data_Abc_Accidentals.fromKeySig(targetKey);
      var target = showKey(targetKey.mode)(kacc);
      var f = function (k) {
          var next = showKey(targetKey.mode)(k);
          var $6 = next === target;
          if ($6) {
              return new MenuOption(next, true);
          };
          return new MenuOption(next, false);
      };
      return Data_Functor.map(Data_Functor.functorArray)(f)(keys);
  };
  exports["keyMenuOptions"] = keyMenuOptions;
  exports["cMajor"] = cMajor;
  exports["showKeySig"] = showKeySig;
})(PS);
(function(exports) {
  "use strict";

  var wrapper = function() {

    return {

      print : function() {
         window.print();
      }
    
    }

  }();

  exports.print = wrapper.print;
})(PS["Editor.Window"] = PS["Editor.Window"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Editor.Window"] = $PS["Editor.Window"] || {};
  var exports = $PS["Editor.Window"];
  var $foreign = $PS["Editor.Window"];
  exports["print"] = $foreign.print;
})(PS);
(function(exports) {
  "use strict";

  exports.resetInputValue = function (componentId) {
      return function () {
        var fileInput = document.getElementById(componentId);
        fileInput.value = "";
      }
    };
})(PS["Halogen.FileInputComponent.Dom"] = PS["Halogen.FileInputComponent.Dom"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.FileInputComponent.Dom"] = $PS["Halogen.FileInputComponent.Dom"] || {};
  var exports = $PS["Halogen.FileInputComponent.Dom"];
  var $foreign = $PS["Halogen.FileInputComponent.Dom"];
  exports["resetInputValue"] = $foreign.resetInputValue;
})(PS);
(function(exports) {
  "use strict";

  function loadTextFileImpl(elementid) {
    return function (onError, onSuccess) {
      _loadFileImpl (elementid, false, onError, onSuccess);
        // Return a canceler, which is just another Aff effect.
        return function (cancelError, cancelerError, cancelerSuccess) {
          cancelerSuccess(); // invoke the success callback for the canceler
      };
    }
  }

  function loadBinaryFileAsTextImpl(elementid) {
    return function (onError, onSuccess) {
      _loadFileImpl (elementid, true, onError, onSuccess);
        // Return a canceler, which is just another Aff effect.
        return function (cancelError, cancelerError, cancelerSuccess) {
          cancelerSuccess(); // invoke the success callback for the canceler
      };
    }
  }

  function _loadFileImpl (elementid, asBinary, onError, onSuccess) {
    // console.log("inside load text file effects function ");
    var selectedFile = document.getElementById(elementid).files[0];
    var reader = new FileReader();

    reader.onload = function(event) {
      var contents = event.target.result;
      var filespec = {contents:contents, name:selectedFile.name};
      // console.log("reader.onload File contents: " + contents);
      onSuccess (filespec);
    };

    if (typeof selectedFile != 'undefined') {
       if (asBinary) {
         reader.readAsBinaryString(selectedFile);
       }
       else {
         reader.readAsText(selectedFile);
       }
    }
    else {
      onError ("file not found");
    }
  }

  function saveTextFile(filespec) {
    return function () {
      var a = document.createElement("a");
      // console.log("File contents: " + filespec.contents);
      var file = new Blob([filespec.contents], {type: "text/plain;charset=utf-8"});
      var url = URL.createObjectURL(file);
      a.href = url;
      a.download = filespec.name;
      document.body.appendChild(a);
      a.click();
      setTimeout(function(){
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);
      }, 100);
      return true;
    };
  }

  exports.loadTextFileImpl = loadTextFileImpl;
  exports.loadBinaryFileAsTextImpl = loadBinaryFileAsTextImpl;
  exports.saveTextFile = saveTextFile;
})(PS["JS.FileIO"] = PS["JS.FileIO"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["JS.FileIO"] = $PS["JS.FileIO"] || {};
  var exports = $PS["JS.FileIO"];
  var $foreign = $PS["JS.FileIO"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];                
  var loadTextFile = function ($0) {
      return Effect_Aff_Compat.fromEffectFnAff($foreign.loadTextFileImpl($0));
  };
  var loadBinaryFileAsText = function ($1) {
      return Effect_Aff_Compat.fromEffectFnAff($foreign.loadBinaryFileAsTextImpl($1));
  };
  exports["loadTextFile"] = loadTextFile;
  exports["loadBinaryFileAsText"] = loadBinaryFileAsText;
  exports["saveTextFile"] = $foreign.saveTextFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.FileInputComponent"] = $PS["Halogen.FileInputComponent"] || {};
  var exports = $PS["Halogen.FileInputComponent"];
  var CSS_Display = $PS["CSS.Display"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var DOM_HTML_Indexed_InputType = $PS["DOM.HTML.Indexed.InputType"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_FileInputComponent_Dom = $PS["Halogen.FileInputComponent.Dom"];
  var Halogen_HTML_CSS = $PS["Halogen.HTML.CSS"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var JS_FileIO = $PS["JS.FileIO"];
  var FileLoaded = (function () {
      function FileLoaded(value0) {
          this.value0 = value0;
      };
      FileLoaded.create = function (value0) {
          return new FileLoaded(value0);
      };
      return FileLoaded;
  })();
  var LoadFile = (function () {
      function LoadFile() {

      };
      LoadFile.value = new LoadFile();
      return LoadFile;
  })();
  var component = function (dictMonadAff) {
      return function (ctx) {
          var noDisplayStyle = Halogen_HTML_CSS.style(CSS_Display.display(CSS_Display.displayNone));
          var render = function (state) {
              return Halogen_HTML_Elements.span([ Halogen_HTML_Properties.class_("fileInput") ])([ Halogen_HTML_Elements.label([ Halogen_HTML_Properties["for"](ctx.componentId), Halogen_HTML_Properties.class_("hoverable fileInputLabel") ])([ Halogen_HTML_Core.text(ctx.prompt) ]), Halogen_HTML_Elements.input([ Halogen_HTML_Events.onChange(function (v) {
                  return new Data_Maybe.Just(LoadFile.value);
              }), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputFile.value), Halogen_HTML_Properties.id_(ctx.componentId), Halogen_HTML_Properties.accept(ctx.accept), Halogen_HTML_Properties.enabled(state.isEnabled), noDisplayStyle ]) ]);
          };
          var initialState = function (v) {
              return {
                  mfsp: Data_Maybe.Nothing.value,
                  isEnabled: true
              };
          };
          var handleQuery = function (v) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (state) {
                  var $9 = {};
                  for (var $10 in state) {
                      if ({}.hasOwnProperty.call(state, $10)) {
                          $9[$10] = state[$10];
                      };
                  };
                  $9.isEnabled = v.value0;
                  return $9;
              }))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value1));
              });
          };
          var handleAction = function (v) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)((function () {
                  if (ctx.isBinary) {
                      return Effect_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(JS_FileIO.loadBinaryFileAsText(ctx.componentId));
                  };
                  return Effect_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))(JS_FileIO.loadTextFile(ctx.componentId));
              })())(function (filespec) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (state) {
                      var $16 = {};
                      for (var $17 in state) {
                          if ({}.hasOwnProperty.call(state, $17)) {
                              $16[$17] = state[$17];
                          };
                      };
                      $16.mfsp = new Data_Maybe.Just(filespec);
                      return $16;
                  }))(function () {
                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_FileInputComponent_Dom.resetInputValue(ctx.componentId)))(function () {
                          return Halogen_Query_HalogenM.raise(new FileLoaded(filespec));
                      });
                  });
              });
          };
          return Halogen_Component.mkComponent({
              initialState: initialState,
              render: render,
              "eval": Halogen_Component.mkEval({
                  handleAction: handleAction,
                  handleQuery: handleQuery,
                  receive: Halogen_Component.defaultEval.receive,
                  initialize: Data_Maybe.Nothing.value,
                  finalize: Data_Maybe.Nothing.value
              })
          });
      };
  };
  exports["component"] = component;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.HTML"] = $PS["Halogen.HTML"] || {};
  var exports = $PS["Halogen.HTML"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];        
  var slot = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictOrd) {
              return function (label) {
                  return function (p) {
                      return function (component) {
                          return function (input) {
                              return function (outputQuery) {
                                  return Halogen_HTML_Core.widget(new Halogen_Component.ComponentSlot(Halogen_Component.componentSlot()(dictIsSymbol)(dictOrd)(label)(p)(component)(input)(outputQuery)));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["slot"] = slot;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.PlayerComponent.Style"] = $PS["Halogen.PlayerComponent.Style"] || {};
  var exports = $PS["Halogen.PlayerComponent.Style"];
  var CSS_Background = $PS["CSS.Background"];
  var CSS_Border = $PS["CSS.Border"];
  var CSS_Box = $PS["CSS.Box"];
  var CSS_Display = $PS["CSS.Display"];
  var CSS_Font = $PS["CSS.Font"];
  var CSS_Geometry = $PS["CSS.Geometry"];
  var CSS_Overflow = $PS["CSS.Overflow"];
  var CSS_Size = $PS["CSS.Size"];
  var CSS_String = $PS["CSS.String"];
  var CSS_Stylesheet = $PS["CSS.Stylesheet"];
  var Color = $PS["Color"];
  var Control_Bind = $PS["Control.Bind"];
  var Halogen_HTML_CSS = $PS["Halogen.HTML.CSS"];                
  var playerStyle = Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(Color.rgb(0)(0)(0)))(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundImages([ CSS_String.fromString(CSS_Background.isStringBackgroundImage)("-webkit-gradient(linear,left top,left bottom,from(rgba(66,66,66,1)),to(rgba(22,22,22,1)))"), CSS_String.fromString(CSS_Background.isStringBackgroundImage)("-webkit-linear-gradient(top, rgba(66, 66, 66, 1) 0%, rgba(22, 22, 22, 1) 100%)"), CSS_String.fromString(CSS_Background.isStringBackgroundImage)("-moz-linear-gradient(top, rgba(66, 66, 66, 1) 0%, rgba(22, 22, 22, 1) 100%)"), CSS_String.fromString(CSS_Background.isStringBackgroundImage)("-ms-gradient(top, rgba(66, 66, 66, 1) 0%, rgba(22, 22, 22, 1) 100%)"), CSS_String.fromString(CSS_Background.isStringBackgroundImage)("-o-gradient(top, rgba(66, 66, 66, 1) 0%, rgba(22, 22, 22, 1) 100%)"), CSS_String.fromString(CSS_Background.isStringBackgroundImage)("linear-gradient(top, rgba(66, 66, 66, 1) 0%, rgba(22, 22, 22, 1) 100%)") ]))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Box.boxShadow(CSS_Size.px(0.0))(CSS_Size.px(0.0))(CSS_Size.px(10.0))(Color.rgb(15)(15)(15)))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Border.borderRadius(CSS_Size.px(10.0))(CSS_Size.px(10.0))(CSS_Size.px(10.0))(CSS_Size.px(10.0)))(function () {
                  return CSS_Font.color(Color.rgba(255)(255)(255)(0.8));
              });
          });
      });
  }));
  var playerBlockStyle = Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(10.0))(CSS_Size.px(0.0))(CSS_Size.px(10.0))(CSS_Size.px(0.0)))(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Background.background(CSS_Background["backgroundColor'"])(Color.rgba(0)(0)(0)(0.7)))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(Color.rgb(0)(0)(0)))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Border.borderRadius(CSS_Size.px(10.0))(CSS_Size.px(10.0))(CSS_Size.px(10.0))(CSS_Size.px(10.0)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.px(320.0)))(function () {
                      return CSS_Geometry.height(CSS_Size.px(42.0));
                  });
              });
          });
      });
  }));                                                                                    
  var capsuleStyle = Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Border.border(CSS_Border.solid)(CSS_Size.px(1.0))(Color.rgb(0)(0)(0)))(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.margin(CSS_Size.px(9.0))(CSS_Size.px(0.0))(CSS_Size.px(8.0))(CSS_Size.px(5.0)))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Border.borderRadius(CSS_Size.px(5.0))(CSS_Size.px(5.0))(CSS_Size.px(5.0))(CSS_Size.px(5.0)))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Background.background(CSS_Background["backgroundColor'"])(Color.rgb(0)(0)(0)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundImages([ CSS_String.fromString(CSS_Background.isStringBackgroundImage)("-webkit-gradient(linear, left top, left bottom, color-stop(1, rgba(0,0,0,0.5)), color-stop(0, #333))"), CSS_String.fromString(CSS_Background.isStringBackgroundImage)("-webkit-linear-gradient(top, rgba(0, 0, 0, 0.5) 1, #333 0)"), CSS_String.fromString(CSS_Background.isStringBackgroundImage)("-moz-linear-gradient(top, rgba(0, 0, 0, 0.5) 1, #333 0)"), CSS_String.fromString(CSS_Background.isStringBackgroundImage)("-ms-gradient(top, rgba(0, 0, 0, 0.5) 1, #333 0)"), CSS_String.fromString(CSS_Background.isStringBackgroundImage)("-o-gradient(top, rgba(0, 0, 0, 0.5) 1, #333 0)"), CSS_String.fromString(CSS_Background.isStringBackgroundImage)("linear-gradient(top, rgba(0, 0, 0, 0.5) 1, #333 0)") ]))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Box.boxShadow(CSS_Size.px(0.0))(CSS_Size.px(0.0))(CSS_Size.px(0.0))(Color.rgb(5)(5)(5)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Overflow.overflow(CSS_Overflow.hidden))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Display.display(CSS_Display.inlineBlock))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.px(220.0)))(function () {
                                      return CSS_Geometry.height(CSS_Size.px(20.0));
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  }));
  var buttonStyle = Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.px(24.0)))(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.height(CSS_Size.px(24.0)))(function () {
          return CSS_Geometry.margin(CSS_Size.px(6.0))(CSS_Size.px(0.0))(CSS_Size.px(1.0))(CSS_Size.px(8.0));
      });
  }));
  exports["capsuleStyle"] = capsuleStyle;
  exports["playerBlockStyle"] = playerBlockStyle;
  exports["playerStyle"] = playerStyle;
  exports["buttonStyle"] = buttonStyle;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.PlayerComponent"] = $PS["Halogen.PlayerComponent"] || {};
  var exports = $PS["Halogen.PlayerComponent"];
  var Audio_SoundFont = $PS["Audio.SoundFont"];
  var Audio_SoundFont_Melody_Class = $PS["Audio.SoundFont.Melody.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var DOM_HTML_Indexed_InputType = $PS["DOM.HTML.Indexed.InputType"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Eq = $PS["Data.Generic.Rep.Eq"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_PlayerComponent_Style = $PS["Halogen.PlayerComponent.Style"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];                
  var PLAYING = (function () {
      function PLAYING() {

      };
      PLAYING.value = new PLAYING();
      return PLAYING;
  })();
  var PENDINGPAUSED = (function () {
      function PENDINGPAUSED() {

      };
      PENDINGPAUSED.value = new PENDINGPAUSED();
      return PENDINGPAUSED;
  })();
  var PAUSED = (function () {
      function PAUSED() {

      };
      PAUSED.value = new PAUSED();
      return PAUSED;
  })();
  var SetInstruments = (function () {
      function SetInstruments(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetInstruments.create = function (value0) {
          return function (value1) {
              return new SetInstruments(value0, value1);
          };
      };
      return SetInstruments;
  })();
  var PlayMelody = (function () {
      function PlayMelody(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PlayMelody.create = function (value0) {
          return function (value1) {
              return new PlayMelody(value0, value1);
          };
      };
      return PlayMelody;
  })();
  var StepMelody = (function () {
      function StepMelody(value0) {
          this.value0 = value0;
      };
      StepMelody.create = function (value0) {
          return new StepMelody(value0);
      };
      return StepMelody;
  })();
  var StopMelody = (function () {
      function StopMelody(value0) {
          this.value0 = value0;
      };
      StopMelody.create = function (value0) {
          return new StopMelody(value0);
      };
      return StopMelody;
  })();
  var EnablePlayButton = (function () {
      function EnablePlayButton(value0) {
          this.value0 = value0;
      };
      EnablePlayButton.create = function (value0) {
          return new EnablePlayButton(value0);
      };
      return EnablePlayButton;
  })();
  var HandleNewPlayable = (function () {
      function HandleNewPlayable(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      HandleNewPlayable.create = function (value0) {
          return function (value1) {
              return new HandleNewPlayable(value0, value1);
          };
      };
      return HandleNewPlayable;
  })();
  var IsPlaying = (function () {
      function IsPlaying(value0) {
          this.value0 = value0;
      };
      IsPlaying.create = function (value0) {
          return new IsPlaying(value0);
      };
      return IsPlaying;
  })();
  var PlayMelodyAction = (function () {
      function PlayMelodyAction(value0) {
          this.value0 = value0;
      };
      PlayMelodyAction.create = function (value0) {
          return new PlayMelodyAction(value0);
      };
      return PlayMelodyAction;
  })();
  var StopMelodyAction = (function () {
      function StopMelodyAction() {

      };
      StopMelodyAction.value = new StopMelodyAction();
      return StopMelodyAction;
  })();
  var temporarilyFreezePlayButton = function (dictBind) {
      return function (dictPlayable) {
          return function (dictMonadState) {
              return function (dictMonadAff) {
                  return Control_Bind.bind(dictBind)(Control_Monad_State_Class.get(dictMonadState))(function (state) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Control_Monad_State_Class.put(dictMonadState)((function () {
                          var $40 = {};
                          for (var $41 in state) {
                              if ({}.hasOwnProperty.call(state, $41)) {
                                  $40[$41] = state[$41];
                              };
                          };
                          $40.playing = PENDINGPAUSED.value;
                          return $40;
                      })()))(function () {
                          return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff.delay(state.phraseLength * 1000.0)))(function () {
                              return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(EnablePlayButton.create);
                          });
                      });
                  });
              };
          };
      };
  };
  var progressValue = Halogen_HTML_Properties.prop(Halogen_HTML_Core.isPropNumber)("value");
  var playEvent = function (instruments) {
      return function (midiPhrase) {
          return Audio_SoundFont.playNotes(instruments)(midiPhrase);
      };
  };
  var genericPlaybackState = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof PLAYING) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof PENDINGPAUSED) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof PAUSED) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value));
      };
      throw new Error("Failed pattern match at Halogen.PlayerComponent (line 46, column 1 - line 46, column 64): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return PLAYING.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return PENDINGPAUSED.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
          return PAUSED.value;
      };
      throw new Error("Failed pattern match at Halogen.PlayerComponent (line 46, column 1 - line 46, column 64): " + [ x.constructor.name ]);
  });     
  var establishMelody = function (dictBind) {
      return function (dictPlayable) {
          return function (dictMonadState) {
              return function (dictMonadAff) {
                  return Control_Bind.bind(dictBind)(Control_Monad_State_Class.get(dictMonadState))(function (state) {
                      var melody = Audio_SoundFont_Melody_Class.toMelody(dictPlayable)(state.playable)(Audio_SoundFont.instrumentChannels(state.instruments));
                      return Control_Bind.bind(dictBind)(Control_Monad_State_Class.modify(dictMonadState)(function (st) {
                          var $50 = {};
                          for (var $51 in st) {
                              if ({}.hasOwnProperty.call(st, $51)) {
                                  $50[$51] = st[$51];
                              };
                          };
                          $50.melody = melody;
                          return $50;
                      }))(function () {
                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit);
                      });
                  });
              };
          };
      };
  };
  var eqEvent = new Data_Eq.Eq(Data_Generic_Rep_Eq.genericEq(genericPlaybackState)(Data_Generic_Rep_Eq.genericEqSum(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqNoArguments))(Data_Generic_Rep_Eq.genericEqSum(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqNoArguments))(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqNoArguments)))));
  var locateNextPhrase = function (dictPlayable) {
      return function (state) {
          var $53 = !Data_Eq.eq(eqEvent)(state.playing)(PLAYING.value) || Data_Array["null"](state.melody);
          if ($53) {
              return Data_Maybe.Nothing.value;
          };
          return Data_Array.index(state.melody)(state.phraseIndex);
      };
  };
  var step = function (dictBind) {
      return function (dictPlayable) {
          return function (dictMonadState) {
              return function (dictMonadEffect) {
                  return function (dictMonadAff) {
                      return Control_Bind.bind(dictBind)(Control_Monad_State_Class.get(dictMonadState))(function (state) {
                          var mPhrase = locateNextPhrase(dictPlayable)(state);
                          if (mPhrase instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(dictBind)(Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(playEvent(state.instruments)(mPhrase.value0)))(function (phraseLength) {
                                  var newState = {
                                      phraseIndex: state.phraseIndex + 1 | 0,
                                      phraseLength: phraseLength,
                                      instruments: state.instruments,
                                      melody: state.melody,
                                      playable: state.playable,
                                      playing: state.playing
                                  };
                                  return Control_Bind.discard(Control_Bind.discardUnit)(dictBind)(Control_Monad_State_Class.put(dictMonadState)(newState))(function () {
                                      return Control_Bind.bind(dictBind)(Effect_Aff_Class.liftAff(dictMonadAff)(Effect_Aff.delay(phraseLength * 1000.0)))(function () {
                                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(StepMelody.create);
                                      });
                                  });
                              });
                          };
                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(StopMelody.create);
                      });
                  };
              };
          };
      };
  };
  var stop = function (dictBind) {
      return function (dictPlayable) {
          return function (dictMonadState) {
              return function (dictMonadAff) {
                  return Control_Bind.bind(dictBind)(Control_Monad_State_Class.get(dictMonadState))(function (state) {
                      var $56 = Data_Eq.eq(eqEvent)(state.playing)(PLAYING.value);
                      if ($56) {
                          return Control_Bind.bind(dictBind)(temporarilyFreezePlayButton(dictBind)(dictPlayable)(dictMonadState)(dictMonadAff))(function () {
                              return Control_Bind.bind(dictBind)(Control_Monad_State_Class.get(dictMonadState))(function (state$prime) {
                                  return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())({
                                      phraseIndex: 0,
                                      playing: PAUSED.value,
                                      instruments: state$prime.instruments,
                                      melody: state$prime.melody,
                                      phraseLength: state$prime.phraseLength,
                                      playable: state$prime.playable
                                  });
                              });
                          });
                      };
                      return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())({
                          phraseIndex: 0,
                          playing: PAUSED.value,
                          instruments: state.instruments,
                          melody: state.melody,
                          phraseLength: state.phraseLength,
                          playable: state.playable
                      });
                  });
              };
          };
      };
  };
  var handleQuery = function (dictMonadAff) {
      return function (dictPlayable) {
          return function (v) {
              if (v instanceof SetInstruments) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                      var newPlayingState = (function () {
                          var $58 = Data_Eq.eq(eqEvent)(state.playing)(PLAYING.value);
                          if ($58) {
                              return PENDINGPAUSED.value;
                          };
                          return PAUSED.value;
                      })();
                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                          var $59 = {};
                          for (var $60 in st) {
                              if ({}.hasOwnProperty.call(st, $60)) {
                                  $59[$60] = st[$60];
                              };
                          };
                          $59.instruments = v.value0;
                          $59.phraseIndex = 0;
                          $59.phraseLength = 0.0;
                          $59.playing = newPlayingState;
                          $59.melody = [  ];
                          return $59;
                      }))(function () {
                          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value1));
                      });
                  });
              };
              if (v instanceof PlayMelody) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Array["null"](state.melody))(establishMelody(Halogen_Query_HalogenM.bindHalogenM)(dictPlayable)(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff))))(function () {
                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state$prime) {
                              var $64 = Data_Eq.eq(eqEvent)(v.value0)(PLAYING.value) && !Data_Array["null"](state$prime.melody);
                              if ($64) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.raise(new IsPlaying(true)))(function () {
                                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                          var $65 = {};
                                          for (var $66 in st) {
                                              if ({}.hasOwnProperty.call(st, $66)) {
                                                  $65[$66] = st[$66];
                                              };
                                          };
                                          $65.playing = PLAYING.value;
                                          return $65;
                                      }))(function () {
                                          return handleQuery(dictMonadAff)(dictPlayable)(new StepMelody(v.value1));
                                      });
                                  });
                              };
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(temporarilyFreezePlayButton(Halogen_Query_HalogenM.bindHalogenM)(dictPlayable)(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff)))(function (nextInstruction) {
                                  return handleQuery(dictMonadAff)(dictPlayable)(nextInstruction(v.value1));
                              });
                          });
                      });
                  });
              };
              if (v instanceof StepMelody) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                      var $70 = Data_Eq.eq(eqEvent)(state.playing)(PLAYING.value) && !Data_Array["null"](state.melody);
                      if ($70) {
                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(step(Halogen_Query_HalogenM.bindHalogenM)(dictPlayable)(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff)))(function (nextInstruction) {
                              return handleQuery(dictMonadAff)(dictPlayable)(nextInstruction(v.value0));
                          });
                      };
                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(temporarilyFreezePlayButton(Halogen_Query_HalogenM.bindHalogenM)(dictPlayable)(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff)))(function (nextInstruction) {
                          return handleQuery(dictMonadAff)(dictPlayable)(nextInstruction(v.value0));
                      });
                  });
              };
              if (v instanceof EnablePlayButton) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.raise(new IsPlaying(false)))(function () {
                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (state) {
                          var $72 = {};
                          for (var $73 in state) {
                              if ({}.hasOwnProperty.call(state, $73)) {
                                  $72[$73] = state[$73];
                              };
                          };
                          $72.playing = PAUSED.value;
                          return $72;
                      }))(function () {
                          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value0));
                      });
                  });
              };
              if (v instanceof StopMelody) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(stop(Halogen_Query_HalogenM.bindHalogenM)(dictPlayable)(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff)))(function (newState) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(newState))(function () {
                          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value0));
                      });
                  });
              };
              if (v instanceof HandleNewPlayable) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(stop(Halogen_Query_HalogenM.bindHalogenM)(dictPlayable)(Halogen_Query_HalogenM.monadStateHalogenM)(Halogen_Query_HalogenM.monadAffHalogenM(dictMonadAff)))(function (newState) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)({
                              playable: v.value0,
                              melody: [  ],
                              instruments: newState.instruments,
                              phraseIndex: newState.phraseIndex,
                              phraseLength: newState.phraseLength,
                              playing: newState.playing
                          }))(function () {
                              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value1));
                          });
                      });
                  });
              };
              throw new Error("Failed pattern match at Halogen.PlayerComponent (line 183, column 15 - line 257, column 21): " + [ v.constructor.name ]);
          };
      };
  };
  var handleAction = function (dictMonadAff) {
      return function (dictPlayable) {
          return function (v) {
              if (v instanceof StopMelodyAction) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(handleQuery(dictMonadAff)(dictPlayable)(new StopMelody(Data_Unit.unit)))(function () {
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                  });
              };
              if (v instanceof PlayMelodyAction) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(handleQuery(dictMonadAff)(dictPlayable)(new PlayMelody(v.value0, Data_Unit.unit)))(function () {
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                  });
              };
              throw new Error("Failed pattern match at Halogen.PlayerComponent (line 267, column 16 - line 273, column 14): " + [ v.constructor.name ]);
          };
      };
  };
  var component = function (dictPlayable) {
      return function (dictMonadAff) {
          return function (playable) {
              return function (instruments) {
                  var render = function (state) {
                      var sliderPos = Data_Int.toNumber(state.phraseIndex);
                      var playAction = (function () {
                          var $81 = Data_Eq.eq(eqEvent)(state.playing)(PLAYING.value);
                          if ($81) {
                              return new PlayMelodyAction(PAUSED.value);
                          };
                          return new PlayMelodyAction(PLAYING.value);
                      })();
                      var playButtonImg = (function () {
                          var $82 = Data_Eq.eq(eqEvent)(state.playing)(PAUSED.value);
                          if ($82) {
                              return "assets/images/play.png";
                          };
                          return "assets/images/pause.png";
                      })();
                      var isDisabled = Data_Eq.eq(eqEvent)(state.playing)(PENDINGPAUSED.value);
                      var capsuleMax = Data_Int.toNumber(Data_Array.length(state.melody));
                      return Halogen_HTML_Elements.div([ Halogen_PlayerComponent_Style.playerBlockStyle ])([ Halogen_HTML_Elements.div([ Halogen_PlayerComponent_Style.playerStyle ])([ Halogen_HTML_Elements.input([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputImage.value), Halogen_HTML_Properties.disabled(isDisabled), Halogen_HTML_Properties.src(playButtonImg), Halogen_HTML_Events.onClick(function (v) {
                          return new Data_Maybe.Just(playAction);
                      }), Halogen_PlayerComponent_Style.buttonStyle ]), Halogen_HTML_Elements.input([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputImage.value), Halogen_HTML_Properties.disabled(isDisabled), Halogen_HTML_Properties.src("assets/images/stop.png"), Halogen_HTML_Events.onClick(function (v) {
                          return new Data_Maybe.Just(StopMelodyAction.value);
                      }), Halogen_PlayerComponent_Style.buttonStyle ]), Halogen_HTML_Elements.progress([ Halogen_HTML_Properties.max(capsuleMax), progressValue(sliderPos), Halogen_PlayerComponent_Style.capsuleStyle ])([  ]) ]) ]);
                  };
                  var initialState = function (v) {
                      return {
                          instruments: instruments,
                          melody: [  ],
                          playing: PAUSED.value,
                          phraseIndex: 0,
                          phraseLength: 0.0,
                          playable: playable
                      };
                  };
                  return Halogen_Component.mkComponent({
                      initialState: initialState,
                      render: render,
                      "eval": Halogen_Component.mkEval({
                          handleAction: handleAction(dictMonadAff)(dictPlayable),
                          handleQuery: handleQuery(dictMonadAff)(dictPlayable),
                          receive: Halogen_Component.defaultEval.receive,
                          initialize: Data_Maybe.Nothing.value,
                          finalize: Data_Maybe.Nothing.value
                      })
                  });
              };
          };
      };
  };
  exports["StopMelody"] = StopMelody;
  exports["HandleNewPlayable"] = HandleNewPlayable;
  exports["component"] = component;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Query"] = $PS["Halogen.Query"] || {};
  var exports = $PS["Halogen.Query"];
  var Control_Category = $PS["Control.Category"];
  var Data_Unit = $PS["Data.Unit"];                                      
  var tell = function (act) {
      return act(Data_Unit.unit);
  };
  var request = function (req) {
      return req(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["tell"] = tell;
  exports["request"] = request;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.SimpleButtonComponent"] = $PS["Halogen.SimpleButtonComponent"] || {};
  var exports = $PS["Halogen.SimpleButtonComponent"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Toggled = (function () {
      function Toggled(value0) {
          this.value0 = value0;
      };
      Toggled.create = function (value0) {
          return new Toggled(value0);
      };
      return Toggled;
  })();
  var Toggle = (function () {
      function Toggle() {

      };
      Toggle.value = new Toggle();
      return Toggle;
  })();
  var toggledLabelComponent = function (offLabel) {
      return function (onLabel) {
          var render = function (state) {
              var label = (function () {
                  if (state.isOn) {
                      return onLabel;
                  };
                  return offLabel;
              })();
              return Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
                  return new Data_Maybe.Just(Toggle.value);
              }), Halogen_HTML_Properties.class_("hoverable"), Halogen_HTML_Properties.enabled(state.isEnabled) ])([ Halogen_HTML_Core.text(label) ]);
          };
          var initialState = function (v) {
              return {
                  isOn: false,
                  isEnabled: true
              };
          };
          var handleQuery = function (v) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (state) {
                  var $9 = {};
                  for (var $10 in state) {
                      if ({}.hasOwnProperty.call(state, $10)) {
                          $9[$10] = state[$10];
                      };
                  };
                  $9.isEnabled = v.value0;
                  return $9;
              }))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value1));
              });
          };
          var handleAction = function (v) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                  var nextState = (function () {
                      var $15 = {};
                      for (var $16 in state) {
                          if ({}.hasOwnProperty.call(state, $16)) {
                              $15[$16] = state[$16];
                          };
                      };
                      $15.isOn = !state.isOn;
                      return $15;
                  })();
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(nextState))(function () {
                      return Halogen_Query_HalogenM.raise(new Toggled(nextState.isOn));
                  });
              });
          };
          return Halogen_Component.mkComponent({
              initialState: initialState,
              render: render,
              "eval": Halogen_Component.mkEval({
                  handleAction: handleAction,
                  handleQuery: handleQuery,
                  receive: Halogen_Component.defaultEval.receive,
                  initialize: Data_Maybe.Nothing.value,
                  finalize: Data_Maybe.Nothing.value
              })
          });
      };
  };
  var component = function (label) {
      return toggledLabelComponent(label)(label);
  };
  exports["component"] = component;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Abc.Beat"] = $PS["VexFlow.Abc.Beat"] || {};
  var exports = $PS["VexFlow.Abc.Beat"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ratio = $PS["Data.Ratio"];                
  var exactBeatNumber = function (phraseDur) {
      return function (beatDur) {
          return function (noteIndex) {
              var beats = Data_EuclideanRing.div(Data_Ratio.euclideanRingRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(phraseDur)(beatDur);
              var $1 = noteIndex === 0;
              if ($1) {
                  return Data_Maybe.Nothing.value;
              };
              var v = Data_Ratio.denominator(beats);
              if (v === 1) {
                  return Data_Maybe.Just.create({
                      beatNumber: Data_Ratio.numerator(beats),
                      noteIndex: noteIndex
                  });
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var beatDuration = function (ts) {
      if (ts.numerator === 3 && ts.denominator === 2) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(2);
      };
      if (ts.numerator === 6 && ts.denominator === 8) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(3)(8);
      };
      if (ts.numerator === 9 && ts.denominator === 8) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(3)(8);
      };
      if (ts.numerator === 12 && ts.denominator === 8) {
          return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(3)(8);
      };
      return Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(ts.denominator);
  };
  exports["beatDuration"] = beatDuration;
  exports["exactBeatNumber"] = exactBeatNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Abc.ContextChange"] = $PS["VexFlow.Abc.ContextChange"] || {};
  var exports = $PS["VexFlow.Abc.ContextChange"];
  var MeterChange = (function () {
      function MeterChange(value0) {
          this.value0 = value0;
      };
      MeterChange.create = function (value0) {
          return new MeterChange(value0);
      };
      return MeterChange;
  })();
  var KeyChange = (function () {
      function KeyChange(value0) {
          this.value0 = value0;
      };
      KeyChange.create = function (value0) {
          return new KeyChange(value0);
      };
      return KeyChange;
  })();
  var UnitNoteChange = (function () {
      function UnitNoteChange(value0) {
          this.value0 = value0;
      };
      UnitNoteChange.create = function (value0) {
          return new UnitNoteChange(value0);
      };
      return UnitNoteChange;
  })();
  exports["MeterChange"] = MeterChange;
  exports["KeyChange"] = KeyChange;
  exports["UnitNoteChange"] = UnitNoteChange;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Abc.TickableContext"] = $PS["VexFlow.Abc.TickableContext"] || {};
  var exports = $PS["VexFlow.Abc.TickableContext"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Abc_KeySignature = $PS["Data.Abc.KeySignature"];
  var Data_Either = $PS["Data.Either"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_Rational = $PS["Data.Rational"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var TickableContext = (function () {
      function TickableContext(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TickableContext.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TickableContext(value0, value1, value2);
              };
          };
      };
      return TickableContext;
  })();
  var tickableSemigroupCtx = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new TickableContext(v.value0 + v1.value0 | 0, v.value1 + v1.value1 | 0, Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(v.value2)(v1.value2));
      };
  });
  var tickableMonoidCtx = new Data_Monoid.Monoid(function () {
      return tickableSemigroupCtx;
  }, new TickableContext(0, 0, Data_Rational.fromInt(0)));
  var tickableCountWidth = function (n) {
      if (n === 1) {
          return 1.5;
      };
      if (n === 2) {
          return 2.5;
      };
      return Data_Int.toNumber(n);
  };
  var pixelsPerItem = 35.0;
  var keySignatureWidth = function (keySignature) {
      var v = Data_List.length(Data_Abc_KeySignature.keySet(keySignature));
      if (v === 0) {
          return 0.0;
      };
      if (v === 1) {
          return 1.0;
      };
      if (v === 2) {
          return 1.0;
      };
      return 1.5;
  };
  var graceLength = function (maybeGraceNote) {
      return Data_Maybe.fromMaybe(0)(Data_Functor.map(Data_Maybe.functorMaybe)(function (g) {
          return Data_List_NonEmpty.length(g.notes);
      })(maybeGraceNote));
  };
  var getRorNsGraceLength = function (rOrNs) {
      var f = function (acc) {
          return function (rOrN) {
              if (rOrN instanceof Data_Either.Left) {
                  return 0 + acc | 0;
              };
              if (rOrN instanceof Data_Either.Right) {
                  return graceLength(rOrN.value0.maybeGrace) + acc | 0;
              };
              throw new Error("Failed pattern match at VexFlow.Abc.TickableContext (line 92, column 7 - line 95, column 53): " + [ rOrN.constructor.name ]);
          };
      };
      return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(0)(rOrNs);
  };
  var getRorNsDuration = function (rOrNs) {
      var f = function (acc) {
          return function (rOrN) {
              if (rOrN instanceof Data_Either.Left) {
                  return Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(rOrN.value0.duration)(acc);
              };
              if (rOrN instanceof Data_Either.Right) {
                  return Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(rOrN.value0.abcNote.duration)(acc);
              };
              throw new Error("Failed pattern match at VexFlow.Abc.TickableContext (line 82, column 7 - line 84, column 68): " + [ rOrN.constructor.name ]);
          };
      };
      return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(Data_Rational.fromInt(0))(rOrNs);
  };
  var getTickableContext = function (m) {
      if (m instanceof Data_Abc.Note) {
          return new TickableContext(1, graceLength(m.value0.maybeGrace), m.value0.abcNote.duration);
      };
      if (m instanceof Data_Abc.Rest) {
          return new TickableContext(1, 0, m.value0.duration);
      };
      if (m instanceof Data_Abc.Chord) {
          var abcNote = Data_List_NonEmpty.head(m.value0.notes);
          var duration = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(m.value0.duration)(abcNote.duration);
          return new TickableContext(1, 0, duration);
      };
      if (m instanceof Data_Abc.BrokenRhythmPair) {
          return new TickableContext(2, graceLength(m.value0.maybeGrace) + graceLength(m.value2.maybeGrace) | 0, Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(m.value0.abcNote.duration)(m.value2.abcNote.duration));
      };
      if (m instanceof Data_Abc.Tuplet) {
          var reduction = Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(m.value1.q)(m.value1.p);
          var graceNoteLength = getRorNsGraceLength(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(m.value2));
          var duration = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(reduction)(getRorNsDuration(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(m.value2)));
          return new TickableContext(m.value1.r, graceNoteLength, duration);
      };
      return Data_Monoid.mempty(tickableMonoidCtx);
  };
  var estimateBarWidth = function (hasClef) {
      return function (hasTimeSig) {
          return function (maybeKeySig) {
              return function (abcBar) {
                  var v = Data_Foldable.foldMap(Data_List_Types.foldableList)(tickableMonoidCtx)(getTickableContext)(abcBar.music);
                  var timeSigCount = (function () {
                      if (hasTimeSig) {
                          return 1.0;
                      };
                      return 0.0;
                  })();
                  var keySigCount = Data_Maybe.maybe(0.0)(keySignatureWidth)(maybeKeySig);
                  var clefCount = (function () {
                      if (hasClef) {
                          return 1.0;
                      };
                      return 0.0;
                  })();
                  return Data_Int.round((clefCount + timeSigCount + keySigCount + tickableCountWidth(v.value0) + 0.5 * Data_Int.toNumber(v.value1)) * pixelsPerItem);
              };
          };
      };
  };
  exports["getTickableContext"] = getTickableContext;
  exports["estimateBarWidth"] = estimateBarWidth;
  exports["tickableSemigroupCtx"] = tickableSemigroupCtx;
  exports["tickableMonoidCtx"] = tickableMonoidCtx;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Types"] = $PS["VexFlow.Types"] || {};
  var exports = $PS["VexFlow.Types"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var VexFlow_Abc_TickableContext = $PS["VexFlow.Abc.TickableContext"];                
  var Single = (function () {
      function Single() {

      };
      Single.value = new Single();
      return Single;
  })();
  var Double = (function () {
      function Double() {

      };
      Double.value = new Double();
      return Double;
  })();
  var NoLine = (function () {
      function NoLine() {

      };
      NoLine.value = new NoLine();
      return NoLine;
  })();
  var MusicSpec = function (x) {
      return x;
  };
  var staveSeparation = 100;
  var staveIndentation = 10; 
  var musicSpecSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Data_Semigroup.append(Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "beatMarkers";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "contextChanges";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "noteSpecs";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "repetitions";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "slurBrackets";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "tickableContext";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "ties";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "tuplets";
          }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
              return "typesettingSpaces";
          }))()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(VexFlow_Abc_TickableContext.tickableSemigroupCtx))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray)))(v)(v1);
      };
  });
  var musicSpecMonoid = new Data_Monoid.Monoid(function () {
      return musicSpecSemigroup;
  }, {
      noteSpecs: Data_Monoid.mempty(Data_Monoid.monoidArray),
      tuplets: Data_Monoid.mempty(Data_Monoid.monoidArray),
      ties: Data_Monoid.mempty(Data_Monoid.monoidArray),
      tickableContext: Data_Monoid.mempty(VexFlow_Abc_TickableContext.tickableMonoidCtx),
      contextChanges: Data_Monoid.mempty(Data_Monoid.monoidArray),
      slurBrackets: Data_Monoid.mempty(Data_Monoid.monoidArray),
      beatMarkers: Data_Monoid.mempty(Data_Monoid.monoidArray),
      repetitions: Data_Monoid.mempty(Data_Monoid.monoidArray),
      typesettingSpaces: Data_Monoid.mempty(Data_Monoid.monoidArray)
  });
  var eqLineThickness = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Single && y instanceof Single) {
              return true;
          };
          if (x instanceof Double && y instanceof Double) {
              return true;
          };
          if (x instanceof NoLine && y instanceof NoLine) {
              return true;
          };
          return false;
      };
  });
  exports["staveIndentation"] = staveIndentation;
  exports["staveSeparation"] = staveSeparation;
  exports["MusicSpec"] = MusicSpec;
  exports["Single"] = Single;
  exports["Double"] = Double;
  exports["NoLine"] = NoLine;
  exports["musicSpecMonoid"] = musicSpecMonoid;
  exports["eqLineThickness"] = eqLineThickness;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Abc.Utils"] = $PS["VexFlow.Abc.Utils"] || {};
  var exports = $PS["VexFlow.Abc.Utils"];
  var Control_Category = $PS["Control.Category"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Abc_Metadata = $PS["Data.Abc.Metadata"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_Rational = $PS["Data.Rational"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Tuple = $PS["Data.Tuple"];
  var VexFlow_Abc_Beat = $PS["VexFlow.Abc.Beat"];
  var VexFlow_Abc_ContextChange = $PS["VexFlow.Abc.ContextChange"];
  var VexFlow_Types = $PS["VexFlow.Types"];                
  var updateAbcContext = function (abcContext) {
      return function (change) {
          if (change instanceof VexFlow_Abc_ContextChange.MeterChange) {
              var timeSignature = {
                  numerator: change.value0.value0,
                  denominator: change.value0.value1
              };
              return {
                  timeSignature: timeSignature,
                  keySignature: abcContext.keySignature,
                  mTempo: abcContext.mTempo,
                  unitNoteLength: abcContext.unitNoteLength,
                  staveNo: abcContext.staveNo,
                  accumulatedStaveWidth: abcContext.accumulatedStaveWidth,
                  isMidVolta: abcContext.isMidVolta,
                  isNewTimeSignature: true,
                  maxWidth: abcContext.maxWidth,
                  pendingRepeatBegin: abcContext.pendingRepeatBegin,
                  beatDuration: VexFlow_Abc_Beat.beatDuration({
                      numerator: change.value0.value0,
                      denominator: change.value0.value1
                  })
              };
          };
          if (change instanceof VexFlow_Abc_ContextChange.KeyChange) {
              return {
                  timeSignature: abcContext.timeSignature,
                  keySignature: change.value0.keySignature,
                  mTempo: abcContext.mTempo,
                  unitNoteLength: abcContext.unitNoteLength,
                  staveNo: abcContext.staveNo,
                  accumulatedStaveWidth: abcContext.accumulatedStaveWidth,
                  isMidVolta: abcContext.isMidVolta,
                  isNewTimeSignature: false,
                  maxWidth: abcContext.maxWidth,
                  pendingRepeatBegin: abcContext.pendingRepeatBegin,
                  beatDuration: abcContext.beatDuration
              };
          };
          if (change instanceof VexFlow_Abc_ContextChange.UnitNoteChange) {
              return {
                  timeSignature: abcContext.timeSignature,
                  keySignature: abcContext.keySignature,
                  mTempo: abcContext.mTempo,
                  unitNoteLength: change.value0,
                  staveNo: abcContext.staveNo,
                  accumulatedStaveWidth: abcContext.accumulatedStaveWidth,
                  isMidVolta: abcContext.isMidVolta,
                  isNewTimeSignature: false,
                  maxWidth: abcContext.maxWidth,
                  pendingRepeatBegin: abcContext.pendingRepeatBegin,
                  beatDuration: abcContext.beatDuration
              };
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Utils (line 182, column 3 - line 199, column 19): " + [ change.constructor.name ]);
      };
  };
  var noteTicks = function (unitNoteLength) {
      return function (d) {
          return Data_Int.round(Data_Rational.toNumber(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(unitNoteLength)(d))(Data_Rational.fromInt(128))));
      };
  };
  var vexDuration = function (unitNoteLength) {
      return function (d) {
          var v = noteTicks(unitNoteLength)(d);
          if (v === 128) {
              return new Data_Either.Right({
                  vexDurString: "w",
                  dots: 0
              });
          };
          if (v === 112) {
              return new Data_Either.Right({
                  vexDurString: "h",
                  dots: 2
              });
          };
          if (v === 96) {
              return new Data_Either.Right({
                  vexDurString: "h",
                  dots: 1
              });
          };
          if (v === 64) {
              return new Data_Either.Right({
                  vexDurString: "h",
                  dots: 0
              });
          };
          if (v === 56) {
              return new Data_Either.Right({
                  vexDurString: "q",
                  dots: 2
              });
          };
          if (v === 48) {
              return new Data_Either.Right({
                  vexDurString: "q",
                  dots: 1
              });
          };
          if (v === 32) {
              return new Data_Either.Right({
                  vexDurString: "q",
                  dots: 0
              });
          };
          if (v === 28) {
              return new Data_Either.Right({
                  vexDurString: "8",
                  dots: 2
              });
          };
          if (v === 24) {
              return new Data_Either.Right({
                  vexDurString: "8",
                  dots: 1
              });
          };
          if (v === 16) {
              return new Data_Either.Right({
                  vexDurString: "8",
                  dots: 0
              });
          };
          if (v === 14) {
              return new Data_Either.Right({
                  vexDurString: "16",
                  dots: 2
              });
          };
          if (v === 12) {
              return new Data_Either.Right({
                  vexDurString: "16",
                  dots: 1
              });
          };
          if (v === 8) {
              return new Data_Either.Right({
                  vexDurString: "16",
                  dots: 0
              });
          };
          if (v === 7) {
              return new Data_Either.Right({
                  vexDurString: "32",
                  dots: 2
              });
          };
          if (v === 6) {
              return new Data_Either.Right({
                  vexDurString: "32",
                  dots: 1
              });
          };
          if (v === 4) {
              return new Data_Either.Right({
                  vexDurString: "32",
                  dots: 0
              });
          };
          if (v === 3) {
              return new Data_Either.Right({
                  vexDurString: "64",
                  dots: 1
              });
          };
          if (v === 2) {
              return new Data_Either.Right({
                  vexDurString: "64",
                  dots: 0
              });
          };
          return new Data_Either.Left("too long or too dotted duration: " + (Data_Show.show(Data_Show.showInt)(Data_Ratio.numerator(d)) + ("/" + Data_Show.show(Data_Show.showInt)(Data_Ratio.denominator(d)))));
      };
  };
  var noteDotCount = function (ctx) {
      return function (abcNote) {
          var v = vexDuration(ctx.unitNoteLength)(abcNote.duration);
          if (v instanceof Data_Either.Right) {
              return v.value0.dots;
          };
          return 0;
      };
  };
  var normaliseBroken = function (broken) {
      return function (gn1) {
          return function (gn2) {
              var up = function (i) {
                  return Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Rational.fromInt(1))(Data_Abc_Metadata.dotFactor(i));
              };
              var down = function (i) {
                  return Data_Ring.sub(Data_Ratio.ringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(Data_Rational.fromInt(1))(Data_Abc_Metadata.dotFactor(i));
              };
              if (broken instanceof Data_Abc.LeftArrow) {
                  var righta = {
                      duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(gn2.abcNote.duration)(up(broken.value0)),
                      accidental: gn2.abcNote.accidental,
                      octave: gn2.abcNote.octave,
                      pitchClass: gn2.abcNote.pitchClass,
                      tied: gn2.abcNote.tied
                  };
                  var lefta = {
                      duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(gn1.abcNote.duration)(down(broken.value0)),
                      accidental: gn1.abcNote.accidental,
                      octave: gn1.abcNote.octave,
                      pitchClass: gn1.abcNote.pitchClass,
                      tied: gn1.abcNote.tied
                  };
                  return new Data_Tuple.Tuple({
                      abcNote: lefta,
                      decorations: gn1.decorations,
                      leftSlurs: gn1.leftSlurs,
                      maybeGrace: gn1.maybeGrace,
                      rightSlurs: gn1.rightSlurs
                  }, {
                      abcNote: righta,
                      decorations: gn2.decorations,
                      leftSlurs: gn2.leftSlurs,
                      maybeGrace: gn2.maybeGrace,
                      rightSlurs: gn2.rightSlurs
                  });
              };
              if (broken instanceof Data_Abc.RightArrow) {
                  var righta = {
                      duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(gn2.abcNote.duration)(down(broken.value0)),
                      accidental: gn2.abcNote.accidental,
                      octave: gn2.abcNote.octave,
                      pitchClass: gn2.abcNote.pitchClass,
                      tied: gn2.abcNote.tied
                  };
                  var lefta = {
                      duration: Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(gn1.abcNote.duration)(up(broken.value0)),
                      accidental: gn1.abcNote.accidental,
                      octave: gn1.abcNote.octave,
                      pitchClass: gn1.abcNote.pitchClass,
                      tied: gn1.abcNote.tied
                  };
                  return new Data_Tuple.Tuple({
                      abcNote: lefta,
                      decorations: gn1.decorations,
                      leftSlurs: gn1.leftSlurs,
                      maybeGrace: gn1.maybeGrace,
                      rightSlurs: gn1.rightSlurs
                  }, {
                      abcNote: righta,
                      decorations: gn2.decorations,
                      leftSlurs: gn2.leftSlurs,
                      maybeGrace: gn2.maybeGrace,
                      rightSlurs: gn2.rightSlurs
                  });
              };
              throw new Error("Failed pattern match at VexFlow.Abc.Utils (line 126, column 5 - line 145, column 68): " + [ broken.constructor.name ]);
          };
      };
  };
  var nextStaveNo = function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return new Data_Maybe.Just(0);
      };
      if (v instanceof Data_Maybe.Just) {
          return new Data_Maybe.Just(v.value0 + 1 | 0);
      };
      throw new Error("Failed pattern match at VexFlow.Abc.Utils (line 210, column 1 - line 210, column 38): " + [ v.constructor.name ]);
  };
  var isEmptyMusicSpec = function (v) {
      return Data_Array["null"](v.noteSpecs) && Data_Array["null"](v.repetitions);
  };
  var compoundVexDuration = function (vexDur) {
      var dStr = Data_String_CodeUnits.fromCharArray(Data_Array.replicate(vexDur.dots)("d"));
      return vexDur.vexDurString + dStr;
  };
  var cMajor = (function () {
      var ks = {
          pitchClass: Data_Abc.C.value,
          accidental: Data_Abc.Natural.value,
          mode: Data_Abc.Major.value
      };
      return {
          keySignature: ks,
          modifications: Data_List_Types.Nil.value
      };
  })();
  var buildTempo = function (bpm) {
      return function (d) {
          var v = vexDuration(Data_Rational.fromInt(1))(d);
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right({
                  duration: v.value0.vexDurString,
                  dots: v.value0.dots,
                  bpm: bpm
              });
          };
          if (v instanceof Data_Either.Left) {
              return new Data_Either.Left(v.value0);
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Utils (line 94, column 3 - line 98, column 15): " + [ v.constructor.name ]);
      };
  };
  var tempoMarking = function (unitNoteLength) {
      return function (tempoSig) {
          var tempoNoteLength = Data_Foldable.foldl(Data_List_Types.foldableNonEmptyList)(Data_Semiring.add(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)))(Data_Rational.fromInt(0))(tempoSig.noteLengths);
          return Data_Either.hush(buildTempo(tempoSig.bpm)(tempoNoteLength));
      };
  };
  var initialAbcContext = function (tune) {
      return function (config) {
          var meterSignature = Data_Maybe.fromMaybe(new Data_Tuple.Tuple(4, 4))(Data_Abc_Metadata.getMeter(tune));
          var unitNoteLength = Data_Maybe.fromMaybe(Data_Ratio.reduce(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt)(1)(8))(Data_Abc_Metadata.getUnitNoteLength(tune));
          var modifiedKeySignature = Data_Maybe.fromMaybe(cMajor)(Data_Functor.map(Data_Maybe.functorMaybe)(Control_Category.identity(Control_Category.categoryFn))(Data_Abc_Metadata.getKeySig(tune)));
          var mTempo = Data_Maybe.maybe(Data_Maybe.Nothing.value)(tempoMarking(unitNoteLength))(Data_Abc_Metadata.getTempoSig(tune));
          var $36 = Data_List["null"](modifiedKeySignature.modifications);
          if ($36) {
              return new Data_Either.Right({
                  timeSignature: {
                      numerator: meterSignature.value0,
                      denominator: meterSignature.value1
                  },
                  keySignature: modifiedKeySignature.keySignature,
                  mTempo: mTempo,
                  unitNoteLength: unitNoteLength,
                  staveNo: Data_Maybe.Nothing.value,
                  accumulatedStaveWidth: VexFlow_Types.staveIndentation,
                  isMidVolta: false,
                  isNewTimeSignature: true,
                  maxWidth: Data_Int.round(Data_Int.toNumber(config.width - VexFlow_Types.staveIndentation | 0) / config.scale),
                  pendingRepeatBegin: false,
                  beatDuration: VexFlow_Abc_Beat.beatDuration({
                      numerator: meterSignature.value0,
                      denominator: meterSignature.value1
                  })
              });
          };
          return new Data_Either.Left("modifications to standard key signatures are not supported");
      };
  };
  var applyContextChanges = function (abcContext) {
      return function (eSpec) {
          if (eSpec instanceof Data_Either.Right) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(updateAbcContext)(abcContext)(eSpec.value0.contextChanges);
          };
          return abcContext;
      };
  };
  exports["applyContextChanges"] = applyContextChanges;
  exports["vexDuration"] = vexDuration;
  exports["compoundVexDuration"] = compoundVexDuration;
  exports["normaliseBroken"] = normaliseBroken;
  exports["noteDotCount"] = noteDotCount;
  exports["noteTicks"] = noteTicks;
  exports["initialAbcContext"] = initialAbcContext;
  exports["updateAbcContext"] = updateAbcContext;
  exports["nextStaveNo"] = nextStaveNo;
  exports["isEmptyMusicSpec"] = isEmptyMusicSpec;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Abc.Volta"] = $PS["VexFlow.Abc.Volta"] || {};
  var exports = $PS["VexFlow.Abc.Volta"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];                
  var isEndVolta = function (barType) {
      return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barType.repeat)(new Data_Maybe.Just(Data_Abc.End.value)) || (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barType.repeat)(new Data_Maybe.Just(Data_Abc.BeginAndEnd.value)) || (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(barType.repeat)(new Data_Maybe.Just(Data_Abc.Begin.value)) || Data_Eq.notEq(Data_Abc.eqThickness)(barType.thickness)(Data_Abc.Thin.value) && Data_Eq.notEq(Data_Abc.eqThickness)(barType.thickness)(Data_Abc.Invisible.value)));
  };
  var isMidVolta = function (barType) {
      return function (current) {
          var $1 = Data_Maybe.isJust(barType.iteration);
          if ($1) {
              return true;
          };
          var $2 = isEndVolta(barType);
          if ($2) {
              return false;
          };
          return current;
      };
  };
  var startVolta = function (barType) {
      return function (isCurrentlyMidVolta) {
          if (barType.iteration instanceof Data_Maybe.Nothing) {
              if (isCurrentlyMidVolta) {
                  var $5 = isEndVolta(barType);
                  if ($5) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just({
                      voltaType: 3,
                      iteration: ""
                  });
              };
              return Data_Maybe.Nothing.value;
          };
          if (barType.iteration instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just({
                  voltaType: 2,
                  iteration: Data_Show.show(Data_Show.showInt)(barType.iteration.value0)
              });
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Volta (line 43, column 3 - line 57, column 13): " + [ barType.iteration.constructor.name ]);
      };
  };
  var completeVolta = function (mvolta) {
      if (mvolta instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Nothing.value;
      };
      if (mvolta instanceof Data_Maybe.Just) {
          var newVoltaType = (function () {
              if (mvolta.value0.voltaType === 2) {
                  return 5;
              };
              if (mvolta.value0.voltaType === 3) {
                  return 4;
              };
              if (mvolta.value0.voltaType === 5) {
                  return 4;
              };
              return mvolta.value0.voltaType;
          })();
          return Data_Maybe.Just.create({
              voltaType: newVoltaType,
              iteration: mvolta.value0.iteration
          });
      };
      throw new Error("Failed pattern match at VexFlow.Abc.Volta (line 64, column 3 - line 81, column 48): " + [ mvolta.constructor.name ]);
  };
  exports["startVolta"] = startVolta;
  exports["completeVolta"] = completeVolta;
  exports["isMidVolta"] = isMidVolta;
  exports["isEndVolta"] = isEndVolta;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Abc.BarEnd"] = $PS["VexFlow.Abc.BarEnd"] || {};
  var exports = $PS["VexFlow.Abc.BarEnd"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var VexFlow_Abc_Utils = $PS["VexFlow.Abc.Utils"];
  var VexFlow_Abc_Volta = $PS["VexFlow.Abc.Volta"];
  var VexFlow_Types = $PS["VexFlow.Types"];                
  var staveWidth = function (bs) {
      return Data_Maybe.maybe(0)(function (b) {
          return b.xOffset + b.width | 0;
      })(Data_Array.last(bs));
  };
  var staveEndsWithRepeatBegin = function (bs) {
      var isBeginVolta = function (b) {
          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(b.startLine.repeat)(new Data_Maybe.Just(Data_Abc.Begin.value)) || Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(b.startLine.repeat)(new Data_Maybe.Just(Data_Abc.BeginAndEnd.value));
      };
      return Data_Maybe.maybe(false)(isBeginVolta)(Data_Array.last(bs));
  };
  var simpleBarType = {
      thickness: Data_Abc.Thin.value,
      repeat: Data_Maybe.Nothing.value,
      iteration: Data_Maybe.Nothing.value
  };
  var redundantBar = function (barSpec) {
      return VexFlow_Abc_Utils.isEmptyMusicSpec(barSpec.musicSpec) && barSpec.barNumber !== 0;
  };
  var fillStaveLine = function (maxWidth) {
      return function (bs) {
          var v = Data_Array.last(bs);
          if (v instanceof Data_Maybe.Just) {
              var currentWidth = v.value0.xOffset + v.value0.width | 0;
              var $4 = currentWidth <= maxWidth;
              if ($4) {
                  var completionBar = {
                      barNumber: v.value0.barNumber + 1 | 0,
                      width: maxWidth - currentWidth | 0,
                      xOffset: currentWidth,
                      startLine: simpleBarType,
                      endLineThickness: VexFlow_Types.NoLine.value,
                      endLineRepeat: false,
                      volta: Data_Maybe.Nothing.value,
                      beamSpecs: [  ],
                      curves: [  ],
                      musicSpec: Data_Monoid.mempty(VexFlow_Types.musicSpecMonoid),
                      timeSignature: v.value0.timeSignature
                  };
                  return Data_Array.snoc(bs)(completionBar);
              };
              return bs;
          };
          if (v instanceof Data_Maybe.Nothing) {
              return bs;
          };
          throw new Error("Failed pattern match at VexFlow.Abc.BarEnd (line 84, column 3 - line 107, column 9): " + [ v.constructor.name ]);
      };
  };
  var barlineThickness = function (barType) {
      if (barType.thickness instanceof Data_Abc.Thin) {
          return VexFlow_Types.Single.value;
      };
      if (barType.thickness instanceof Data_Abc.Invisible) {
          return VexFlow_Types.NoLine.value;
      };
      return VexFlow_Types.Double.value;
  };
  var shiftBarEnd = function (acc) {
      return function (barSpec) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (lastBarType) {
              var newVolta = (function () {
                  var $7 = VexFlow_Abc_Volta.isEndVolta(lastBarType);
                  if ($7) {
                      return VexFlow_Abc_Volta.completeVolta(barSpec.volta);
                  };
                  return barSpec.volta;
              })();
              var lastLineThickness = barlineThickness(lastBarType);
              var isLastBarEndRepeat = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(lastBarType.repeat)(new Data_Maybe.Just(Data_Abc.End.value)) || Data_Eq.eq(Data_Maybe.eqMaybe(Data_Abc.eqRepeat))(lastBarType.repeat)(new Data_Maybe.Just(Data_Abc.BeginAndEnd.value));
              var newBarSpec = {
                  endLineRepeat: isLastBarEndRepeat,
                  endLineThickness: lastLineThickness,
                  volta: newVolta,
                  barNumber: barSpec.barNumber,
                  beamSpecs: barSpec.beamSpecs,
                  curves: barSpec.curves,
                  musicSpec: barSpec.musicSpec,
                  startLine: barSpec.startLine,
                  timeSignature: barSpec.timeSignature,
                  width: barSpec.width,
                  xOffset: barSpec.xOffset
              };
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(barSpec.startLine))(function () {
                  var $8 = redundantBar(barSpec);
                  if ($8) {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(acc);
                  };
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Array.cons(newBarSpec)(acc));
              });
          });
      };
  };
  var shiftBarEnds = Data_Foldable.foldM(Data_Foldable.foldableArray)(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(shiftBarEnd)(Data_Monoid.mempty(Data_Monoid.monoidArray));
  var repositionBarEndRepeats = function (bs) {
      return Control_Monad_State.evalState(shiftBarEnds(Data_Array.reverse(bs)))(simpleBarType);
  };
  exports["repositionBarEndRepeats"] = repositionBarEndRepeats;
  exports["fillStaveLine"] = fillStaveLine;
  exports["staveEndsWithRepeatBegin"] = staveEndsWithRepeatBegin;
  exports["staveWidth"] = staveWidth;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Abc.Alignment"] = $PS["VexFlow.Abc.Alignment"] || {};
  var exports = $PS["VexFlow.Abc.Alignment"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var VexFlow_Abc_BarEnd = $PS["VexFlow.Abc.BarEnd"];
  var VexFlow_Types = $PS["VexFlow.Types"];                
  var removeStaveExtension = function (mss) {
      if (mss instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Nothing.value;
      };
      if (mss instanceof Data_Maybe.Just) {
          var barSpecs = Data_Array.takeWhile(function (bs) {
              return Data_Eq.notEq(VexFlow_Types.eqLineThickness)(bs.endLineThickness)(VexFlow_Types.NoLine.value);
          })(mss.value0.barSpecs);
          return Data_Maybe.Just.create({
              barSpecs: barSpecs,
              isNewTimeSignature: mss.value0.isNewTimeSignature,
              keySignature: mss.value0.keySignature,
              mTempo: mss.value0.mTempo,
              staveNo: mss.value0.staveNo,
              staveWidth: mss.value0.staveWidth
          });
      };
      throw new Error("Failed pattern match at VexFlow.Abc.Alignment (line 84, column 3 - line 92, column 42): " + [ mss.constructor.name ]);
  };
  var maxStaveWidth = function (canvasWidth) {
      return function (scale) {
          return Data_Int.floor(Data_Int.toNumber(canvasWidth) / scale);
      };
  };
  var incrementFactor = function (alignmentWidth) {
      return function (staveWidth) {
          var $10 = staveWidth >= alignmentWidth;
          if ($10) {
              return Data_Maybe.Nothing.value;
          };
          return Data_Maybe.Just.create(Data_Int.toNumber(alignmentWidth - VexFlow_Types.staveIndentation | 0) / Data_Int.toNumber(staveWidth - VexFlow_Types.staveIndentation | 0));
      };
  };
  var growStaveBar = function (enlargement) {
      return function (barSpec) {
          var width = Data_Int.floor(Data_Int.toNumber(barSpec.width) * enlargement);
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (xOffset) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(xOffset + width | 0))(function () {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))({
                      xOffset: xOffset,
                      width: width,
                      barNumber: barSpec.barNumber,
                      beamSpecs: barSpec.beamSpecs,
                      curves: barSpec.curves,
                      endLineRepeat: barSpec.endLineRepeat,
                      endLineThickness: barSpec.endLineThickness,
                      musicSpec: barSpec.musicSpec,
                      startLine: barSpec.startLine,
                      timeSignature: barSpec.timeSignature,
                      volta: barSpec.volta
                  });
              });
          });
      };
  };
  var growStaveSpecDefn = function (enlargement) {
      return function (ss) {
          var foldf = function (bs) {
              return function (b) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(growStaveBar(enlargement)(b))(function (newStaveBar) {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(bs)(Data_Array.singleton(newStaveBar)));
                  });
              };
          };
          return Data_Foldable.foldM(Data_Foldable.foldableArray)(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(foldf)(Data_Monoid.mempty(Data_Monoid.monoidArray))(ss.barSpecs);
      };
  };
  var growStaveSpec = function (enlargement) {
      return function (staveSpec) {
          var barSpecs = Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_State_Trans.evalStateT(Data_Identity.functorIdentity)(growStaveSpecDefn(enlargement)(staveSpec))(VexFlow_Types.staveIndentation));
          return {
              staveNo: staveSpec.staveNo,
              staveWidth: VexFlow_Abc_BarEnd.staveWidth(barSpecs),
              keySignature: staveSpec.keySignature,
              isNewTimeSignature: staveSpec.isNewTimeSignature,
              mTempo: staveSpec.mTempo,
              barSpecs: barSpecs
          };
      };
  };
  var alignmentStaveWidth = function (maxWidth) {
      return function (mss) {
          var staveWidthf = function (acc) {
              return function (mNext) {
                  if (mNext instanceof Data_Maybe.Nothing) {
                      return acc;
                  };
                  if (mNext instanceof Data_Maybe.Just) {
                      return Data_Ord.min(Data_Ord.ordInt)(maxWidth)(Data_Ord.max(Data_Ord.ordInt)(acc)(mNext.value0.staveWidth));
                  };
                  throw new Error("Failed pattern match at VexFlow.Abc.Alignment (line 102, column 7 - line 106, column 54): " + [ mNext.constructor.name ]);
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(staveWidthf)(0)(mss);
      };
  };
  var alignStaves = function (maxCanvasWidth) {
      return function (scale) {
          return function (staves) {
              var newStaves = Data_Functor.map(Data_Functor.functorArray)(removeStaveExtension)(staves);
              var maxWidth = maxStaveWidth(maxCanvasWidth)(scale);
              var alignmentWidth = alignmentStaveWidth(maxWidth)(newStaves);
              var mapf = function (v) {
                  if (v instanceof Data_Maybe.Just) {
                      var maybeFactor = incrementFactor(alignmentWidth)(v.value0.staveWidth);
                      if (maybeFactor instanceof Data_Maybe.Just) {
                          return Data_Maybe.Just.create(growStaveSpec(maybeFactor.value0)(v.value0));
                      };
                      return new Data_Maybe.Just(v.value0);
                  };
                  return Data_Maybe.Nothing.value;
              };
              return Data_Functor.map(Data_Functor.functorArray)(mapf)(newStaves);
          };
      };
  };
  var rightJustify = function (maxCanvasWidth) {
      return function (scale) {
          return function (score) {
              return Data_Either.either(function (s) {
                  return new Data_Either.Left(s);
              })(function (staves) {
                  return Data_Either.Right.create(alignStaves(maxCanvasWidth)(scale)(staves));
              })(score);
          };
      };
  };
  exports["rightJustify"] = rightJustify;
})(PS);
(function(exports) {
  "use strict";

  var wrapper = function() {

    var VF = null;
    /*
  var renderer = null;
  var context = null;
  */  

    return {

      initialiseCanvas : function (config) {
        return function () {
          return wrapper.init(config);
        }
      },

      resizeCanvas : function (renderer) {
        return function (config) {
          return function () {
            return wrapper.reinitCanvas(renderer, config);
          }
        }
      },

      clearCanvas : function (renderer) {
        return function () {
          var context = renderer.getContext();
        context.clear();
        }
      },

      newStaveImpl : function (staveConfig) {
        return function (keySignature) {
          return function () {
            return wrapper.makeStave(staveConfig, keySignature);
          }
        }
      },

      displayBarBeginRepeat : function (stave) {
        return function () {
          stave.setBegBarType(VF.Barline.type.REPEAT_BEGIN);
        }
      },

      displayBarEndRepeat : function (stave) {
        return function () {
          stave.setEndBarType(VF.Barline.type.REPEAT_END);
        }
      },

      displayBarBothRepeat : function (stave) {
        return function () {
          stave.setBegBarType(VF.Barline.type.REPEAT_BEGIN);
          stave.setEndBarType(VF.Barline.type.REPEAT_END);
        }
      },

      displayVolta : function (stave) {
        return function (volta) {
          return function () {
            return wrapper.drawVolta(stave, volta);
          }
        }
      },

      renderStave : function (renderer) {
        return function (stave) {
          return function () {
            return wrapper.drawStave(renderer, stave);
          }
        }
      },

      getStaveWidth : function (stave) {
        return function () {
          return stave.getWidth();
        }
      },

      addTimeSignature : function (stave) {
        return function (timeSignature) {
          return function () {
            return wrapper.drawTimeSignature(stave, timeSignature);
          }
        }
      },

      addKeySignature : function (stave) {
        return function (keySignature) {
          return function () {
            return wrapper.drawKeySignature(stave, keySignature, false);
          }
        }
      },

      addTempoMarkingImpl : function (stave) {
        return function (tempo) {
          return function () {
            return wrapper.drawTempoMarking(stave, tempo);
          }
        }
      },

      renderBarContents : function (renderer) {
        return function (stave) {
          return function (beamSpecs) {
            return function (vexCurves) {
              return function (musicSpec) {
                return function () {
                  return wrapper.drawBarContents(renderer, stave, beamSpecs, vexCurves, musicSpec);
                }
              }
            }
          }
        }
      },

      init: function (config) {
        // console.log(config);

        VF = Vex.Flow;
        var renderer

        if (config.isSVG) {
          renderer = new VF.Renderer(config.parentElementId , VF.Renderer.Backends.SVG);
        } else {
          renderer = new VF.Renderer(config.parentElementId , VF.Renderer.Backends.CANVAS);
        }

        // Size our svg:
        renderer.resize(config.width, config.height);

        var context = renderer.getContext();
        context.scale(config.scale, config.scale);

        return renderer;
      },

      reinitCanvas: function (renderer, config) {
          // Size our svg:
          renderer.resize(config.width, config.height);

          var context = renderer.getContext();
          context.scale(config.scale, config.scale);
        },

      makeStave: function (staveConfig, keySignature) {

        var staveOptions = new Object();
        staveOptions.right_bar = staveConfig.hasRightBar;
        staveOptions.fill_style = staveConfig.lineColour;

        // Create a stave at the required position on the canvas.
        var stave = new VF.Stave(staveConfig.x, staveConfig.y, staveConfig.width, staveOptions);

        // create a doubled right bar line if required
        if (staveConfig.hasDoubleRightBar) {
           stave.setEndBarType(VF.Barline.type.DOUBLE);
        }

        // Add a clef and key signature if it's the first bar in the stave
        if (staveConfig.barNo == 0) {
          wrapper.drawKeySignature (stave, keySignature, true);
        }

        return stave;
      },

      drawStave: function (renderer, stave) {
        var context = renderer.getContext();
        stave.setContext(context).draw();
      },

      drawTimeSignature: function (stave, timeSignature) {
        var meter = timeSignature.numerator + "/" + timeSignature.denominator;
        stave.setTimeSignature(meter);
      },

      drawVolta: function (stave, volta) {
        // console.log("volta:")
        // console.log(volta);
        var voltaType;
        switch(volta.voltaType) {
          case 2:
            voltaType = VF.Volta.type.BEGIN;
            break;
          case 3:
            voltaType = VF.Volta.type.MID;
            break;
          case 4:
            voltaType = VF.Volta.type.END;
            break;
          case 5:
            voltaType = VF.Volta.type.BEGIN_END;
            break;
          default:
            voltaType = VF.Volta.type.NONE;
        }
        stave.setVoltaType(voltaType, volta.iteration, 30);
      },

      drawKeySignature: function (stave, keySignature, withClef) {
        if (withClef) {
          stave.addClef("treble");
        }
        stave.setKeySignature(keySignature);
      },

      drawTempoMarking: function (stave, tempo) {
        stave.setTempo(tempo, 0);
      },

      /* draw the contents of the bar, using auto-beaming for the notes */
      drawBarContents: function (renderer, stave, beamSpecs, vexCurves, musicSpec) {
        // console.log("drawBarContents")
        // console.log(musicSpec);
        var context = renderer.getContext();
        var notes = musicSpec.noteSpecs.map(wrapper.makeStaveNote);
        var tuplets = musicSpec.tuplets.map(wrapper.makeTupletLayout (notes));
        var ties = musicSpec.ties.map(wrapper.makeTie (notes));
        // console.log("beamSpecs");
        // console.log(beamSpecs);
        var beams = beamSpecs.map(wrapper.makeBeam (notes));
        var curves = vexCurves.map(wrapper.makeCurve (notes));

        /* add repeititions to the stave (coda, segno etc.) */
        wrapper.addRepetitions (stave, musicSpec.repetitions);

        Vex.Flow.Formatter.FormatAndDraw(context, stave, notes);
        ties.forEach(function(t) {t.setContext(context).draw()})
        beams.forEach(function(b) {b.setContext(context).draw()});
        tuplets.forEach(function(tuplet){
          tuplet.setContext(context).draw();
        });
        curves.forEach(function(c) {c.setContext(context).draw()});
      },


      // make a stave note (n.b. this can represent a single note or a chord)
      makeStaveNote: function (noteSpec) {
        var sn = new VF.StaveNote(noteSpec.vexNote);
        wrapper.addAccidentals (sn, noteSpec.accidentals);
        wrapper.addDots (sn, noteSpec.dots);
        wrapper.addOrnaments (sn, noteSpec.ornaments);
        wrapper.addArticulations (sn, noteSpec.articulations);

        if (noteSpec.graceKeys.length > 0) {
          var graceNotes = noteSpec.graceKeys.map(wrapper.makeGraceNote);
          wrapper.addGraceAccidentals (graceNotes, noteSpec.graceAccidentals);
          var graceNoteGroup =  new VF.GraceNoteGroup(graceNotes, true);
          sn.addModifier(0, graceNoteGroup.beamNotes());
        }
        return sn;
      },

      makeGraceNote: function (graceKey) {
        var note = { keys: [graceKey], duration: '8' };
        return new Vex.Flow.GraceNote( note);
      },

      // make a tuplet layout
      makeTupletLayout: function (notes) {
        return function (vexTuplet) {
          return new Vex.Flow.Tuplet(notes.slice(vexTuplet.startPos, vexTuplet.endPos), {
             num_notes: vexTuplet.p, notes_occupied: vexTuplet.q
           });
        };
      },

      // make a beam between the specified notes
      makeBeam: function (notes) {
        return function (beamSpec) {
          return new Vex.Flow.Beam(notes.slice(beamSpec[0], beamSpec[1]), true);
        };
      },


      // tie a note to its successor
      makeTie: function (notes) {
        return function (noteIndex) {
          return new VF.StaveTie({
            first_note: notes[noteIndex],
            last_note: notes[noteIndex + 1],
            first_indices: [0],
            last_indices: [0]
          });
        };
      },

      // make a slur represented by a curve
      makeCurve: function (notes) {
        return function (vexCurve) {
          // the slope of the curve is just a simple heuristic
          var controlPoints = [{ x: 0, y: 5 }, { x: 0, y: 5 }]
          if (vexCurve.to - vexCurve.from > 1 ) {
            controlPoints = [{ x: 0, y: 10 }, { x: 0, y: 10 }]
          }
          return new VF.Curve(
            notes[vexCurve.from],
            notes[vexCurve.to],
            { thickness: 2,
              cps: controlPoints
          });
        };
      },

      // add the accidental(s) to the staveNote
      addAccidentals: function (staveNote, accidentals) {
        accidentals.forEach (function (accidentalString, index) {
          if (accidentalString) {
            staveNote.addAccidental(index, new VF.Accidental(accidentalString));
          }
        });
      },

      // add any accidentals to the grace notes
      addGraceAccidentals: function (graceNotes, accidentals) {
        accidentals.forEach (function (accidentalString, index) {
          if (accidentalString) {
            graceNotes[index].addAccidental(index, new VF.Accidental(accidentalString));
          }
        });
      },

      // add the dottedness to the staveNote
      addDots: function (staveNote, dots) {
        dots.forEach (function (dotCount, index) {
          if (dotCount == 2) {
            staveNote.addDot(index).addDot(index);
          }
          else if (dotCount == 1) {
            staveNote.addDot(index);
          }
        });
      },

      // add the ornamant(s) to the staveNote
      addOrnaments: function (staveNote, ornaments) {
        ornaments.forEach (function (ornament, index) {
          staveNote.addModifier(0, new VF.Ornament(ornament));
        });
      },

      // add the articulation(s) to the staveNote
      addArticulations: function (staveNote, articulations) {
        articulations.forEach (function (articulation, index) {
          staveNote.addArticulation(0, new VF.Articulation(articulation));
        });
      },

      // add the repetitions to the stave
      addRepetitions: function (stave, repetitions) {
        repetitions.forEach (function (repetition, index) {
          if (repetition.isLeft) {
            // console.log ("repetition left:", repetition.repetitionType);
            stave.setRepetitionTypeLeft(repetition.repetitionType, 25);
          }
          else {
            // console.log ("repetition right:", repetition.repetitionType);
            stave.setRepetitionTypeRight(repetition.repetitionType, 25);
          }
        });
      }

    }

  }();

  exports.initialiseCanvas = wrapper.initialiseCanvas;
  exports.clearCanvas = wrapper.clearCanvas;
  exports.newStaveImpl = wrapper.newStaveImpl;
  exports.renderStave = wrapper.renderStave;    
  exports.displayBarBeginRepeat = wrapper.displayBarBeginRepeat;
  exports.displayBarEndRepeat = wrapper.displayBarEndRepeat;  
  exports.renderBarContents = wrapper.renderBarContents;
  exports.displayVolta = wrapper.displayVolta;
  exports.addTimeSignature = wrapper.addTimeSignature;
  exports.addKeySignature = wrapper.addKeySignature;
  exports.addTempoMarkingImpl = wrapper.addTempoMarkingImpl;
})(PS["VexFlow.Score"] = PS["VexFlow.Score"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Abc.Repetition"] = $PS["VexFlow.Abc.Repetition"] || {};
  var exports = $PS["VexFlow.Abc.Repetition"];
  var buildRepetition = function (noteIndex) {
      return function (decoration) {
          var isLeft = noteIndex === 0;
          if (decoration === "segno") {
              if (isLeft) {
                  return {
                      repetitionType: 4,
                      isLeft: isLeft
                  };
              };
              if (!isLeft) {
                  return {
                      repetitionType: 5,
                      isLeft: isLeft
                  };
              };
              throw new Error("Failed pattern match at VexFlow.Abc.Repetition (line 101, column 10 - line 103, column 50): " + [ isLeft.constructor.name ]);
          };
          if (decoration === "coda") {
              if (isLeft) {
                  return {
                      repetitionType: 2,
                      isLeft: isLeft
                  };
              };
              if (!isLeft) {
                  return {
                      repetitionType: 3,
                      isLeft: isLeft
                  };
              };
              throw new Error("Failed pattern match at VexFlow.Abc.Repetition (line 105, column 10 - line 107, column 50): " + [ isLeft.constructor.name ]);
          };
          if (decoration === "D.S.") {
              return {
                  repetitionType: 9,
                  isLeft: isLeft
              };
          };
          if (decoration === "D.C.") {
              return {
                  repetitionType: 6,
                  isLeft: isLeft
              };
          };
          if (decoration === "dacoda") {
              return {
                  repetitionType: 7,
                  isLeft: isLeft
              };
          };
          if (decoration === "dacopo") {
              return {
                  repetitionType: 8,
                  isLeft: isLeft
              };
          };
          if (decoration === "fine") {
              return {
                  repetitionType: 12,
                  isLeft: isLeft
              };
          };
          return {
              repetitionType: 1,
              isLeft: isLeft
          };
      };
  };
  exports["buildRepetition"] = buildRepetition;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Abc.Slur"] = $PS["VexFlow.Abc.Slur"] || {};
  var exports = $PS["VexFlow.Abc.Slur"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var LeftBracket = (function () {
      function LeftBracket(value0) {
          this.value0 = value0;
      };
      LeftBracket.create = function (value0) {
          return new LeftBracket(value0);
      };
      return LeftBracket;
  })();
  var RightBracket = (function () {
      function RightBracket(value0) {
          this.value0 = value0;
      };
      RightBracket.create = function (value0) {
          return new RightBracket(value0);
      };
      return RightBracket;
  })();
  var SlurStack = (function () {
      function SlurStack(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SlurStack.create = function (value0) {
          return function (value1) {
              return new SlurStack(value0, value1);
          };
      };
      return SlurStack;
  })();
  var pop = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil) {
          return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, new SlurStack(Data_List_Types.Nil.value, v.value1));
      };
      if (v.value0 instanceof Data_List_Types.Cons) {
          return new Data_Tuple.Tuple(new Data_Maybe.Just(v.value0.value0), new SlurStack(v.value0.value1, v.value1));
      };
      throw new Error("Failed pattern match at VexFlow.Abc.Slur (line 73, column 1 - line 73, column 56): " + [ v.constructor.name ]);
  };
  var push = function (slurStack) {
      return function ($$new) {
          if ($$new instanceof RightBracket) {
              var v = pop(slurStack);
              if (v.value0 instanceof Data_Maybe.Just && v.value0.value0 instanceof LeftBracket) {
                  return new SlurStack(v.value1.value0, Data_Array.cons({
                      from: v.value0.value0.value0,
                      to: $$new.value0
                  })(v.value1.value1));
              };
              if (v.value0 instanceof Data_Maybe.Just) {
                  return new SlurStack(new Data_List_Types.Cons($$new, new Data_List_Types.Cons(v.value0.value0, v.value1.value0)), v.value1.value1);
              };
              if (v.value0 instanceof Data_Maybe.Nothing) {
                  return new SlurStack(new Data_List_Types.Cons($$new, v.value1.value0), v.value1.value1);
              };
              throw new Error("Failed pattern match at VexFlow.Abc.Slur (line 59, column 9 - line 65, column 43): " + [ v.value0.constructor.name ]);
          };
          return new SlurStack(new Data_List_Types.Cons($$new, slurStack.value0), slurStack.value1);
      };
  }; 
  var empty = new SlurStack(Data_List_Types.Nil.value, [  ]);
  var vexCurves = function (brackets) {
      var v = Data_Foldable.foldl(Data_Foldable.foldableArray)(push)(empty)(brackets);
      return Data_Array.reverse(v.value1);
  };
  exports["LeftBracket"] = LeftBracket;
  exports["RightBracket"] = RightBracket;
  exports["vexCurves"] = vexCurves;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Abc.Translate"] = $PS["VexFlow.Abc.Translate"] || {};
  var exports = $PS["VexFlow.Abc.Translate"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Abc_Canonical = $PS["Data.Abc.Canonical"];
  var Data_Abc_KeySignature = $PS["Data.Abc.KeySignature"];
  var Data_Abc_Metadata = $PS["Data.Abc.Metadata"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var VexFlow_Abc_Beat = $PS["VexFlow.Abc.Beat"];
  var VexFlow_Abc_ContextChange = $PS["VexFlow.Abc.ContextChange"];
  var VexFlow_Abc_Repetition = $PS["VexFlow.Abc.Repetition"];
  var VexFlow_Abc_Slur = $PS["VexFlow.Abc.Slur"];
  var VexFlow_Abc_TickableContext = $PS["VexFlow.Abc.TickableContext"];
  var VexFlow_Abc_Utils = $PS["VexFlow.Abc.Utils"];
  var VexFlow_Types = $PS["VexFlow.Types"];                
  var ornaments = function (decorations) {
      var f = function (acc) {
          return function (decoration) {
              if (decoration === "T") {
                  return Data_Array.cons("tr")(acc);
              };
              if (decoration === "trill") {
                  return Data_Array.cons("tr")(acc);
              };
              if (decoration === "turn") {
                  return Data_Array.cons("turn")(acc);
              };
              if (decoration === "P") {
                  return Data_Array.cons("upmordent")(acc);
              };
              if (decoration === "uppermordent") {
                  return Data_Array.cons("upmordent")(acc);
              };
              if (decoration === "M") {
                  return Data_Array.cons("mordent")(acc);
              };
              if (decoration === "lowermordent") {
                  return Data_Array.cons("mordent")(acc);
              };
              return acc;
          };
      };
      return Data_Foldable.foldl(Data_List_Types.foldableList)(f)([  ])(decorations);
  };
  var keySignature = function (ks) {
      var newks = (function () {
          if (ks.mode instanceof Data_Abc.Major) {
              return ks;
          };
          if (ks.mode instanceof Data_Abc.Minor) {
              return ks;
          };
          return Data_Abc_KeySignature.normaliseModalKey(ks);
      })();
      var modeStr = (function () {
          if (newks.mode instanceof Data_Abc.Minor) {
              return "m";
          };
          return "";
      })();
      return Data_Show.show(Data_Abc.showPitchClass)(newks.pitchClass) + (Data_Abc_Canonical.keySignatureAccidental(newks.accidental) + modeStr);
  };
  var headerChange = function (ctx) {
      return function (h) {
          if (h instanceof Data_Abc.Key) {
              return [ new VexFlow_Abc_ContextChange.KeyChange(h.value0) ];
          };
          if (h instanceof Data_Abc.UnitNoteLength) {
              return [ new VexFlow_Abc_ContextChange.UnitNoteChange(h.value0) ];
          };
          if (h instanceof Data_Abc.Meter) {
              if (h.value0 instanceof Data_Maybe.Just) {
                  return [ new VexFlow_Abc_ContextChange.MeterChange(h.value0.value0) ];
              };
              return [  ];
          };
          return [  ];
      };
  };
  var buildSlurBrackets = function (noteIndex) {
      return function (startCount) {
          return function (endCount) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Unfoldable.replicate(Data_Unfoldable.unfoldableArray)(startCount)(new VexFlow_Abc_Slur.LeftBracket(noteIndex)))(Data_Unfoldable.replicate(Data_Unfoldable.unfoldableArray)(endCount)(new VexFlow_Abc_Slur.RightBracket(noteIndex)));
          };
      };
  };
  var buildTupletSlurs = function (noteIndex) {
      return function (tupletNotes) {
          var f = function (pos) {
              return function (rOrN) {
                  if (rOrN instanceof Data_Either.Left) {
                      return [  ];
                  };
                  if (rOrN instanceof Data_Either.Right) {
                      return buildSlurBrackets(noteIndex + pos | 0)(rOrN.value0.leftSlurs)(rOrN.value0.rightSlurs);
                  };
                  throw new Error("Failed pattern match at VexFlow.Abc.Translate (line 471, column 7 - line 474, column 79): " + [ rOrN.constructor.name ]);
              };
          };
          return Data_Array.concat(Data_Array.mapWithIndex(f)(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(tupletNotes)));
      };
  };
  var buildMusicSpecFromNs = function (tCtx) {
      return function (noteIndex) {
          return function (mBeatMarker) {
              return function (gn1) {
                  return function (gn2) {
                      return function (ens) {
                          var slurBrackets = Data_Semigroup.append(Data_Semigroup.semigroupArray)(buildSlurBrackets(noteIndex)(gn1.leftSlurs)(gn1.rightSlurs))(buildSlurBrackets(noteIndex + 1 | 0)(gn2.leftSlurs)(gn2.rightSlurs));
                          return Data_Functor.map(Data_Either.functorEither)(function (ns) {
                              return {
                                  noteSpecs: ns,
                                  tuplets: [  ],
                                  ties: [  ],
                                  tickableContext: tCtx,
                                  contextChanges: [  ],
                                  slurBrackets: slurBrackets,
                                  beatMarkers: Data_Unfoldable.fromMaybe(Data_Unfoldable.unfoldableArray)(mBeatMarker),
                                  repetitions: [  ],
                                  typesettingSpaces: [  ]
                              };
                          })(ens);
                      };
                  };
              };
          };
      };
  };
  var buildMusicSpecFromN = function (tCtx) {
      return function (noteIndex) {
          return function (mBeatMarker) {
              return function (isTied) {
                  return function (slurStartCount) {
                      return function (slurEndCount) {
                          return function (ens) {
                              return Data_Functor.map(Data_Either.functorEither)(function (ns) {
                                  return {
                                      noteSpecs: [ ns ],
                                      tuplets: [  ],
                                      ties: (function () {
                                          if (isTied) {
                                              return [ noteIndex ];
                                          };
                                          return [  ];
                                      })(),
                                      tickableContext: tCtx,
                                      contextChanges: [  ],
                                      slurBrackets: buildSlurBrackets(noteIndex)(slurStartCount)(slurEndCount),
                                      beatMarkers: Data_Unfoldable.fromMaybe(Data_Unfoldable.unfoldableArray)(mBeatMarker),
                                      repetitions: [  ],
                                      typesettingSpaces: [  ]
                                  };
                              })(ens);
                          };
                      };
                  };
              };
          };
      };
  };
  var buildMusicSpecFromDecorations = function (decorations) {
      return function (noteIndex) {
          var v = Data_Monoid.mempty(VexFlow_Types.musicSpecMonoid);
          var repetitions = Data_Functor.map(Data_Functor.functorArray)(VexFlow_Abc_Repetition.buildRepetition(noteIndex))(Data_Array.fromFoldable(Data_List_Types.foldableList)(decorations));
          return {
              noteSpecs: v.noteSpecs,
              tuplets: v.tuplets,
              ties: v.ties,
              tickableContext: v.tickableContext,
              contextChanges: v.contextChanges,
              slurBrackets: v.slurBrackets,
              beatMarkers: v.beatMarkers,
              repetitions: repetitions,
              typesettingSpaces: [ noteIndex ]
          };
      };
  };
  var buildMusicSpecFromContextChange = function (contextChanges) {
      var v = Data_Monoid.mempty(VexFlow_Types.musicSpecMonoid);
      return {
          noteSpecs: v.noteSpecs,
          tuplets: v.tuplets,
          ties: v.ties,
          tickableContext: v.tickableContext,
          contextChanges: contextChanges,
          slurBrackets: v.slurBrackets,
          beatMarkers: v.beatMarkers,
          repetitions: v.repetitions,
          typesettingSpaces: v.typesettingSpaces
      };
  };
  var articulations = function (artics) {
      var f = function (acc) {
          return function (decoration) {
              if (decoration === ".") {
                  return Data_Array.cons("a.")(acc);
              };
              if (decoration === "upbow") {
                  return Data_Array.cons("a|")(acc);
              };
              if (decoration === "u") {
                  return Data_Array.cons("a|")(acc);
              };
              if (decoration === "downbow") {
                  return Data_Array.cons("am")(acc);
              };
              if (decoration === "v") {
                  return Data_Array.cons("am")(acc);
              };
              if (decoration === "L") {
                  return Data_Array.cons("a>")(acc);
              };
              if (decoration === "accent") {
                  return Data_Array.cons("a>")(acc);
              };
              if (decoration === "emphasis") {
                  return Data_Array.cons("a>")(acc);
              };
              if (decoration === "H") {
                  return Data_Array.cons("a@a")(acc);
              };
              if (decoration === "fermata") {
                  return Data_Array.cons("a@a")(acc);
              };
              if (decoration === "tenuto") {
                  return Data_Array.cons("a-")(acc);
              };
              return acc;
          };
      };
      return Data_Foldable.foldl(Data_List_Types.foldableList)(f)([  ])(artics);
  };
  var accidental = function (v) {
      if (v instanceof Data_Abc.Sharp) {
          return "#";
      };
      if (v instanceof Data_Abc.Flat) {
          return "b";
      };
      if (v instanceof Data_Abc.DoubleSharp) {
          return "##";
      };
      if (v instanceof Data_Abc.DoubleFlat) {
          return "bb";
      };
      if (v instanceof Data_Abc.Natural) {
          return "n";
      };
      if (v instanceof Data_Abc.Implicit) {
          return "";
      };
      throw new Error("Failed pattern match at VexFlow.Abc.Translate (line 45, column 1 - line 45, column 35): " + [ v.constructor.name ]);
  };
  var noteAccidental = function (abcNote) {
      return accidental(abcNote.accidental);
  };
  var pitch = function (pc) {
      return function (acc) {
          return function (oct) {
              return Data_String_Common.toLower(Data_Show.show(Data_Abc.showPitchClass)(pc)) + (accidental(acc) + ("/" + Data_Show.show(Data_Show.showInt)(oct)));
          };
      };
  };
  var notePitch = function (abcNote) {
      return pitch(abcNote.pitchClass)(abcNote.accidental)(abcNote.octave - 1 | 0);
  };
  var chord = function (context) {
      return function (abcChord0) {
          var abcChord = Data_Abc_Metadata.normaliseChord(abcChord0);
          var accidentals = Data_Functor.map(Data_Functor.functorArray)(noteAccidental)(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(abcChord.notes));
          var chordLen = (Data_List_NonEmpty.head(abcChord.notes)).duration;
          var eVexDur = VexFlow_Abc_Utils.vexDuration(context.unitNoteLength)(chordLen);
          var dotCounts = Data_Functor.map(Data_Functor.functorArray)(VexFlow_Abc_Utils.noteDotCount(context))(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(abcChord.notes));
          var keys = Data_Functor.map(Data_Functor.functorArray)(notePitch)(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(abcChord.notes));
          if (eVexDur instanceof Data_Either.Right) {
              var vexNote = {
                  clef: "treble",
                  keys: keys,
                  duration: VexFlow_Abc_Utils.compoundVexDuration(eVexDur.value0),
                  auto_stem: true
              };
              return new Data_Either.Right({
                  vexNote: vexNote,
                  accidentals: accidentals,
                  dots: dotCounts,
                  graceKeys: [  ],
                  graceAccidentals: [  ],
                  ornaments: [  ],
                  articulations: [  ],
                  noteTicks: VexFlow_Abc_Utils.noteTicks(context.unitNoteLength)(chordLen)
              });
          };
          if (eVexDur instanceof Data_Either.Left) {
              return new Data_Either.Left(eVexDur.value0);
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Translate (line 236, column 5 - line 255, column 23): " + [ eVexDur.constructor.name ]);
      };
  };
  var graceableNote = function (context) {
      return function (noteIndex) {
          return function (gn) {
              var key = notePitch(gn.abcNote);
              var graceNotes = Data_Maybe.maybe([  ])(function (grace) {
                  return Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(grace.notes);
              })(gn.maybeGrace);
              var graceKeys = Data_Functor.map(Data_Functor.functorArray)(notePitch)(graceNotes);
              var graceAccidentals = Data_Functor.map(Data_Functor.functorArray)(noteAccidental)(graceNotes);
              var eVexDur = VexFlow_Abc_Utils.vexDuration(context.unitNoteLength)(gn.abcNote.duration);
              if (eVexDur instanceof Data_Either.Right) {
                  var vexNote = {
                      clef: "treble",
                      keys: [ key ],
                      duration: VexFlow_Abc_Utils.compoundVexDuration(eVexDur.value0),
                      auto_stem: true
                  };
                  return new Data_Either.Right({
                      vexNote: vexNote,
                      accidentals: [ accidental(gn.abcNote.accidental) ],
                      dots: [ eVexDur.value0.dots ],
                      graceKeys: graceKeys,
                      graceAccidentals: graceAccidentals,
                      ornaments: ornaments(gn.decorations),
                      articulations: articulations(gn.decorations),
                      noteTicks: VexFlow_Abc_Utils.noteTicks(context.unitNoteLength)(gn.abcNote.duration)
                  });
              };
              if (eVexDur instanceof Data_Either.Left) {
                  return new Data_Either.Left(eVexDur.value0);
              };
              throw new Error("Failed pattern match at VexFlow.Abc.Translate (line 155, column 5 - line 174, column 23): " + [ eVexDur.constructor.name ]);
          };
      };
  };
  var brokenRhythm = function (context) {
      return function (gn1) {
          return function (broken) {
              return function (gn2) {
                  var v = VexFlow_Abc_Utils.normaliseBroken(broken)(gn1)(gn2);
                  var enote2 = graceableNote(context)(1)(v.value1);
                  var enote1 = graceableNote(context)(0)(v.value0);
                  var v1 = new Data_Tuple.Tuple(enote1, enote2);
                  if (v1.value0 instanceof Data_Either.Right && v1.value1 instanceof Data_Either.Right) {
                      return new Data_Either.Right([ v1.value0.value0, v1.value1.value0 ]);
                  };
                  if (v1.value0 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v1.value0.value0);
                  };
                  if (v1.value1 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v1.value1.value0);
                  };
                  throw new Error("Failed pattern match at VexFlow.Abc.Translate (line 267, column 5 - line 273, column 16): " + [ v1.constructor.name ]);
              };
          };
      };
  };
  var rest = function (context) {
      return function (abcRest) {
          var key = pitch(Data_Abc.B.value)(Data_Abc.Implicit.value)(4);
          var eVexDur = VexFlow_Abc_Utils.vexDuration(context.unitNoteLength)(abcRest.duration);
          if (eVexDur instanceof Data_Either.Right) {
              var vexNote = {
                  clef: "treble",
                  keys: [ key ],
                  duration: VexFlow_Abc_Utils.compoundVexDuration(eVexDur.value0) + "r",
                  auto_stem: true
              };
              return new Data_Either.Right({
                  vexNote: vexNote,
                  accidentals: [  ],
                  dots: [ eVexDur.value0.dots ],
                  graceKeys: [  ],
                  graceAccidentals: [  ],
                  ornaments: [  ],
                  articulations: [  ],
                  noteTicks: VexFlow_Abc_Utils.noteTicks(context.unitNoteLength)(abcRest.duration)
              });
          };
          if (eVexDur instanceof Data_Either.Left) {
              return new Data_Either.Left(eVexDur.value0);
          };
          throw new Error("Failed pattern match at VexFlow.Abc.Translate (line 187, column 5 - line 206, column 23): " + [ eVexDur.constructor.name ]);
      };
  };
  var restOrNote = function (context) {
      return function (noteIndex) {
          return function (rOrn) {
              if (rOrn instanceof Data_Either.Left) {
                  return rest(context)(rOrn.value0);
              };
              if (rOrn instanceof Data_Either.Right) {
                  return graceableNote(context)(noteIndex)(rOrn.value0);
              };
              throw new Error("Failed pattern match at VexFlow.Abc.Translate (line 305, column 3 - line 309, column 41): " + [ rOrn.constructor.name ]);
          };
      };
  };
  var tuplet = function (context) {
      return function (startOffset) {
          return function (signature) {
              return function (rns) {
                  var vexTuplet = {
                      p: signature.p,
                      q: signature.q,
                      startPos: startOffset,
                      endPos: startOffset + Data_Array.length(rns) | 0
                  };
                  var isTied = (function () {
                      var v = Data_Array.last(rns);
                      if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Right) {
                          return v.value0.value0.abcNote.tied;
                      };
                      return false;
                  })();
                  var enoteSpecs = Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Array.mapWithIndex(restOrNote(context))(rns));
                  if (enoteSpecs instanceof Data_Either.Right) {
                      return new Data_Either.Right({
                          vexTuplet: vexTuplet,
                          noteSpecs: enoteSpecs.value0,
                          tied: isTied
                      });
                  };
                  if (enoteSpecs instanceof Data_Either.Left) {
                      return new Data_Either.Left(enoteSpecs.value0);
                  };
                  throw new Error("Failed pattern match at VexFlow.Abc.Translate (line 293, column 5 - line 301, column 15): " + [ enoteSpecs.constructor.name ]);
              };
          };
      };
  };
  var music = function (context) {
      return function (tickablePosition) {
          return function (noteIndex) {
              return function (phraseDuration) {
                  return function (m) {
                      var tickableContext = VexFlow_Abc_TickableContext.getTickableContext(m);
                      var barFraction = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(phraseDuration)(context.unitNoteLength);
                      var mBeatMarker = VexFlow_Abc_Beat.exactBeatNumber(barFraction)(context.beatDuration)(noteIndex);
                      if (m instanceof Data_Abc.Note) {
                          return buildMusicSpecFromN(tickableContext)(noteIndex)(mBeatMarker)(m.value0.abcNote.tied)(m.value0.leftSlurs)(m.value0.rightSlurs)(graceableNote(context)(0)(m.value0));
                      };
                      if (m instanceof Data_Abc.Rest) {
                          return buildMusicSpecFromN(tickableContext)(noteIndex)(mBeatMarker)(false)(0)(0)(rest(context)(m.value0));
                      };
                      if (m instanceof Data_Abc.Chord) {
                          return buildMusicSpecFromN(tickableContext)(noteIndex)(mBeatMarker)(false)(0)(0)(chord(context)(m.value0));
                      };
                      if (m instanceof Data_Abc.BrokenRhythmPair) {
                          return buildMusicSpecFromNs(tickableContext)(noteIndex)(mBeatMarker)(m.value0)(m.value2)(brokenRhythm(context)(m.value0)(m.value1)(m.value2));
                      };
                      if (m instanceof Data_Abc.Tuplet) {
                          var eRes = tuplet(context)(tickablePosition)(m.value1)(Data_List_NonEmpty.toUnfoldable(Data_Unfoldable.unfoldableArray)(m.value2));
                          return Data_Functor.map(Data_Either.functorEither)(function (tupletSpec) {
                              return {
                                  noteSpecs: tupletSpec.noteSpecs,
                                  tuplets: [ tupletSpec.vexTuplet ],
                                  ties: (function () {
                                      if (tupletSpec.tied) {
                                          return [ (noteIndex + Data_Array.length(tupletSpec.noteSpecs) | 0) - 1 | 0 ];
                                      };
                                      return [  ];
                                  })(),
                                  tickableContext: tickableContext,
                                  contextChanges: Data_Monoid.mempty(Data_Monoid.monoidArray),
                                  slurBrackets: buildTupletSlurs(noteIndex)(m.value2),
                                  beatMarkers: Data_Unfoldable.fromMaybe(Data_Unfoldable.unfoldableArray)(mBeatMarker),
                                  repetitions: Data_Monoid.mempty(Data_Monoid.monoidArray),
                                  typesettingSpaces: Data_Monoid.mempty(Data_Monoid.monoidArray)
                              };
                          })(eRes);
                      };
                      if (m instanceof Data_Abc.Inline) {
                          return Data_Either.Right.create(buildMusicSpecFromContextChange(headerChange(context)(m.value0)));
                      };
                      if (m instanceof Data_Abc.DecoratedSpace) {
                          return Data_Either.Right.create(buildMusicSpecFromDecorations(m.value0)(noteIndex));
                      };
                      return Data_Either.Right.create(Data_Monoid.mempty(VexFlow_Types.musicSpecMonoid));
                  };
              };
          };
      };
  };
  exports["keySignature"] = keySignature;
  exports["headerChange"] = headerChange;
  exports["music"] = music;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Abc.Beam"] = $PS["VexFlow.Abc.Beam"] || {};
  var exports = $PS["VexFlow.Abc.Beam"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Beamable = (function () {
      function Beamable() {

      };
      Beamable.value = new Beamable();
      return Beamable;
  })();
  var Unbeamable = (function () {
      function Unbeamable() {

      };
      Unbeamable.value = new Unbeamable();
      return Unbeamable;
  })();
  var StartOnly = (function () {
      function StartOnly() {

      };
      StartOnly.value = new StartOnly();
      return StartOnly;
  })();
  var quarterNoteTicks = 32;
  var lookupRanges = function (idx) {
      return function (bm) {
          return Data_Maybe.fromMaybe([  ])(Data_Map_Internal.lookup(Data_Ord.ordInt)(idx)(bm));
      };
  };
  var eqBeamability = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Beamable && y instanceof Beamable) {
              return true;
          };
          if (x instanceof Unbeamable && y instanceof Unbeamable) {
              return true;
          };
          if (x instanceof StartOnly && y instanceof StartOnly) {
              return true;
          };
          return false;
      };
  });
  var groupBeamableNotes = function (bns) {
      var f = function (a) {
          return function (b) {
              return Data_Eq.notEq(eqBeamability)(a.beamability)(Unbeamable.value) && Data_Eq.eq(eqBeamability)(b.beamability)(Beamable.value);
          };
      };
      return Data_Array.filter(function (g) {
          return Data_Array_NonEmpty.length(g) > 1;
      })(Data_Array.groupBy(f)(bns));
  };
  var getBeamRanges = function (bns) {
      var createBeamRange = function (bg) {
          var start = Data_Array_NonEmpty.head(bg);
          var end = Data_Array_NonEmpty.last(bg);
          return {
              start: start.noteIndex,
              end: end.noteIndex + 1 | 0
          };
      };
      return Data_Functor.map(Data_Functor.functorArray)(createBeamRange)(groupBeamableNotes(bns));
  };
  var commonTime = {
      numerator: 4,
      denominator: 4
  };
  var coalesce = function (v) {
      return function (v1) {
          return function (v2) {
              if (v.length === 1 && v1.length === 1) {
                  var $12 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(v1[0].start)(v2);
                  if ($12) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ v[0] ])([ v1[0] ]);
                  };
                  return [ {
                      start: v[0].start,
                      end: v1[0].end
                  } ];
              };
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)(v1);
          };
      };
  };
  var optimiseCommonTimeBeaming = function (bm) {
      return function (typesettingSpaces) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(coalesce(lookupRanges(1)(bm))(lookupRanges(2)(bm))(typesettingSpaces))(coalesce(lookupRanges(3)(bm))(lookupRanges(4)(bm))(typesettingSpaces));
      };
  };
  var beamableNote = function (typesettingSpaces) {
      return function (offset) {
          return function (idx) {
              return function (noteSpec) {
                  var noteIndex = offset + idx | 0;
                  var beamability = (function () {
                      var $15 = noteSpec.noteTicks >= quarterNoteTicks || Data_String_Utils.endsWith("r")(noteSpec.vexNote.duration);
                      if ($15) {
                          return Unbeamable.value;
                      };
                      var $16 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(noteIndex)(typesettingSpaces);
                      if ($16) {
                          return StartOnly.value;
                      };
                      return Beamable.value;
                  })();
                  return {
                      noteIndex: noteIndex,
                      beamability: beamability
                  };
              };
          };
      };
  };
  var beamFunc = function (noteSpecs) {
      return function (typesettingSpaces) {
          return function (acc) {
              return function (beatMarker) {
                  var notesInBeat = Data_Array.slice(acc.beatMarker.noteIndex)(beatMarker.noteIndex)(noteSpecs);
                  var beamables = Data_Array.mapWithIndex(beamableNote(typesettingSpaces)(acc.beatMarker.noteIndex))(notesInBeat);
                  var beamRanges = getBeamRanges(beamables);
                  return {
                      beatMarker: beatMarker,
                      beams: Data_Map_Internal.insert(Data_Ord.ordInt)(beatMarker.beatNumber)(beamRanges)(acc.beams)
                  };
              };
          };
      };
  };
  var calculateStandardBeams = function (timeSignature) {
      return function (noteSpecs) {
          return function (beatMarkers) {
              return function (typesettingSpaces) {
                  var initialBM = {
                      beatNumber: 0,
                      noteIndex: 0
                  };
                  var result = Data_Foldable.foldl(Data_Foldable.foldableArray)(beamFunc(noteSpecs)(typesettingSpaces))({
                      beatMarker: initialBM,
                      beams: Data_Map_Internal.empty
                  })(beatMarkers);
                  var $17 = Data_Eq.eq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                      return "numerator";
                  }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                      return "denominator";
                  }))(Data_Eq.eqInt)))(commonTime)(timeSignature);
                  if ($17) {
                      return optimiseCommonTimeBeaming(result.beams)(typesettingSpaces);
                  };
                  return Data_Array.concat(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(result.beams)));
              };
          };
      };
  };
  var calculateBeams = function (timeSignature) {
      return function (noteSpecs) {
          return function (beatMarkers) {
              return function (typesettingSpaces) {
                  return Data_Functor.map(Data_Functor.functorArray)(function (r) {
                      return [ r.start, r.end ];
                  })(calculateStandardBeams(timeSignature)(noteSpecs)(beatMarkers)(typesettingSpaces));
              };
          };
      };
  };
  exports["calculateBeams"] = calculateBeams;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Abc.TranslateStateful"] = $PS["VexFlow.Abc.TranslateStateful"] || {};
  var exports = $PS["VexFlow.Abc.TranslateStateful"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Abc_Metadata = $PS["Data.Abc.Metadata"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var VexFlow_Abc_BarEnd = $PS["VexFlow.Abc.BarEnd"];
  var VexFlow_Abc_Beam = $PS["VexFlow.Abc.Beam"];
  var VexFlow_Abc_Beat = $PS["VexFlow.Abc.Beat"];
  var VexFlow_Abc_Slur = $PS["VexFlow.Abc.Slur"];
  var VexFlow_Abc_TickableContext = $PS["VexFlow.Abc.TickableContext"];
  var VexFlow_Abc_Translate = $PS["VexFlow.Abc.Translate"];
  var VexFlow_Abc_Utils = $PS["VexFlow.Abc.Utils"];
  var VexFlow_Abc_Volta = $PS["VexFlow.Abc.Volta"];
  var VexFlow_Types = $PS["VexFlow.Types"];                
  var zipBars = function (bs) {
      var intArray = Data_Array.range(0)(Data_List.length(bs));
      var barArray = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(bs);
      return Data_Array.zip(intArray)(barArray);
  };
  var music = function (tickablePosition) {
      return function (noteIndex) {
          return function (phraseDuration) {
              return function (m) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (abcContext) {
                      var spec = VexFlow_Abc_Translate.music(abcContext)(tickablePosition)(noteIndex)(phraseDuration)(m);
                      var newContext = VexFlow_Abc_Utils.applyContextChanges(abcContext)(spec);
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(newContext))(function () {
                          return Data_Either.either(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))))(spec);
                      });
                  });
              };
          };
      };
  };
  var modifiedStartLine = function (isPendingRepeatbegin) {
      return function (barType) {
          if (isPendingRepeatbegin) {
              return {
                  thickness: barType.thickness,
                  repeat: new Data_Maybe.Just(Data_Abc.Begin.value),
                  iteration: barType.iteration
              };
          };
          return barType;
      };
  };
  var foldMusicsFunction = function (eacc) {
      return function (m) {
          var noteIndex = Data_Array.length(eacc.noteSpecs);
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(music(eacc.tickableContext.value0)(noteIndex)(eacc.tickableContext.value2)(m))(function (v) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Semigroup.append(Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "beatMarkers";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "contextChanges";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "noteSpecs";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "repetitions";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "slurBrackets";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "tickableContext";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "ties";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "tuplets";
              }))()(Data_Semigroup.semigroupRecordCons(new Data_Symbol.IsSymbol(function () {
                  return "typesettingSpaces";
              }))()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(VexFlow_Abc_TickableContext.tickableSemigroupCtx))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray)))(eacc)(v));
          });
      };
  };
  var foldOverMusics = Data_Foldable.foldM(Data_Foldable.foldableArray)(Control_Monad_Except_Trans.monadExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(foldMusicsFunction)(Data_Monoid.mempty(VexFlow_Types.musicSpecMonoid));
  var addFinalBeatMarker = function (abcContext) {
      return function (v) {
          var barDuration = Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Ord.ordInt)(Data_EuclideanRing.euclideanRingInt))(v.tickableContext.value2)(abcContext.unitNoteLength);
          var mBeatMarker = VexFlow_Abc_Beat.exactBeatNumber(barDuration)(abcContext.beatDuration)(v.tickableContext.value0);
          var $20 = Data_Array.length(v.beatMarkers) === 0 && Data_Maybe.isNothing(mBeatMarker);
          if ($20) {
              return VexFlow_Types.MusicSpec({
                  noteSpecs: v.noteSpecs,
                  tuplets: v.tuplets,
                  ties: v.ties,
                  tickableContext: v.tickableContext,
                  contextChanges: v.contextChanges,
                  slurBrackets: v.slurBrackets,
                  beatMarkers: [ {
                      beatNumber: 1,
                      noteIndex: Data_Array.length(v.noteSpecs)
                  } ],
                  repetitions: v.repetitions,
                  typesettingSpaces: v.typesettingSpaces
              });
          };
          return VexFlow_Types.MusicSpec({
              noteSpecs: v.noteSpecs,
              tuplets: v.tuplets,
              ties: v.ties,
              tickableContext: v.tickableContext,
              contextChanges: v.contextChanges,
              slurBrackets: v.slurBrackets,
              beatMarkers: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.beatMarkers)(Data_Unfoldable.fromMaybe(Data_Unfoldable.unfoldableArray)(mBeatMarker)),
              repetitions: v.repetitions,
              typesettingSpaces: v.typesettingSpaces
          });
      };
  };
  var bar = function (staveNumber) {
      return function (barNumber) {
          return function (abcBar) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(foldOverMusics(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(abcBar.music)))(function (musicSpec0) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (abcContext) {
                      var musicSpec = addFinalBeatMarker(abcContext)(musicSpec0);
                      var volta = (function () {
                          var $25 = barNumber === 0 && VexFlow_Abc_Utils.isEmptyMusicSpec(musicSpec);
                          if ($25) {
                              return Data_Maybe.Nothing.value;
                          };
                          return VexFlow_Abc_Volta.startVolta(abcBar.startLine)(abcContext.isMidVolta);
                      })();
                      var newIsMidVolta = VexFlow_Abc_Volta.isMidVolta(abcBar.startLine)(abcContext.isMidVolta);
                      var displayedKeySig = (function () {
                          var $26 = barNumber === 0;
                          if ($26) {
                              return new Data_Maybe.Just(abcContext.keySignature);
                          };
                          return Data_Maybe.Nothing.value;
                      })();
                      var width = VexFlow_Abc_TickableContext.estimateBarWidth(barNumber === 0)(abcContext.isNewTimeSignature)(displayedKeySig)(abcBar);
                      var barSpec = {
                          barNumber: barNumber,
                          width: width,
                          xOffset: abcContext.accumulatedStaveWidth,
                          startLine: modifiedStartLine(abcContext.pendingRepeatBegin)(abcBar.startLine),
                          endLineThickness: VexFlow_Types.Single.value,
                          endLineRepeat: false,
                          volta: volta,
                          timeSignature: abcContext.timeSignature,
                          beamSpecs: VexFlow_Abc_Beam.calculateBeams(abcContext.timeSignature)(musicSpec.noteSpecs)(musicSpec.beatMarkers)(musicSpec.typesettingSpaces),
                          curves: VexFlow_Abc_Slur.vexCurves(musicSpec.slurBrackets),
                          musicSpec: musicSpec
                      };
                      var newWidth = abcContext.accumulatedStaveWidth + barSpec.width | 0;
                      var newAbcContext = {
                          accumulatedStaveWidth: newWidth,
                          isMidVolta: newIsMidVolta,
                          isNewTimeSignature: false,
                          pendingRepeatBegin: false,
                          beatDuration: abcContext.beatDuration,
                          keySignature: abcContext.keySignature,
                          mTempo: abcContext.mTempo,
                          maxWidth: abcContext.maxWidth,
                          staveNo: abcContext.staveNo,
                          timeSignature: abcContext.timeSignature,
                          unitNoteLength: abcContext.unitNoteLength
                      };
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(newAbcContext))(function () {
                          return Control_Monad_Except_Trans.withExceptT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(function (err) {
                              return err + (": bar " + Data_Show.show(Data_Show.showInt)(barNumber));
                          })(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(barSpec));
                      });
                  });
              });
          };
      };
  };
  var bars = function (staveNumber) {
      return function (bs) {
          var tupleArray = zipBars(bs);
          return Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(function (v) {
              return bar(staveNumber)(v.value0)(v.value1);
          })(tupleArray);
      };
  };
  var bodyPart = function (bp) {
      if (bp instanceof Data_Abc.Score) {
          var $31 = Data_Abc_Metadata.isEmptyStave(bp.value0);
          if ($31) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Maybe.Nothing.value);
          };
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (abcContext) {
              var mStaveNo = VexFlow_Abc_Utils.nextStaveNo(abcContext.staveNo);
              var staveNo = Data_Maybe.fromMaybe(0)(mStaveNo);
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))((function () {
                  var $32 = {};
                  for (var $33 in abcContext) {
                      if ({}.hasOwnProperty.call(abcContext, $33)) {
                          $32[$33] = abcContext[$33];
                      };
                  };
                  $32.staveNo = mStaveNo;
                  $32.accumulatedStaveWidth = VexFlow_Types.staveIndentation;
                  return $32;
              })()))(function () {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(bars(staveNo)(bp.value0))(function (staveBars) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (abcContext$prime) {
                          var pendingRepeatBegin = VexFlow_Abc_BarEnd.staveEndsWithRepeatBegin(staveBars);
                          var normalisedStaveBars = VexFlow_Abc_BarEnd.repositionBarEndRepeats(staveBars);
                          var filledStaveLine = VexFlow_Abc_BarEnd.fillStaveLine(abcContext.maxWidth)(normalisedStaveBars);
                          var accumulatedStaveWidth = VexFlow_Abc_BarEnd.staveWidth(normalisedStaveBars);
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))((function () {
                              var $35 = {};
                              for (var $36 in abcContext$prime) {
                                  if ({}.hasOwnProperty.call(abcContext$prime, $36)) {
                                      $35[$36] = abcContext$prime[$36];
                                  };
                              };
                              $35.pendingRepeatBegin = pendingRepeatBegin;
                              return $35;
                          })()))(function () {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(new Data_Maybe.Just({
                                  staveNo: staveNo,
                                  staveWidth: accumulatedStaveWidth,
                                  keySignature: abcContext.keySignature,
                                  isNewTimeSignature: abcContext.isNewTimeSignature,
                                  mTempo: abcContext.mTempo,
                                  barSpecs: filledStaveLine
                              }));
                          });
                      });
                  });
              });
          });
      };
      if (bp instanceof Data_Abc.BodyInfo) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))))(function (abcContext) {
              var contextChanges = VexFlow_Abc_Translate.headerChange(abcContext)(bp.value0);
              var newAbcContext = Data_Foldable.foldl(Data_Foldable.foldableArray)(VexFlow_Abc_Utils.updateAbcContext)(abcContext)(contextChanges);
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(newAbcContext))(function () {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Maybe.Nothing.value);
              });
          });
      };
      throw new Error("Failed pattern match at VexFlow.Abc.TranslateStateful (line 78, column 3 - line 124, column 21): " + [ bp.constructor.name ]);
  };
  var tuneBody = function (bodyParts) {
      return Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(bodyPart)(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(bodyParts));
  };
  var runTuneBody = function (abcContext) {
      return function (bps) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_State_Trans.evalStateT(Data_Identity.functorIdentity)(Control_Monad_Except_Trans.runExceptT(tuneBody(bps)))(abcContext));
      };
  };
  exports["runTuneBody"] = runTuneBody;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["VexFlow.Score"] = $PS["VexFlow.Score"] || {};
  var exports = $PS["VexFlow.Score"];
  var $foreign = $PS["VexFlow.Score"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Abc = $PS["Data.Abc"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var VexFlow_Abc_ContextChange = $PS["VexFlow.Abc.ContextChange"];
  var VexFlow_Abc_Translate = $PS["VexFlow.Abc.Translate"];
  var VexFlow_Abc_TranslateStateful = $PS["VexFlow.Abc.TranslateStateful"];
  var VexFlow_Abc_Utils = $PS["VexFlow.Abc.Utils"];
  var VexFlow_Types = $PS["VexFlow.Types"];                
  var staveConfig = function (staveNo) {
      return function (barSpec) {
          return {
              x: barSpec.xOffset,
              y: VexFlow_Types.staveSeparation * staveNo | 0,
              width: barSpec.width,
              barNo: barSpec.barNumber,
              lineColour: "#1a1a1a",
              hasRightBar: Data_Eq.notEq(VexFlow_Types.eqLineThickness)(barSpec.endLineThickness)(VexFlow_Types.NoLine.value),
              hasDoubleRightBar: Data_Eq.eq(VexFlow_Types.eqLineThickness)(barSpec.endLineThickness)(VexFlow_Types.Double.value)
          };
      };
  };
  var processVolta = function (staveBar) {
      return function (mVolta) {
          if (mVolta instanceof Data_Maybe.Just) {
              return $foreign.displayVolta(staveBar)(mVolta.value0);
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  };
  var processBarEndRepeat = function (staveBar) {
      return function (isRepeat) {
          if (isRepeat) {
              return $foreign.displayBarEndRepeat(staveBar);
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  };
  var processBarBeginRepeat = function (staveBar) {
      return function (mRepeat) {
          if (mRepeat instanceof Data_Maybe.Just && mRepeat.value0 instanceof Data_Abc.Begin) {
              return $foreign.displayBarBeginRepeat(staveBar);
          };
          if (mRepeat instanceof Data_Maybe.Just && mRepeat.value0 instanceof Data_Abc.End) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          if (mRepeat instanceof Data_Maybe.Just && mRepeat.value0 instanceof Data_Abc.BeginAndEnd) {
              return $foreign.displayBarBeginRepeat(staveBar);
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  };
  var newStave = function (staveCnfg) {
      return function (ks) {
          return $foreign.newStaveImpl(staveCnfg)(VexFlow_Abc_Translate.keySignature(ks));
      };
  };
  var displayContextChange = function (staveBar) {
      return function (contextChange) {
          if (contextChange instanceof VexFlow_Abc_ContextChange.MeterChange) {
              return $foreign.addTimeSignature(staveBar)({
                  numerator: contextChange.value0.value0,
                  denominator: contextChange.value0.value1
              });
          };
          if (contextChange instanceof VexFlow_Abc_ContextChange.KeyChange) {
              return $foreign.addKeySignature(staveBar)(VexFlow_Abc_Translate.keySignature(contextChange.value0.keySignature));
          };
          if (contextChange instanceof VexFlow_Abc_ContextChange.UnitNoteChange) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          throw new Error("Failed pattern match at VexFlow.Score (line 168, column 3 - line 176, column 16): " + [ contextChange.constructor.name ]);
      };
  };
  var createScore = function (config) {
      return function (abcTune) {
          var v = VexFlow_Abc_Utils.initialAbcContext(abcTune)(config);
          if (v instanceof Data_Either.Left) {
              return new Data_Either.Left(v.value0);
          };
          if (v instanceof Data_Either.Right) {
              return VexFlow_Abc_TranslateStateful.runTuneBody(v.value0)(abcTune.body);
          };
          throw new Error("Failed pattern match at VexFlow.Score (line 65, column 3 - line 69, column 42): " + [ v.constructor.name ]);
      };
  };
  var addTempoMarking = function (stave) {
      return function (mTempo) {
          return Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))($foreign.addTempoMarkingImpl(stave))(mTempo);
      };
  };
  var displayBarSpec = function (renderer) {
      return function (staveSpec) {
          return function (barSpec) {
              return function __do() {
                  var staveBar = newStave(staveConfig(staveSpec.staveNo)(barSpec))(staveSpec.keySignature)();
                  Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(displayContextChange(staveBar))(barSpec.musicSpec.contextChanges)();
                  (function () {
                      var $23 = barSpec.barNumber === 0 && staveSpec.isNewTimeSignature;
                      if ($23) {
                          return $foreign.addTimeSignature(staveBar)(barSpec.timeSignature)();
                      };
                      return Data_Unit.unit;
                  })();
                  (function () {
                      var $24 = barSpec.barNumber === 0 && staveSpec.staveNo === 0;
                      if ($24) {
                          return addTempoMarking(staveBar)(staveSpec.mTempo)();
                      };
                      return Data_Unit.unit;
                  })();
                  processBarBeginRepeat(staveBar)(barSpec.startLine.repeat)();
                  processBarEndRepeat(staveBar)(barSpec.endLineRepeat)();
                  processVolta(staveBar)(barSpec.volta)();
                  $foreign.renderBarContents(renderer)(staveBar)(barSpec.beamSpecs)(barSpec.curves)(barSpec.musicSpec)();
                  return $foreign.renderStave(renderer)(staveBar)();
              };
          };
      };
  };
  var displayStaveSpec = function (renderer) {
      return function (mStaveSpec) {
          if (mStaveSpec instanceof Data_Maybe.Just) {
              return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(displayBarSpec(renderer)(mStaveSpec.value0))(mStaveSpec.value0.barSpecs);
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  };
  var renderScore = function (config) {
      return function (renderer) {
          return function (eStaveSpecs) {
              if (eStaveSpecs instanceof Data_Either.Right) {
                  return function __do() {
                      Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(displayStaveSpec(renderer))(eStaveSpecs.value0)();
                      return true;
                  };
              };
              if (eStaveSpecs instanceof Data_Either.Left) {
                  return function __do() {
                      Effect_Console.log("error in producing score: " + eStaveSpecs.value0)();
                      return false;
                  };
              };
              throw new Error("Failed pattern match at VexFlow.Score (line 84, column 3 - line 90, column 17): " + [ eStaveSpecs.constructor.name ]);
          };
      };
  };
  exports["createScore"] = createScore;
  exports["renderScore"] = renderScore;
  exports["initialiseCanvas"] = $foreign.initialiseCanvas;
  exports["clearCanvas"] = $foreign.clearCanvas;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Editor.Container"] = $PS["Editor.Container"] || {};
  var exports = $PS["Editor.Container"];
  var Audio_SoundFont_Melody_Class = $PS["Audio.SoundFont.Melody.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var DOM_HTML_Indexed_InputAcceptType = $PS["DOM.HTML.Indexed.InputAcceptType"];
  var DOM_HTML_Indexed_InputType = $PS["DOM.HTML.Indexed.InputType"];
  var Data_Abc_Accidentals = $PS["Data.Abc.Accidentals"];
  var Data_Abc_Canonical = $PS["Data.Abc.Canonical"];
  var Data_Abc_Metadata = $PS["Data.Abc.Metadata"];
  var Data_Abc_Midi = $PS["Data.Abc.Midi"];
  var Data_Abc_Octave = $PS["Data.Abc.Octave"];
  var Data_Abc_Parser = $PS["Data.Abc.Parser"];
  var Data_Abc_Tempo = $PS["Data.Abc.Tempo"];
  var Data_Abc_Transposition = $PS["Data.Abc.Transposition"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Editor_EditorComponent = $PS["Editor.EditorComponent"];
  var Editor_Transposition = $PS["Editor.Transposition"];
  var Editor_Window = $PS["Editor.Window"];
  var Effect_Class = $PS["Effect.Class"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_FileInputComponent = $PS["Halogen.FileInputComponent"];
  var Halogen_HTML = $PS["Halogen.HTML"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = $PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = $PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = $PS["Halogen.HTML.Properties"];
  var Halogen_PlayerComponent = $PS["Halogen.PlayerComponent"];
  var Halogen_Query = $PS["Halogen.Query"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Halogen_SimpleButtonComponent = $PS["Halogen.SimpleButtonComponent"];
  var JS_FileIO = $PS["JS.FileIO"];
  var VexFlow_Abc_Alignment = $PS["VexFlow.Abc.Alignment"];
  var VexFlow_Score = $PS["VexFlow.Score"];                
  var InitQuery = (function () {
      function InitQuery(value0) {
          this.value0 = value0;
      };
      InitQuery.create = function (value0) {
          return new InitQuery(value0);
      };
      return InitQuery;
  })();
  var InitVex = (function () {
      function InitVex(value0) {
          this.value0 = value0;
      };
      InitVex.create = function (value0) {
          return new InitVex(value0);
      };
      return InitVex;
  })();
  var Init = (function () {
      function Init() {

      };
      Init.value = new Init();
      return Init;
  })();
  var HandleABCFile = (function () {
      function HandleABCFile(value0) {
          this.value0 = value0;
      };
      HandleABCFile.create = function (value0) {
          return new HandleABCFile(value0);
      };
      return HandleABCFile;
  })();
  var HandleClearButton = (function () {
      function HandleClearButton(value0) {
          this.value0 = value0;
      };
      HandleClearButton.create = function (value0) {
          return new HandleClearButton(value0);
      };
      return HandleClearButton;
  })();
  var HandleSaveButton = (function () {
      function HandleSaveButton(value0) {
          this.value0 = value0;
      };
      HandleSaveButton.create = function (value0) {
          return new HandleSaveButton(value0);
      };
      return HandleSaveButton;
  })();
  var HandleNewTuneText = (function () {
      function HandleNewTuneText(value0) {
          this.value0 = value0;
      };
      HandleNewTuneText.create = function (value0) {
          return new HandleNewTuneText(value0);
      };
      return HandleNewTuneText;
  })();
  var HandleMoveOctave = (function () {
      function HandleMoveOctave(value0) {
          this.value0 = value0;
      };
      HandleMoveOctave.create = function (value0) {
          return new HandleMoveOctave(value0);
      };
      return HandleMoveOctave;
  })();
  var HandleTempoInput = (function () {
      function HandleTempoInput(value0) {
          this.value0 = value0;
      };
      HandleTempoInput.create = function (value0) {
          return new HandleTempoInput(value0);
      };
      return HandleTempoInput;
  })();
  var HandleTranspositionKey = (function () {
      function HandleTranspositionKey(value0) {
          this.value0 = value0;
      };
      HandleTranspositionKey.create = function (value0) {
          return new HandleTranspositionKey(value0);
      };
      return HandleTranspositionKey;
  })();
  var HandleTuneIsPlaying = (function () {
      function HandleTuneIsPlaying(value0) {
          this.value0 = value0;
      };
      HandleTuneIsPlaying.create = function (value0) {
          return new HandleTuneIsPlaying(value0);
      };
      return HandleTuneIsPlaying;
  })();
  var HandleAlign = (function () {
      function HandleAlign() {

      };
      HandleAlign.value = new HandleAlign();
      return HandleAlign;
  })();
  var HandlePrint = (function () {
      function HandlePrint() {

      };
      HandlePrint.value = new HandlePrint();
      return HandlePrint;
  })();
  var vexConfig = {
      parentElementId: "vexflow",
      width: 1300,
      height: 700,
      scale: 0.8,
      isSVG: true
  };
  var toPlayable = function (abcTune) {
      return Audio_SoundFont_Melody_Class.MidiRecording(Data_Abc_Midi.toMidi(abcTune));
  };
  var renderTuneTitle = function (dictMonadAff) {
      return function (state) {
          var v = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Either.hush(state.tuneResult))(Data_Abc_Metadata.getTitle);
          if (v instanceof Data_Maybe.Just) {
              return Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.id_("tune-title") ])([ Halogen_HTML_Core.text(v.value0) ]);
          };
          return Halogen_HTML_Core.text("");
      };
  };
  var renderTranspositionMenu = function (dictMonadAff) {
      return function (state) {
          var mks = (function () {
              if (state.tuneResult instanceof Data_Either.Right) {
                  return Data_Maybe.fromMaybe(Editor_Transposition.cMajor)(Data_Abc_Metadata.getKeySig(state.tuneResult.value0));
              };
              return Editor_Transposition.cMajor;
          })();
          var f = function (mo) {
              return Halogen_HTML_Elements.option([ Halogen_HTML_Properties.disabled(mo.value1) ])([ Halogen_HTML_Core.text(mo.value0) ]);
          };
          var enabled = (function () {
              if (state.tuneResult instanceof Data_Either.Right) {
                  return Data_List["null"](mks.modifications);
              };
              return false;
          })();
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("leftPanelComponent") ])([ Halogen_HTML_Elements.label([ Halogen_HTML_Properties.class_("labelAlignment") ])([ Halogen_HTML_Core.text("transpose to:") ]), Halogen_HTML_Elements.select([ Halogen_HTML_Properties.class_("selection"), Halogen_HTML_Properties.id_("transposition-menu"), Halogen_HTML_Properties.value(Editor_Transposition.showKeySig(mks.keySignature)), Halogen_HTML_Properties.enabled(enabled), Halogen_HTML_Events.onValueChange(function ($102) {
              return Data_Maybe.Just.create(HandleTranspositionKey.create($102));
          }) ])(Data_Functor.map(Data_Functor.functorArray)(f)(Editor_Transposition.keyMenuOptions(mks.keySignature))) ]);
      };
  };
  var renderTempoSlider = function (dictMonadAff) {
      return function (state) {
          var toTempo = function (s) {
              return Data_Maybe.fromMaybe(Data_Abc_Tempo.defaultTempo.bpm)(Data_Int.fromString(s));
          };
          var startBpm = (function () {
              if (state.tuneResult instanceof Data_Either.Right) {
                  return Data_Abc_Tempo.getBpm(state.tuneResult.value0);
              };
              return Data_Abc_Tempo.defaultTempo.bpm;
          })();
          var isDisabled = Data_Either.isLeft(state.tuneResult);
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("leftPanelComponent") ])([ Halogen_HTML_Elements.label([ Halogen_HTML_Properties.class_("labelAlignment") ])([ Halogen_HTML_Core.text("change tempo:") ]), Halogen_HTML_Elements.input([ Halogen_HTML_Events.onValueInput(function ($103) {
              return Data_Maybe.Just.create(HandleTempoInput.create(toTempo($103)));
          }), Halogen_HTML_Properties.type_(Halogen_HTML_Core.isPropInputType)(DOM_HTML_Indexed_InputType.InputRange.value), Halogen_HTML_Properties.id_("tempo-slider"), Halogen_HTML_Properties.min(10.0), Halogen_HTML_Properties.max(300.0), Halogen_HTML_Properties.value(Data_Show.show(Data_Show.showInt)(startBpm)), Halogen_HTML_Properties.disabled(isDisabled) ]) ]);
      };
  };
  var renderScore = function (dictMonadAff) {
      return function (state) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("score") ])([ renderTuneTitle(dictMonadAff)(state), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("canvasDiv"), Halogen_HTML_Properties.id_("vexflow") ])([  ]) ]);
      };
  };
  var renderPrintButton = function (dictMonadAff) {
      return function (state) {
          var enabled = Data_Either.either(function (v) {
              return false;
          })(function (v) {
              return true;
          })(state.tuneResult);
          var className = (function () {
              if (enabled) {
                  return "hoverable";
              };
              return "unhoverable";
          })();
          return Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
              return new Data_Maybe.Just(HandlePrint.value);
          }), Halogen_HTML_Properties.class_(className), Halogen_HTML_Properties.enabled(enabled) ])([ Halogen_HTML_Core.text("print") ]);
      };
  };
  var renderOctaveButton = function (dictMonadAff) {
      return function (isUp) {
          return function (state) {
              var label = (function () {
                  if (isUp) {
                      return "up";
                  };
                  return "down";
              })();
              var enabled = Data_Either.either(function (v) {
                  return false;
              })(function (v) {
                  return true;
              })(state.tuneResult);
              var className = Data_Either.either(function (v) {
                  return "unhoverable";
              })(function (v) {
                  return "hoverable";
              })(state.tuneResult);
              return Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
                  return new Data_Maybe.Just(new HandleMoveOctave(isUp));
              }), Halogen_HTML_Properties.class_(className), Halogen_HTML_Properties.enabled(enabled) ])([ Halogen_HTML_Core.text(label) ]);
          };
      };
  };
  var renderAlignButton = function (dictMonadAff) {
      return function (state) {
          var enabled = Data_Either.either(function (v) {
              return false;
          })(function (v) {
              return !state.vexAligned;
          })(state.tuneResult);
          var className = (function () {
              if (enabled) {
                  return "hoverable";
              };
              return "unhoverable";
          })();
          return Halogen_HTML_Elements.button([ Halogen_HTML_Events.onClick(function (v) {
              return new Data_Maybe.Just(HandleAlign.value);
          }), Halogen_HTML_Properties.class_(className), Halogen_HTML_Properties.enabled(enabled) ])([ Halogen_HTML_Core.text("align") ]);
      };
  };
  var getFileName = function (state) {
      if (state.fileName instanceof Data_Maybe.Just) {
          return state.fileName.value0;
      };
      if (state.tuneResult instanceof Data_Either.Right) {
          return Data_Maybe.fromMaybe("untitled")(Data_Abc_Metadata.getTitle(state.tuneResult.value0)) + ".abc";
      };
      return "untitled.abc";
  };
  var emptyTune = {
      headers: Data_List_Types.Nil.value,
      body: Data_List_Types.Nil.value
  };
  var changeTune = function (f) {
      return function (state) {
          if (state.tuneResult instanceof Data_Either.Right) {
              return new Data_Maybe.Just(Data_Abc_Canonical.fromTune(f(state.tuneResult.value0)));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var transposeTune = function (s) {
      return function (state) {
          var v = Data_Abc_Parser.parseKeySignature(s);
          if (v instanceof Data_Either.Right) {
              return changeTune(Data_Abc_Transposition.transposeTo(Data_Abc_Accidentals.fromKeySig(v.value0.keySignature)))(state);
          };
          if (v instanceof Data_Either.Left) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Editor.Container (line 552, column 3 - line 556, column 14): " + [ v.constructor.name ]);
      };
  };
  var abcFileInputCtx = {
      componentId: "abcinput",
      isBinary: false,
      prompt: "choose file",
      accept: DOM_HTML_Indexed_InputAcceptType.mediaType(".abc")
  };
  var _savefile = Data_Symbol.SProxy.value;
  var _player = Data_Symbol.SProxy.value;
  var refreshPlayerState = function (dictMonadAff) {
      return function (tuneResult) {
          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Data_Either.either(function (v) {
              return Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function () {
                  return "player";
              }))(Data_Ord.ordUnit)(_player)(Data_Unit.unit)(Halogen_Query.tell(Halogen_PlayerComponent.StopMelody.create));
          })(function (abcTune) {
              return Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function () {
                  return "player";
              }))(Data_Ord.ordUnit)(_player)(Data_Unit.unit)(Halogen_Query.tell(Halogen_PlayerComponent.HandleNewPlayable.create(toPlayable(abcTune))));
          })(tuneResult))(function () {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
          });
      };
  };
  var renderPlayer = function (dictMonadAff) {
      return function (state) {
          if (state.tuneResult instanceof Data_Either.Right) {
              return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("leftPanelComponent"), Halogen_HTML_Properties.id_("player-div") ])([ Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
                  return "player";
              }))(Data_Ord.ordUnit)(_player)(Data_Unit.unit)(Halogen_PlayerComponent.component(Audio_SoundFont_Melody_Class.playableMidi)(dictMonadAff)(toPlayable(state.tuneResult.value0))(state.instruments))(Data_Unit.unit)(function ($104) {
                  return Data_Maybe.Just.create(HandleTuneIsPlaying.create($104));
              }) ]);
          };
          if (state.tuneResult instanceof Data_Either.Left) {
              return Halogen_HTML_Elements.div_([  ]);
          };
          throw new Error("Failed pattern match at Editor.Container (line 387, column 3 - line 396, column 13): " + [ state.tuneResult.constructor.name ]);
      };
  };
  var _editor = Data_Symbol.SProxy.value;
  var onNewTuneText = function (dictMonadAff) {
      return function (maybeText) {
          var $62 = Data_Maybe.isJust(maybeText);
          if ($62) {
              var tuneText = Data_Maybe.fromJust()(maybeText);
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function () {
                  return "editor";
              }))(Data_Ord.ordUnit)(_editor)(Data_Unit.unit)(Halogen_Query.tell(Editor_EditorComponent.UpdateContent.create(tuneText))))(function () {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function () {
                      return "player";
                  }))(Data_Ord.ordUnit)(_player)(Data_Unit.unit)(Halogen_Query.tell(Halogen_PlayerComponent.StopMelody.create)))(function () {
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                  });
              });
          };
          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
      };
  };
  var _clear = Data_Symbol.SProxy.value;
  var _abcfile = Data_Symbol.SProxy.value;
  var component = function (dictMonadAff) {
      var render = function (state) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.id_("abcEditor") ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("leftPane") ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("leftPanelComponent") ])([ Halogen_HTML_Elements.label([ Halogen_HTML_Properties.class_("labelAlignment") ])([ Halogen_HTML_Core.text("load ABC file:") ]), Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
              return "abcfile";
          }))(Data_Ord.ordUnit)(_abcfile)(Data_Unit.unit)(Halogen_FileInputComponent.component(dictMonadAff)(abcFileInputCtx))(Data_Unit.unit)(function ($105) {
              return Data_Maybe.Just.create(HandleABCFile.create($105));
          }) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("leftPanelComponent") ])([ Halogen_HTML_Elements.label([ Halogen_HTML_Properties.class_("labelAlignment") ])([ Halogen_HTML_Core.text("save or clear:") ]), Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
              return "savefile";
          }))(Data_Ord.ordUnit)(_savefile)(Data_Unit.unit)(Halogen_SimpleButtonComponent.component("save"))(Data_Unit.unit)(function ($106) {
              return Data_Maybe.Just.create(HandleSaveButton.create($106));
          }), Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
              return "clear";
          }))(Data_Ord.ordUnit)(_clear)(Data_Unit.unit)(Halogen_SimpleButtonComponent.component("clear"))(Data_Unit.unit)(function ($107) {
              return Data_Maybe.Just.create(HandleClearButton.create($107));
          }) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("leftPanelComponent") ])([ Halogen_HTML_Elements.label([ Halogen_HTML_Properties.class_("labelAlignment") ])([ Halogen_HTML_Core.text("change octave:") ]), renderOctaveButton(dictMonadAff)(true)(state), renderOctaveButton(dictMonadAff)(false)(state) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("leftPanelComponent") ])([ Halogen_HTML_Elements.label([ Halogen_HTML_Properties.class_("labelAlignment") ])([ Halogen_HTML_Core.text("score:") ]), renderAlignButton(dictMonadAff)(state), renderPrintButton(dictMonadAff)(state) ]), renderTempoSlider(dictMonadAff)(state), renderTranspositionMenu(dictMonadAff)(state), renderPlayer(dictMonadAff)(state) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("rightPane") ])([ Halogen_HTML.slot()(new Data_Symbol.IsSymbol(function () {
              return "editor";
          }))(Data_Ord.ordUnit)(_editor)(Data_Unit.unit)(Editor_EditorComponent.component)(Data_Unit.unit)(function ($108) {
              return Data_Maybe.Just.create(HandleNewTuneText.create($108));
          }) ]), renderScore(dictMonadAff)(state) ]);
      };
      var initialState = function (input) {
          return {
              instruments: input.instruments,
              tuneResult: Editor_EditorComponent.nullTune,
              fileName: Data_Maybe.Nothing.value,
              vexRenderer: Data_Maybe.Nothing.value,
              vexScore: new Data_Either.Left(""),
              vexRendered: false,
              vexAligned: false,
              initialAbc: input.initialAbc
          };
      };
      var handleQuery = function (v) {
          if (v instanceof InitQuery) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                  var $64 = {};
                  for (var $65 in st) {
                      if ({}.hasOwnProperty.call(st, $65)) {
                          $64[$65] = st[$65];
                      };
                  };
                  $64.vexRenderer = Data_Maybe.Nothing.value;
                  return $64;
              }))(function () {
                  return handleQuery(new InitVex(v.value0));
              });
          };
          if (v instanceof InitVex) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(VexFlow_Score.initialiseCanvas(vexConfig)))(function (renderer) {
                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                          var $68 = {};
                          for (var $69 in st) {
                              if ({}.hasOwnProperty.call(st, $69)) {
                                  $68[$69] = st[$69];
                              };
                          };
                          $68.vexRenderer = new Data_Maybe.Just(renderer);
                          return $68;
                      }))(function () {
                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(onNewTuneText(dictMonadAff)(state.initialAbc))(function () {
                              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(new Data_Maybe.Just(v.value0));
                          });
                      });
                  });
              });
          };
          throw new Error("Failed pattern match at Editor.Container (line 291, column 17 - line 304, column 23): " + [ v.constructor.name ]);
      };
      var handleAction = function (v) {
          if (v instanceof Init) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(handleQuery(new InitQuery(Data_Unit.unit)))(function () {
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                  });
              });
          };
          if (v instanceof HandleABCFile) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                  var $73 = {};
                  for (var $74 in st) {
                      if ({}.hasOwnProperty.call(st, $74)) {
                          $73[$74] = st[$74];
                      };
                  };
                  $73.fileName = new Data_Maybe.Just(v.value0.value0.name);
                  return $73;
              }))(function () {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function () {
                      return "editor";
                  }))(Data_Ord.ordUnit)(_editor)(Data_Unit.unit)(Halogen_Query.tell(Editor_EditorComponent.UpdateContent.create(v.value0.value0.contents))))(function () {
                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function () {
                          return "player";
                      }))(Data_Ord.ordUnit)(_player)(Data_Unit.unit)(Halogen_Query.tell(Halogen_PlayerComponent.StopMelody.create)))(function () {
                          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                      });
                  });
              });
          };
          if (v instanceof HandleClearButton) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                  var $78 = {};
                  for (var $79 in st) {
                      if ({}.hasOwnProperty.call(st, $79)) {
                          $78[$79] = st[$79];
                      };
                  };
                  $78.fileName = Data_Maybe.Nothing.value;
                  $78.vexScore = new Data_Either.Left("");
                  $78.vexAligned = false;
                  return $78;
              }))(function () {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function () {
                      return "editor";
                  }))(Data_Ord.ordUnit)(_editor)(Data_Unit.unit)(Halogen_Query.tell(Editor_EditorComponent.UpdateContent.create(""))))(function () {
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                  });
              });
          };
          if (v instanceof HandleSaveButton) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.query()(new Data_Symbol.IsSymbol(function () {
                  return "editor";
              }))(Data_Ord.ordUnit)(_editor)(Data_Unit.unit)(Halogen_Query.request(Editor_EditorComponent.GetText.create)))(function (maybeText) {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                      var text = Data_Maybe.fromMaybe("")(maybeText);
                      var fileName = getFileName(state);
                      var fsp = {
                          name: fileName,
                          contents: text
                      };
                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(JS_FileIO.saveTextFile(fsp)))(function () {
                          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                      });
                  });
              });
          };
          if (v instanceof HandleTempoInput) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                  var maybeText = changeTune(Data_Abc_Tempo.setBpm(v.value0))(state);
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(onNewTuneText(dictMonadAff)(maybeText))(function () {
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                  });
              });
          };
          if (v instanceof HandleMoveOctave) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                  var maybeText = changeTune(Data_Abc_Octave.move(v.value0))(state);
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(onNewTuneText(dictMonadAff)(maybeText))(function () {
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                  });
              });
          };
          if (v instanceof HandleTranspositionKey) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                  var maybeText = transposeTune(v.value0)(state);
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(onNewTuneText(dictMonadAff)(maybeText))(function () {
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                  });
              });
          };
          if (v instanceof HandleNewTuneText) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(refreshPlayerState(dictMonadAff)(v.value0.value0))(function () {
                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                      var abcTune = Data_Either.either(function (v1) {
                          return emptyTune;
                      })(Control_Category.identity(Control_Category.categoryFn))(v.value0.value0);
                      var vexScore = VexFlow_Score.createScore(vexConfig)(abcTune);
                      if (state.vexRenderer instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(VexFlow_Score.clearCanvas(state.vexRenderer.value0)))(function () {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(VexFlow_Score.renderScore(vexConfig)(state.vexRenderer.value0)(vexScore)))(function (rendered) {
                                  return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                      var $89 = {};
                                      for (var $90 in st) {
                                          if ({}.hasOwnProperty.call(st, $90)) {
                                              $89[$90] = st[$90];
                                          };
                                      };
                                      $89.tuneResult = v.value0.value0;
                                      $89.vexRendered = rendered;
                                      $89.vexScore = vexScore;
                                      $89.vexAligned = false;
                                      return $89;
                                  }))(function () {
                                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                                  });
                              });
                          });
                      };
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                  });
              });
          };
          if (v instanceof HandleTuneIsPlaying) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
          };
          if (v instanceof HandleAlign) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (state) {
                  if (state.vexRenderer instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(VexFlow_Score.clearCanvas(state.vexRenderer.value0)))(function () {
                          var justifiedScore = VexFlow_Abc_Alignment.rightJustify(vexConfig.width)(vexConfig.scale)(state.vexScore);
                          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(VexFlow_Score.renderScore(vexConfig)(state.vexRenderer.value0)(justifiedScore)))(function (rendered) {
                              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (st) {
                                  var $98 = {};
                                  for (var $99 in st) {
                                      if ({}.hasOwnProperty.call(st, $99)) {
                                          $98[$99] = st[$99];
                                      };
                                  };
                                  $98.vexAligned = true;
                                  return $98;
                              }))(function () {
                                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                              });
                          });
                      });
                  };
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
              });
          };
          if (v instanceof HandlePrint) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Effect_Class.liftEffect(Halogen_Query_HalogenM.monadEffectHalogenM(dictMonadAff.MonadEffect0()))(Editor_Window.print))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
              });
          };
          throw new Error("Failed pattern match at Editor.Container (line 204, column 18 - line 288, column 16): " + [ v.constructor.name ]);
      };
      return Halogen_Component.mkComponent({
          initialState: initialState,
          render: render,
          "eval": Halogen_Component.mkEval({
              handleAction: handleAction,
              handleQuery: handleQuery,
              receive: Halogen_Component.defaultEval.receive,
              initialize: new Data_Maybe.Just(Init.value),
              finalize: Data_Maybe.Nothing.value
          })
      });
  };
  exports["component"] = component;
})(PS);
(function(exports) {
  /* globals exports, setTimeout */
  "use strict";

  var AVar = function () {

    function MutableQueue () {
      this.head = null;
      this.last = null;
      this.size = 0;
    }

    function MutableCell (queue, value) {
      this.queue = queue;
      this.value = value;
      this.next  = null;
      this.prev  = null;
    }

    function AVar (value) {
      this.draining = false;
      this.error    = null;
      this.value    = value;
      this.takes    = new MutableQueue();
      this.reads    = new MutableQueue();
      this.puts     = new MutableQueue();
    }

    var EMPTY = {};

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function putLast (queue, value) {
      var cell = new MutableCell(queue, value);
      switch (queue.size) {
      case 0:
        queue.head = cell;
        break;
      case 1:
        cell.prev = queue.head;
        queue.head.next = cell;
        queue.last = cell;
        break;
      default:
        cell.prev = queue.last;
        queue.last.next = cell;
        queue.last = cell;
      }
      queue.size++;
      return cell;
    }

    function takeLast (queue) {
      var cell;
      switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.last;
        queue.head.next = null;
        queue.last = null;
        break;
      default:
        cell = queue.last;
        queue.last = cell.prev;
        queue.last.next = null;
      }
      cell.prev = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function takeHead (queue) {
      var cell;
      switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.head;
        queue.last.prev = null;
        queue.head = queue.last;
        queue.last = null;
        break;
      default:
        cell = queue.head;
        queue.head = cell.next;
        queue.head.prev = null;
      }
      cell.next = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function deleteCell (cell) {
      if (cell.queue === null) {
        return;
      }
      if (cell.queue.last === cell) {
        takeLast(cell.queue);
        return;
      }
      if (cell.queue.head === cell) {
        takeHead(cell.queue);
        return;
      }
      if (cell.prev) {
        cell.prev.next = cell.next;
      }
      if (cell.next) {
        cell.next.prev = cell.prev;
      }
      cell.queue.size--;
      cell.queue = null;
      cell.value = null;
      cell.next  = null;
      cell.prev  = null;
    }

    function drainVar (util, avar) {
      if (avar.draining) {
        return;
      }

      var ps = avar.puts;
      var ts = avar.takes;
      var rs = avar.reads;
      var p, r, t, value, rsize;

      avar.draining = true;

      while (1) { // eslint-disable-line no-constant-condition
        p = null;
        r = null;
        t = null;
        value = avar.value;
        rsize = rs.size;

        if (avar.error !== null) {
          value = util.left(avar.error);
          while (p = takeHead(ps)) { // eslint-disable-line no-cond-assign
            runEff(p.cb(value));
          }
          while (r = takeHead(rs)) { // eslint-disable-line no-cond-assign
            runEff(r(value));
          }
          while (t = takeHead(ts)) { // eslint-disable-line no-cond-assign
            runEff(t(value));
          }
          break;
        }

        // Process the next put. We do not immediately invoke the callback
        // because we want to preserve ordering. If there are takes/reads
        // we want to run those first.
        if (value === EMPTY && (p = takeHead(ps))) {
          avar.value = value = p.value;
        }

        if (value !== EMPTY) {
          // We go ahead and queue up the next take for the same reasons as
          // above. Invoking the read callbacks can affect the mutable queue.
          t = takeHead(ts);
          // We only want to process the reads queued up before running these
          // callbacks so we guard on rsize.
          while (rsize-- && (r = takeHead(rs))) {
            runEff(r(util.right(value)));
          }
          if (t !== null) {
            avar.value = EMPTY;
            runEff(t(util.right(value)));
          }
        }

        if (p !== null) {
          runEff(p.cb(util.right(void 0)));
        }

        // Callbacks could have queued up more items so we need to guard on the
        // actual mutable properties.
        if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
          break;
        }
      }
      avar.draining = false;
    }

    AVar.EMPTY      = EMPTY;
    AVar.putLast    = putLast;
    AVar.takeLast   = takeLast;
    AVar.takeHead   = takeHead;
    AVar.deleteCell = deleteCell;
    AVar.drainVar   = drainVar;

    return AVar;
  }();

  exports.empty = function () {
    return new AVar(AVar.EMPTY);
  };

  exports._killVar = function (util, error, avar) {
    return function () {
      if (avar.error === null) {
        avar.error = error;
        avar.value = AVar.EMPTY;
        AVar.drainVar(util, avar);
      }
    };
  };

  exports._putVar = function (util, value, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.puts, { cb: cb, value: value });
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._takeVar = function (util, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.takes, cb);
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };
})(PS["Effect.AVar"] = PS["Effect.AVar"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.AVar"] = $PS["Effect.AVar"] || {};
  var exports = $PS["Effect.AVar"];
  var $foreign = $PS["Effect.AVar"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Killed = (function () {
      function Killed(value0) {
          this.value0 = value0;
      };
      Killed.create = function (value0) {
          return new Killed(value0);
      };
      return Killed;
  })();
  var Filled = (function () {
      function Filled(value0) {
          this.value0 = value0;
      };
      Filled.create = function (value0) {
          return new Filled(value0);
      };
      return Filled;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var ffiUtil = {
      left: Data_Either.Left.create,
      right: Data_Either.Right.create,
      nothing: Data_Maybe.Nothing.value,
      just: Data_Maybe.Just.create,
      killed: Killed.create,
      filled: Filled.create,
      empty: Empty.value
  };
  var kill = function (err) {
      return function (avar) {
          return $foreign["_killVar"](ffiUtil, err, avar);
      };
  };
  var put = function (value) {
      return function (avar) {
          return function (cb) {
              return $foreign["_putVar"](ffiUtil, value, avar, cb);
          };
      };
  };
  var take = function (avar) {
      return function (cb) {
          return $foreign["_takeVar"](ffiUtil, avar, cb);
      };
  };
  exports["take"] = take;
  exports["put"] = put;
  exports["kill"] = kill;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Aff.AVar"] = $PS["Effect.Aff.AVar"] || {};
  var exports = $PS["Effect.Aff.AVar"];
  var Effect_AVar = $PS["Effect.AVar"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var take = function (avar) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var c = Effect_AVar.take(avar)(k)();
              return Effect_Aff.effectCanceler(c);
          };
      });
  };
  var put = function (value) {
      return function (avar) {
          return Effect_Aff.makeAff(function (k) {
              return function __do() {
                  var c = Effect_AVar.put(value)(avar)(k)();
                  return Effect_Aff.effectCanceler(c);
              };
          });
      };
  };   
  var kill = function (error) {
      var $11 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
      var $12 = Effect_AVar.kill(error);
      return function ($13) {
          return $11($12($13));
      };
  };
  var empty = Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.empty);
  exports["empty"] = empty;
  exports["take"] = take;
  exports["put"] = put;
  exports["kill"] = kill;
})(PS);
(function(exports) {
  "use strict";                                               

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["Web.DOM.ParentNode"] = PS["Web.DOM.ParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.DOM.ParentNode"] = $PS["Web.DOM.ParentNode"] || {};
  var exports = $PS["Web.DOM.ParentNode"];
  var $foreign = $PS["Web.DOM.ParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var querySelector = function (qs) {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $4 = $foreign["_querySelector"](qs);
      return function ($5) {
          return $3($4($5));
      };
  };
  exports["querySelector"] = querySelector;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports._readyState = function (doc) {
    return function () {
      return doc.readyState;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.HTML.HTMLDocument.ReadyState"] = $PS["Web.HTML.HTMLDocument.ReadyState"] || {};
  var exports = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Loading = (function () {
      function Loading() {

      };
      Loading.value = new Loading();
      return Loading;
  })();
  var Interactive = (function () {
      function Interactive() {

      };
      Interactive.value = new Interactive();
      return Interactive;
  })();
  var Complete = (function () {
      function Complete() {

      };
      Complete.value = new Complete();
      return Complete;
  })();
  var parse = function (v) {
      if (v === "loading") {
          return new Data_Maybe.Just(Loading.value);
      };
      if (v === "interactive") {
          return new Data_Maybe.Just(Interactive.value);
      };
      if (v === "complete") {
          return new Data_Maybe.Just(Complete.value);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["Loading"] = Loading;
  exports["parse"] = parse;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_HTML_HTMLDocument_ReadyState = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var toParentNode = Unsafe_Coerce.unsafeCoerce; 
  var toDocument = Unsafe_Coerce.unsafeCoerce;
  var readyState = (function () {
      var $0 = Data_Functor.map(Effect.functorEffect)((function () {
          var $2 = Data_Maybe.fromMaybe(Web_HTML_HTMLDocument_ReadyState.Loading.value);
          return function ($3) {
              return $2(Web_HTML_HTMLDocument_ReadyState.parse($3));
          };
      })());
      return function ($1) {
          return $0($foreign["_readyState"]($1));
      };
  })();
  exports["toDocument"] = toDocument;
  exports["toParentNode"] = toParentNode;
  exports["readyState"] = readyState;
})(PS);
(function(exports) {
  "use strict";

  exports._read = function (nothing, just, value) {
    var tag = Object.prototype.toString.call(value);
    if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
      return just(value);
    } else {
      return nothing;
    }
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var $foreign = $PS["Web.HTML.HTMLElement"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var fromElement = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  exports["fromElement"] = fromElement;
  exports["toNode"] = toNode;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Aff.Util"] = $PS["Halogen.Aff.Util"] || {};
  var exports = $PS["Halogen.Aff.Util"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Event_EventTypes = $PS["Web.HTML.Event.EventTypes"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLDocument_ReadyState = $PS["Web.HTML.HTMLDocument.ReadyState"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var selectElement = function (query) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Bind.bindFlipped(Effect.bindEffect)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)((function () {
          var $2 = Web_DOM_ParentNode.querySelector(query);
          return function ($3) {
              return $2(Web_HTML_HTMLDocument.toParentNode($3));
          };
      })())(Web_HTML_Window.document))(Web_HTML.window)))(function (mel) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLElement.fromElement)(mel));
      });
  };
  var runHalogenAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
  var awaitLoad = Effect_Aff.makeAff(function (callback) {
      return function __do() {
          var rs = Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_HTMLDocument.readyState)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))();
          if (rs instanceof Web_HTML_HTMLDocument_ReadyState.Loading) {
              var et = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
              var listener = Web_Event_EventTarget.eventListener(function (v) {
                  return callback(new Data_Either.Right(Data_Unit.unit));
              })();
              Web_Event_EventTarget.addEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(listener)(false)(et)();
              return Effect_Aff.effectCanceler(Web_Event_EventTarget.removeEventListener(Web_HTML_Event_EventTypes.domcontentloaded)(listener)(false)(et));
          };
          callback(new Data_Either.Right(Data_Unit.unit))();
          return Effect_Aff.nonCanceler;
      };
  });
  exports["awaitLoad"] = awaitLoad;
  exports["selectElement"] = selectElement;
  exports["runHalogenAff"] = runHalogenAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Aff.Driver.State"] = $PS["Halogen.Aff.Driver.State"] || {};
  var exports = $PS["Halogen.Aff.Driver.State"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var unRenderStateX = Unsafe_Coerce.unsafeCoerce;
  var unDriverStateX = Unsafe_Coerce.unsafeCoerce;
  var renderStateX_ = function (dictApplicative) {
      return function (f) {
          return unDriverStateX(function (st) {
              return Data_Foldable.traverse_(dictApplicative)(Data_Foldable.foldableMaybe)(f)(st.rendering);
          });
      };
  };
  var mkRenderStateX = Unsafe_Coerce.unsafeCoerce;
  var renderStateX = function (dictFunctor) {
      return function (f) {
          return unDriverStateX(function (st) {
              return mkRenderStateX(f(st.rendering));
          });
      };
  };
  var mkDriverStateXRef = Unsafe_Coerce.unsafeCoerce;
  var mapDriverState = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var initDriverState = function (component) {
      return function (input) {
          return function (handler) {
              return function (lchs) {
                  return function __do() {
                      var selfRef = Effect_Ref["new"]({})();
                      var childrenIn = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                      var childrenOut = Effect_Ref["new"](Halogen_Data_Slot.empty)();
                      var handlerRef = Effect_Ref["new"](handler)();
                      var pendingQueries = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                      var pendingOuts = Effect_Ref["new"](new Data_Maybe.Just(Data_List_Types.Nil.value))();
                      var pendingHandlers = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                      var fresh = Effect_Ref["new"](1)();
                      var subscriptions = Effect_Ref["new"](new Data_Maybe.Just(Data_Map_Internal.empty))();
                      var forks = Effect_Ref["new"](Data_Map_Internal.empty)();
                      var ds = {
                          component: component,
                          state: component.initialState(input),
                          refs: Data_Map_Internal.empty,
                          children: Halogen_Data_Slot.empty,
                          childrenIn: childrenIn,
                          childrenOut: childrenOut,
                          selfRef: selfRef,
                          handlerRef: handlerRef,
                          pendingQueries: pendingQueries,
                          pendingOuts: pendingOuts,
                          pendingHandlers: pendingHandlers,
                          rendering: Data_Maybe.Nothing.value,
                          fresh: fresh,
                          subscriptions: subscriptions,
                          forks: forks,
                          lifecycleHandlers: lchs
                      };
                      Effect_Ref.write(ds)(selfRef)();
                      return mkDriverStateXRef(selfRef);
                  };
              };
          };
      };
  };
  exports["mapDriverState"] = mapDriverState;
  exports["unDriverStateX"] = unDriverStateX;
  exports["renderStateX"] = renderStateX;
  exports["renderStateX_"] = renderStateX_;
  exports["unRenderStateX"] = unRenderStateX;
  exports["initDriverState"] = initDriverState;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Query.EventSource"] = $PS["Halogen.Query.EventSource"] || {};
  var exports = $PS["Halogen.Query.EventSource"];
  var finalize = function (v) {
      return v;
  };
  exports["finalize"] = finalize;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Aff.Driver.Eval"] = $PS["Halogen.Aff.Driver.Eval"] || {};
  var exports = $PS["Halogen.Aff.Driver.Eval"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Applicative_Free = $PS["Control.Applicative.Free"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Coroutine = $PS["Control.Coroutine"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Fork_Class = $PS["Control.Monad.Fork.Class"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_Free_Trans = $PS["Control.Monad.Free.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Coyoneda = $PS["Data.Coyoneda"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Aff_Driver_State = $PS["Halogen.Aff.Driver.State"];
  var Halogen_Query_ChildQuery = $PS["Halogen.Query.ChildQuery"];
  var Halogen_Query_EventSource = $PS["Halogen.Query.EventSource"];
  var Halogen_Query_HalogenM = $PS["Halogen.Query.HalogenM"];
  var Halogen_Query_HalogenQ = $PS["Halogen.Query.HalogenQ"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var unsubscribe = function (sid) {
      return function (ref) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v.subscriptions)))(function (subs) {
                  return Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Halogen_Query_EventSource.finalize)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(subs));
              });
          });
      };
  };
  var queueOrRun = function (ref) {
      return function (au) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return au;
              };
              if (v instanceof Data_Maybe.Just) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write(new Data_Maybe.Just(new Data_List_Types.Cons(au, v.value0)))(ref));
              };
              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 195, column 33 - line 197, column 57): " + [ v.constructor.name ]);
          });
      };
  };
  var handleLifecycle = function (lchs) {
      return function (f) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
              initializers: Data_List_Types.Nil.value,
              finalizers: Data_List_Types.Nil.value
          })(lchs)))(function () {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(function (result) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(lchs)))(function (v) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(v.finalizers))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(v.initializers))(function () {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(result);
                          });
                      });
                  });
              });
          });
      };
  };
  var fresh = function (f) {
      return function (ref) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["modify'"](function (i) {
                  return {
                      state: i + 1 | 0,
                      value: f(i)
                  };
              })(v.fresh));
          });
      };
  };
  var evalQ = function (render) {
      return function (ref) {
          return function (q) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v) {
                  return evalM(render)(ref)(v["component"]["eval"](new Halogen_Query_HalogenQ.Query(Data_Functor.map(Data_Coyoneda.functorCoyoneda)(Data_Maybe.Just.create)(Data_Coyoneda.liftCoyoneda(q)), Data_Function["const"](Data_Maybe.Nothing.value))));
              });
          };
      };
  };
  var evalM = function (render) {
      return function (initRef) {
          return function (v) {
              var evalChildQuery = function (ref) {
                  return function (cqb) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                          return Halogen_Query_ChildQuery.unChildQueryBox(function (v2) {
                              var evalChild = function (v3) {
                                  return Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3)))(function (dsx) {
                                      return Halogen_Aff_Driver_State.unDriverStateX(function (ds) {
                                          return evalQ(render)(ds.selfRef)(v2.value1);
                                      })(dsx);
                                  }));
                              };
                              return Data_Functor.map(Effect_Aff.functorAff)(v2.value2)(Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(v2.value0(Effect_Aff.applicativeParAff)(evalChild)(v1.children)));
                          })(cqb);
                      });
                  };
              };
              var go = function (ref) {
                  return function (v1) {
                      if (v1 instanceof Halogen_Query_HalogenM.State) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              var v3 = v1.value0(v2.state);
                              if (Unsafe_Reference.unsafeRefEq(v2.state)(v3.value1)) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                              };
                              if (Data_Boolean.otherwise) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.write({
                                      component: v2.component,
                                      state: v3.value1,
                                      refs: v2.refs,
                                      children: v2.children,
                                      childrenIn: v2.childrenIn,
                                      childrenOut: v2.childrenOut,
                                      selfRef: v2.selfRef,
                                      handlerRef: v2.handlerRef,
                                      pendingQueries: v2.pendingQueries,
                                      pendingOuts: v2.pendingOuts,
                                      pendingHandlers: v2.pendingHandlers,
                                      rendering: v2.rendering,
                                      fresh: v2.fresh,
                                      subscriptions: v2.subscriptions,
                                      forks: v2.forks,
                                      lifecycleHandlers: v2.lifecycleHandlers
                                  })(ref)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(handleLifecycle(v2.lifecycleHandlers)(render(v2.lifecycleHandlers)(ref)))(function () {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                                      });
                                  });
                              };
                              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 85, column 7 - line 91, column 21): " + [ v3.constructor.name ]);
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Subscribe) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.SubscriptionId)(ref))(function (sid) {
                              var v2 = v1.value0(sid);
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v3) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Control_Bind.bind(Effect_Aff.bindAff)(v2)(function (v4) {
                                      var done = Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3.subscriptions)))(function (subs) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordSubscriptionId)(sid)))(v3.subscriptions)))(function () {
                                              return Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Maybe.maybe(false)(Data_Map_Internal.member(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(subs))(Halogen_Query_EventSource.finalize(v4.finalizer));
                                          });
                                      });
                                      var consumer = Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Coroutine["await"](Effect_Aff.monadAff))(function (act) {
                                          return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Effect_Aff.monadAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v3.subscriptions))))(function (subs) {
                                              return Control_Applicative.when(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqBoolean))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.member(Halogen_Query_HalogenM.ordSubscriptionId)(sid))(subs))(new Data_Maybe.Just(true)))(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Effect_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Effect_Aff.monadAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(evalF(render)(ref)(new Halogen_Query_Input.Action(act)))))(function () {
                                                  return consumer;
                                              }));
                                          });
                                      });
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordSubscriptionId)(sid)(done)))(v3.subscriptions)))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Coroutine.runProcess(Effect_Aff.monadRecAff)(Control_Coroutine.pullFrom(Effect_Aff.monadRecAff)(consumer)(v4.producer)))(function () {
                                              return Halogen_Query_EventSource.finalize(done);
                                          });
                                      });
                                  })))(function () {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(sid));
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Unsubscribe) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(unsubscribe(v1.value0)(ref))(function () {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Lift) {
                          return v1.value0;
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.ChildQuery) {
                          return evalChildQuery(ref)(v1.value0);
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Raise) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.handlerRef)))(function (handler) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(queueOrRun(v2.pendingOuts)(handler(v1.value0)))(function () {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Par) {
                          return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Applicative_Free.retractFreeAp(Effect_Aff.applicativeParAff)(Control_Applicative_Free.hoistFreeAp((function () {
                              var $85 = Control_Parallel_Class.parallel(Effect_Aff.parallelAff);
                              var $86 = evalM(render)(ref);
                              return function ($87) {
                                  return $85($86($87));
                              };
                          })())(v1.value0)));
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Fork) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(fresh(Halogen_Query_HalogenM.ForkId)(ref))(function (fid) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (doneRef) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Effect_Aff["finally"](Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                          Effect_Ref.modify_(Data_Map_Internal["delete"](Halogen_Query_HalogenM.ordForkId)(fid))(v2.forks)();
                                          return Effect_Ref.write(true)(doneRef)();
                                      }))(evalM(render)(ref)(v1.value0))))(function (fiber) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Monad.unlessM(Effect.monadEffect)(Effect_Ref.read(doneRef))(Effect_Ref.modify_(Data_Map_Internal.insert(Halogen_Query_HalogenM.ordForkId)(fid)(fiber))(v2.forks))))(function () {
                                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(fid));
                                          });
                                      });
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.Kill) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(v2.forks)))(function (forkMap) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Effect_Aff.killFiber(Effect_Exception.error("Cancelled")))(Data_Map_Internal.lookup(Halogen_Query_HalogenM.ordForkId)(v1.value0)(forkMap)))(function () {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1);
                                  });
                              });
                          });
                      };
                      if (v1 instanceof Halogen_Query_HalogenM.GetRef) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v2) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value1(Data_Map_Internal.lookup(Data_Ord.ordString)(v1.value0)(v2.refs)));
                          });
                      };
                      throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 82, column 12 - line 146, column 33): " + [ v1.constructor.name ]);
                  };
              };
              return Control_Monad_Free.foldFree(Effect_Aff.monadRecAff)(go(initRef))(v);
          };
      };
  };
  var evalF = function (render) {
      return function (ref) {
          return function (v) {
              if (v instanceof Halogen_Query_Input.RefUpdate) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Function.flip(Effect_Ref.modify_)(ref)(Halogen_Aff_Driver_State.mapDriverState(function (st) {
                      return {
                          component: st.component,
                          state: st.state,
                          refs: Data_Map_Internal.alter(Data_Ord.ordString)(Data_Function["const"](v.value1))(v.value0)(st.refs),
                          children: st.children,
                          childrenIn: st.childrenIn,
                          childrenOut: st.childrenOut,
                          selfRef: st.selfRef,
                          handlerRef: st.handlerRef,
                          pendingQueries: st.pendingQueries,
                          pendingOuts: st.pendingOuts,
                          pendingHandlers: st.pendingHandlers,
                          rendering: st.rendering,
                          fresh: st.fresh,
                          subscriptions: st.subscriptions,
                          forks: st.forks,
                          lifecycleHandlers: st.lifecycleHandlers
                      };
                  })));
              };
              if (v instanceof Halogen_Query_Input.Action) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (v1) {
                      return evalM(render)(ref)(v1["component"]["eval"](new Halogen_Query_HalogenQ.Action(v.value0, Data_Unit.unit)));
                  });
              };
              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 51, column 20 - line 57, column 62): " + [ v.constructor.name ]);
          };
      };
  };
  exports["evalF"] = evalF;
  exports["evalQ"] = evalQ;
  exports["evalM"] = evalM;
  exports["handleLifecycle"] = handleLifecycle;
  exports["queueOrRun"] = queueOrRun;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.Aff.Driver"] = $PS["Halogen.Aff.Driver"] || {};
  var exports = $PS["Halogen.Aff.Driver"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Coroutine = $PS["Control.Coroutine"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Fork_Class = $PS["Control.Monad.Fork.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_AVar = $PS["Effect.Aff.AVar"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Aff_Driver_Eval = $PS["Halogen.Aff.Driver.Eval"];
  var Halogen_Aff_Driver_State = $PS["Halogen.Aff.Driver.State"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_Data_Slot = $PS["Halogen.Data.Slot"];
  var Halogen_Query_EventSource = $PS["Halogen.Query.EventSource"];
  var Halogen_Query_HalogenQ = $PS["Halogen.Query.HalogenQ"];
  var Halogen_Query_Input = $PS["Halogen.Query.Input"];                
  var newLifecycleHandlers = Effect_Ref["new"]({
      initializers: Data_List_Types.Nil.value,
      finalizers: Data_List_Types.Nil.value
  });
  var handleAff = Effect_Aff.runAff_(Data_Either.either(Effect_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
  var handlePending = function (ref) {
      return function __do() {
          var queue = Effect_Ref.read(ref)();
          Effect_Ref.write(Data_Maybe.Nothing.value)(ref)();
          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(queue)((function () {
              var $25 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
              return function ($26) {
                  return handleAff($25(Data_List.reverse($26)));
              };
          })())();
      };
  };
  var cleanupSubscriptionsAndForks = function (v) {
      return function __do() {
          Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)((function () {
              var $27 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Map_Internal.foldableMap)((function () {
                  var $29 = Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff);
                  return function ($30) {
                      return $29(Halogen_Query_EventSource.finalize($30));
                  };
              })());
              return function ($28) {
                  return handleAff($27($28));
              };
          })()))(Effect_Ref.read(v.subscriptions))();
          Effect_Ref.write(Data_Maybe.Nothing.value)(v.subscriptions)();
          Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)((function () {
              var $31 = Effect_Aff.killFiber(Effect_Exception.error("finalized"));
              return function ($32) {
                  return handleAff($31($32));
              };
          })()))(Effect_Ref.read(v.forks))();
          return Effect_Ref.write(Data_Map_Internal.empty)(v.forks)();
      };
  };
  var runUI = function (renderSpec) {
      return function (component) {
          return function (i) {
              var subscribe = function (fresh) {
                  return function (ref) {
                      return function (consumer) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (inputVar) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                  var listenerId = Effect_Ref.read(fresh)();
                                  Effect_Ref.modify_(function (v) {
                                      return v + 1 | 0;
                                  })(fresh)();
                                  Effect_Ref.modify_(Data_Map_Internal.insert(Data_Ord.ordInt)(listenerId)(inputVar))(ref)();
                                  return listenerId;
                              }))(function (listenerId) {
                                  var producer = Control_Coroutine.producer(Effect_Aff.monadAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Either.either(Data_Function["const"](new Data_Either.Right(Data_Unit.unit)))(Data_Either.Left.create))(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Aff_AVar.take(inputVar))));
                                  return Data_Functor["void"](Effect_Aff.functorAff)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Coroutine.runProcess(Effect_Aff.monadRecAff)(Control_Coroutine.connect(Effect_Aff.monadRecAff)(Effect_Aff.parallelAff)(producer)(consumer)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Ord.ordInt)(listenerId))(ref)))(function () {
                                          return Effect_Aff_AVar.kill(Effect_Exception.error("ended"))(inputVar);
                                      });
                                  })));
                              });
                          });
                      };
                  };
              };
              var rootHandler = function (ref) {
                  return function (message) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(ref)))(function (listeners) {
                          return Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Map_Internal.foldableMap)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff))(Data_Functor.map(Data_Map_Internal.functorMap)(Effect_Aff_AVar.put(message))(listeners));
                      });
                  };
              };
              var squashChildInitializers = function (lchs) {
                  return function (preInits) {
                      return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                          var parentInitializer = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Initialize(Data_Unit.unit)));
                          return Effect_Ref.modify_(function (handlers) {
                              return {
                                  initializers: new Data_List_Types.Cons(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Parallel.parSequence_(Effect_Aff.parallelAff)(Data_List_Types.foldableList)(Data_List.reverse(handlers.initializers)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(parentInitializer)(function () {
                                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                              handlePending(st.pendingQueries)();
                                              return handlePending(st.pendingOuts)();
                                          });
                                      });
                                  }), preInits),
                                  finalizers: handlers.finalizers
                              };
                          })(lchs);
                      });
                  };
              };
              var runComponent = function (lchs) {
                  return function (handler) {
                      return function (j) {
                          return Halogen_Component.unComponent(function (c) {
                              return function __do() {
                                  var lchs$prime = newLifecycleHandlers();
                                  var $$var = Halogen_Aff_Driver_State.initDriverState(c)(j)(handler)(lchs$prime)();
                                  var pre = Effect_Ref.read(lchs)();
                                  Effect_Ref.write({
                                      initializers: Data_List_Types.Nil.value,
                                      finalizers: pre.finalizers
                                  })(lchs)();
                                  Control_Bind.bindFlipped(Effect.bindEffect)(Halogen_Aff_Driver_State.unDriverStateX((function () {
                                      var $33 = render(lchs);
                                      return function ($34) {
                                          return $33((function (v) {
                                              return v.selfRef;
                                          })($34));
                                      };
                                  })()))(Effect_Ref.read($$var))();
                                  Control_Bind.bindFlipped(Effect.bindEffect)(squashChildInitializers(lchs)(pre.initializers))(Effect_Ref.read($$var))();
                                  return $$var;
                              };
                          });
                      };
                  };
              };
              var renderChild = function (lchs) {
                  return function (handler) {
                      return function (childrenInRef) {
                          return function (childrenOutRef) {
                              return Halogen_Component.unComponentSlot(function (slot) {
                                  return function __do() {
                                      var childrenIn = Data_Functor.map(Effect.functorEffect)(slot.pop)(Effect_Ref.read(childrenInRef))();
                                      var $$var = (function () {
                                          if (childrenIn instanceof Data_Maybe.Just) {
                                              Effect_Ref.write(childrenIn.value0.value1)(childrenInRef)();
                                              var dsx = Effect_Ref.read(childrenIn.value0.value0)();
                                              Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                                  return function __do() {
                                                      Data_Function.flip(Effect_Ref.write)(st.handlerRef)((function () {
                                                          var $35 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                                                          return function ($36) {
                                                              return $35(slot.output($36));
                                                          };
                                                      })())();
                                                      return handleAff(Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Receive(slot.input, Data_Unit.unit))))();
                                                  };
                                              })(dsx)();
                                              return childrenIn.value0.value0;
                                          };
                                          if (childrenIn instanceof Data_Maybe.Nothing) {
                                              return runComponent(lchs)((function () {
                                                  var $37 = Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(handler);
                                                  return function ($38) {
                                                      return $37(slot.output($38));
                                                  };
                                              })())(slot.input)(slot.component)();
                                          };
                                          throw new Error("Failed pattern match at Halogen.Aff.Driver (line 236, column 14 - line 245, column 98): " + [ childrenIn.constructor.name ]);
                                      })();
                                      var isDuplicate = Data_Functor.map(Effect.functorEffect)(function ($39) {
                                          return Data_Maybe.isJust(slot.get($39));
                                      })(Effect_Ref.read(childrenOutRef))();
                                      Control_Applicative.when(Effect.applicativeEffect)(isDuplicate)(Effect_Console.warn("Halogen: Duplicate slot address was detected during rendering, unexpected results may occur"))();
                                      Effect_Ref.modify_(slot.set($$var))(childrenOutRef)();
                                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read($$var))(Halogen_Aff_Driver_State.renderStateX(Effect.functorEffect)(function (v) {
                                          if (v instanceof Data_Maybe.Nothing) {
                                              return Effect_Exception["throw"]("Halogen internal error: child was not initialized in renderChild");
                                          };
                                          if (v instanceof Data_Maybe.Just) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(renderSpec.renderChild(v.value0));
                                          };
                                          throw new Error("Failed pattern match at Halogen.Aff.Driver (line 250, column 37 - line 252, column 50): " + [ v.constructor.name ]);
                                      }))();
                                  };
                              });
                          };
                      };
                  };
              };
              var render = function (lchs) {
                  return function ($$var) {
                      return function __do() {
                          var v = Effect_Ref.read($$var)();
                          var shouldProcessHandlers = Data_Functor.map(Effect.functorEffect)(Data_Maybe.isNothing)(Effect_Ref.read(v.pendingHandlers))();
                          Control_Applicative.when(Effect.applicativeEffect)(shouldProcessHandlers)(Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(v.pendingHandlers))();
                          Effect_Ref.write(Halogen_Data_Slot.empty)(v.childrenOut)();
                          Effect_Ref.write(v.children)(v.childrenIn)();
                          var selfRef = Control_Category.identity(Control_Category.categoryFn)(v.selfRef);
                          var pendingQueries = Control_Category.identity(Control_Category.categoryFn)(v.pendingQueries);
                          var pendingHandlers = Control_Category.identity(Control_Category.categoryFn)(v.pendingHandlers);
                          var handler = (function () {
                              var $40 = Halogen_Aff_Driver_Eval.queueOrRun(pendingHandlers);
                              var $41 = Data_Functor["void"](Effect_Aff.functorAff);
                              var $42 = Halogen_Aff_Driver_Eval.evalF(render)(selfRef);
                              return function ($43) {
                                  return $40($41($42($43)));
                              };
                          })();
                          var childHandler = (function () {
                              var $44 = Halogen_Aff_Driver_Eval.queueOrRun(pendingQueries);
                              return function ($45) {
                                  return $44(handler(Halogen_Query_Input.Action.create($45)));
                              };
                          })();
                          var rendering = renderSpec.render(function ($46) {
                              return handleAff(handler($46));
                          })(renderChild(lchs)(childHandler)(v.childrenIn)(v.childrenOut))(v.component.render(v.state))(v.rendering)();
                          var children = Effect_Ref.read(v.childrenOut)();
                          var childrenIn = Effect_Ref.read(v.childrenIn)();
                          Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(childrenIn)(function (v1) {
                              return function __do() {
                                  var childDS = Effect_Ref.read(v1)();
                                  Halogen_Aff_Driver_State.renderStateX_(Effect.applicativeEffect)(renderSpec.removeChild)(childDS)();
                                  return finalize(lchs)(childDS)();
                              };
                          })();
                          Data_Function.flip(Effect_Ref.modify_)(v.selfRef)(Halogen_Aff_Driver_State.mapDriverState(function (ds$prime) {
                              return {
                                  component: ds$prime.component,
                                  state: ds$prime.state,
                                  refs: ds$prime.refs,
                                  children: children,
                                  childrenIn: ds$prime.childrenIn,
                                  childrenOut: ds$prime.childrenOut,
                                  selfRef: ds$prime.selfRef,
                                  handlerRef: ds$prime.handlerRef,
                                  pendingQueries: ds$prime.pendingQueries,
                                  pendingOuts: ds$prime.pendingOuts,
                                  pendingHandlers: ds$prime.pendingHandlers,
                                  rendering: new Data_Maybe.Just(rendering),
                                  fresh: ds$prime.fresh,
                                  subscriptions: ds$prime.subscriptions,
                                  forks: ds$prime.forks,
                                  lifecycleHandlers: ds$prime.lifecycleHandlers
                              };
                          }))();
                          return Control_Applicative.when(Effect.applicativeEffect)(shouldProcessHandlers)(Data_Function.flip(Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEffect))(Data_Unit.unit)(function (v1) {
                              return function __do() {
                                  var handlers = Effect_Ref.read(pendingHandlers)();
                                  Effect_Ref.write(new Data_Maybe.Just(Data_List_Types.Nil.value))(pendingHandlers)();
                                  Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)((function () {
                                      var $47 = Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_List_Types.foldableList)(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff));
                                      return function ($48) {
                                          return handleAff($47(Data_List.reverse($48)));
                                      };
                                  })())(handlers)();
                                  var mmore = Effect_Ref.read(pendingHandlers)();
                                  var $21 = Data_Maybe.maybe(false)(Data_List["null"])(mmore);
                                  if ($21) {
                                      return Data_Functor.voidLeft(Effect.functorEffect)(Effect_Ref.write(Data_Maybe.Nothing.value)(pendingHandlers))(new Control_Monad_Rec_Class.Done(Data_Unit.unit))();
                                  };
                                  return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                              };
                          }))();
                      };
                  };
              };
              var finalize = function (lchs) {
                  return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                      return function __do() {
                          cleanupSubscriptionsAndForks(st)();
                          var f = Halogen_Aff_Driver_Eval.evalM(render)(st.selfRef)(st["component"]["eval"](new Halogen_Query_HalogenQ.Finalize(Data_Unit.unit)));
                          Effect_Ref.modify_(function (handlers) {
                              return {
                                  initializers: handlers.initializers,
                                  finalizers: new Data_List_Types.Cons(f, handlers.finalizers)
                              };
                          })(lchs)();
                          return Halogen_Data_Slot.foreachSlot(Effect.applicativeEffect)(st.children)(function (v) {
                              return function __do() {
                                  var dsx = Effect_Ref.read(v)();
                                  return finalize(lchs)(dsx)();
                              };
                          })();
                      };
                  });
              };
              var evalDriver = function (disposed) {
                  return function (ref) {
                      return function (q) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(disposed)))(function (v) {
                              if (v) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                              };
                              return Halogen_Aff_Driver_Eval.evalQ(render)(ref)(q);
                          });
                      };
                  };
              };
              var dispose = function (disposed) {
                  return function (lchs) {
                      return function (dsx) {
                          return function (subsRef) {
                              return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
                                  var v = Effect_Ref.read(disposed)();
                                  if (v) {
                                      return Data_Unit.unit;
                                  };
                                  Effect_Ref.write(true)(disposed)();
                                  Control_Bind.bindFlipped(Effect.bindEffect)(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)((function () {
                                      var $49 = Effect_Aff_AVar.kill(Effect_Exception.error("disposed"));
                                      return function ($50) {
                                          return Effect_Aff.launchAff_($49($50));
                                      };
                                  })()))(Effect_Ref.read(subsRef))();
                                  finalize(lchs)(dsx)();
                                  return Halogen_Aff_Driver_State.unDriverStateX((function () {
                                      var $51 = Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(renderSpec.dispose);
                                      return function ($52) {
                                          return $51((function (v1) {
                                              return v1.rendering;
                                          })($52));
                                      };
                                  })())(dsx)();
                              });
                          };
                      };
                  };
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(newLifecycleHandlers))(function (lchs) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](0)))(function (fresh) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref["new"](false)))(function (disposed) {
                          return Halogen_Aff_Driver_Eval.handleLifecycle(lchs)(function __do() {
                              var listeners = Effect_Ref["new"](Data_Map_Internal.empty)();
                              var dsx = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref.read)(runComponent(lchs)(rootHandler(listeners))(i)(component))();
                              return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                  return Control_Applicative.pure(Effect.applicativeEffect)({
                                      query: evalDriver(disposed)(st.selfRef),
                                      subscribe: subscribe(fresh)(listeners),
                                      dispose: dispose(disposed)(lchs)(dsx)(listeners)
                                  });
                              })(dsx)();
                          });
                      });
                  });
              });
          };
      };
  };
  exports["runUI"] = runUI;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNode"] = toNode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.VDom.DOM"] = $PS["Halogen.VDom.DOM"] || {};
  var exports = $PS["Halogen.VDom.DOM"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Types = $PS["Halogen.VDom.Types"];
  var Halogen_VDom_Util = $PS["Halogen.VDom.Util"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var haltWidget = function (v) {
      return Halogen_VDom_Machine.halt(v.widget);
  };
  var patchWidget = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchWidget(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Widget) {
          var res = Halogen_VDom_Machine.step(state.widget, vdom.value0);
          var res$prime = Halogen_VDom_Machine.unStep(function (v) {
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v.value0, {
                  build: state.build,
                  widget: res
              }, patchWidget, haltWidget));
          })(res);
          return res$prime;
      };
      haltWidget(state);
      return state.build(vdom);
  };
  var haltText = function (v) {
      var parent = Halogen_VDom_Util.parentNode(v.node);
      return Halogen_VDom_Util.removeChild(v.node, parent);
  };
  var patchText = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchText(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Text) {
          if (state.value === vdom.value0) {
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, state, patchText, haltText));
          };
          if (Data_Boolean.otherwise) {
              var nextState = {
                  build: state.build,
                  node: state.node,
                  value: vdom.value0
              };
              Halogen_VDom_Util.setTextContent(vdom.value0, state.node);
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchText, haltText));
          };
      };
      haltText(state);
      return state.build(vdom);
  };
  var haltKeyed = function (v) {
      var parent = Halogen_VDom_Util.parentNode(v.node);
      Halogen_VDom_Util.removeChild(v.node, parent);
      Halogen_VDom_Util.forInE(v.children, function (v1, s) {
          return Halogen_VDom_Machine.halt(s);
      });
      return Halogen_VDom_Machine.halt(v.attrs);
  };
  var haltElem = function (v) {
      var parent = Halogen_VDom_Util.parentNode(v.node);
      Halogen_VDom_Util.removeChild(v.node, parent);
      Halogen_VDom_Util.forEachE(v.children, Halogen_VDom_Machine.halt);
      return Halogen_VDom_Machine.halt(v.attrs);
  };
  var eqElemSpec = function (ns1, v, ns2, v1) {
      var $56 = v === v1;
      if ($56) {
          if (ns1 instanceof Data_Maybe.Just && (ns2 instanceof Data_Maybe.Just && ns1.value0 === ns2.value0)) {
              return true;
          };
          if (ns1 instanceof Data_Maybe.Nothing && ns2 instanceof Data_Maybe.Nothing) {
              return true;
          };
          return false;
      };
      return false;
  };
  var patchElem = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchElem(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Elem && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
          var v = Data_Array.length(vdom.value3);
          var v1 = Data_Array.length(state.children);
          if (v1 === 0 && v === 0) {
              var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
              var nextState = {
                  build: state.build,
                  node: state.node,
                  attrs: attrs2,
                  ns: vdom.value0,
                  name: vdom.value1,
                  children: state.children
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
          };
          var onThis = function (ix, s) {
              return Halogen_VDom_Machine.halt(s);
          };
          var onThese = function (ix, s, v2) {
              var res = Halogen_VDom_Machine.step(s, v2);
              Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var onThat = function (ix, v2) {
              var res = state.build(v2);
              Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var children2 = Halogen_VDom_Util.diffWithIxE(state.children, vdom.value3, onThese, onThis, onThat);
          var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
          var nextState = {
              build: state.build,
              node: state.node,
              attrs: attrs2,
              ns: vdom.value0,
              name: vdom.value1,
              children: children2
          };
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchElem, haltElem));
      };
      haltElem(state);
      return state.build(vdom);
  };
  var patchKeyed = function (state, vdom) {
      if (vdom instanceof Halogen_VDom_Types.Grafted) {
          return patchKeyed(state, Halogen_VDom_Types.runGraft(vdom.value0));
      };
      if (vdom instanceof Halogen_VDom_Types.Keyed && eqElemSpec(state.ns, state.name, vdom.value0, vdom.value1)) {
          var v = Data_Array.length(vdom.value3);
          if (state.length === 0 && v === 0) {
              var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
              var nextState = {
                  build: state.build,
                  node: state.node,
                  attrs: attrs2,
                  ns: vdom.value0,
                  name: vdom.value1,
                  children: state.children,
                  length: 0
              };
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
          };
          var onThis = function (v2, s) {
              return Halogen_VDom_Machine.halt(s);
          };
          var onThese = function (v2, ix$prime, s, v3) {
              var res = Halogen_VDom_Machine.step(s, v3.value1);
              Halogen_VDom_Util.insertChildIx(ix$prime, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var onThat = function (v2, ix, v3) {
              var res = state.build(v3.value1);
              Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), state.node);
              return res;
          };
          var children2 = Halogen_VDom_Util.diffWithKeyAndIxE(state.children, vdom.value3, Data_Tuple.fst, onThese, onThis, onThat);
          var attrs2 = Halogen_VDom_Machine.step(state.attrs, vdom.value2);
          var nextState = {
              build: state.build,
              node: state.node,
              attrs: attrs2,
              ns: vdom.value0,
              name: vdom.value1,
              children: children2,
              length: v
          };
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(state.node, nextState, patchKeyed, haltKeyed));
      };
      haltKeyed(state);
      return state.build(vdom);
  };
  var buildWidget = function (v, build, w) {
      var res = v.buildWidget(v)(w);
      var res$prime = Halogen_VDom_Machine.unStep(function (v1) {
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(v1.value0, {
              build: build,
              widget: res
          }, patchWidget, haltWidget));
      })(res);
      return res$prime;
  };
  var buildText = function (v, build, s) {
      var node = Halogen_VDom_Util.createTextNode(s, v.document);
      var state = {
          build: build,
          node: node,
          value: s
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchText, haltText));
  };
  var buildKeyed = function (v, build, ns1, name1, as1, ch1) {
      var el = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
      var node = Web_DOM_Element.toNode(el);
      var onChild = function (k, ix, v1) {
          var res = build(v1.value1);
          Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), node);
          return res;
      };
      var children = Halogen_VDom_Util.strMapWithIxE(ch1, Data_Tuple.fst, onChild);
      var attrs = v.buildAttributes(el)(as1);
      var state = {
          build: build,
          node: node,
          attrs: attrs,
          ns: ns1,
          name: name1,
          children: children,
          length: Data_Array.length(ch1)
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchKeyed, haltKeyed));
  };
  var buildElem = function (v, build, ns1, name1, as1, ch1) {
      var el = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(ns1), name1, v.document);
      var node = Web_DOM_Element.toNode(el);
      var onChild = function (ix, child) {
          var res = build(child);
          Halogen_VDom_Util.insertChildIx(ix, Halogen_VDom_Machine.extract(res), node);
          return res;
      };
      var children = Halogen_VDom_Util.forE(ch1, onChild);
      var attrs = v.buildAttributes(el)(as1);
      var state = {
          build: build,
          node: node,
          attrs: attrs,
          ns: ns1,
          name: name1,
          children: children
      };
      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, state, patchElem, haltElem));
  };
  var buildVDom = function (spec) {
      var build = function (v) {
          if (v instanceof Halogen_VDom_Types.Text) {
              return buildText(spec, build, v.value0);
          };
          if (v instanceof Halogen_VDom_Types.Elem) {
              return buildElem(spec, build, v.value0, v.value1, v.value2, v.value3);
          };
          if (v instanceof Halogen_VDom_Types.Keyed) {
              return buildKeyed(spec, build, v.value0, v.value1, v.value2, v.value3);
          };
          if (v instanceof Halogen_VDom_Types.Widget) {
              return buildWidget(spec, build, v.value0);
          };
          if (v instanceof Halogen_VDom_Types.Grafted) {
              return build(Halogen_VDom_Types.runGraft(v.value0));
          };
          throw new Error("Failed pattern match at Halogen.VDom.DOM (line 58, column 27 - line 63, column 52): " + [ v.constructor.name ]);
      };
      return build;
  };
  exports["buildVDom"] = buildVDom;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.VDom.Thunk"] = $PS["Halogen.VDom.Thunk"] || {};
  var exports = $PS["Halogen.VDom.Thunk"];
  var Halogen_VDom_DOM = $PS["Halogen.VDom.DOM"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Util = $PS["Halogen.VDom.Util"];        
  var Thunk = (function () {
      function Thunk(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Thunk.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Thunk(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Thunk;
  })();                                          
  var unsafeEqThunk = function (v, v1) {
      return Halogen_VDom_Util.refEq(v.value0, v1.value0) && (Halogen_VDom_Util.refEq(v.value1, v1.value1) && v.value1(v.value3, v1.value3));
  };
  var thunk = function (tid, eqFn, f, a) {
      return new Thunk(tid, eqFn, f, a);
  };
  var runThunk = function (v) {
      return v.value2(v.value3);
  };
  var buildThunk = function (toVDom) {
      var haltThunk = function (state) {
          return Halogen_VDom_Machine.halt(state.vdom);
      };
      var patchThunk = function (state, t2) {
          var $43 = unsafeEqThunk(state.thunk, t2);
          if ($43) {
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(state.vdom), state, patchThunk, haltThunk));
          };
          var vdom = Halogen_VDom_Machine.step(state.vdom, toVDom(runThunk(t2)));
          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(vdom), {
              vdom: vdom,
              thunk: t2
          }, patchThunk, haltThunk));
      };
      var renderThunk = function (spec) {
          return function (t) {
              var vdom = Halogen_VDom_DOM.buildVDom(spec)(toVDom(runThunk(t)));
              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(vdom), {
                  thunk: t,
                  vdom: vdom
              }, patchThunk, haltThunk));
          };
      };
      return renderThunk;
  };
  exports["buildThunk"] = buildThunk;
})(PS);
(function(exports) {
  "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };                                                   

  exports._parentNode = getEffProp("parentNode");          

  exports._nextSibling = getEffProp("nextSibling");

  exports.insertBefore = function (node1) {
    return function (node2) {
      return function (parent) {
        return function () {
          return parent.insertBefore(node1, node2);
        };
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };

  exports.removeChild = function (node) {
    return function (parent) {
      return function () {
        return parent.removeChild(node);
      };
    };
  };
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Web.DOM.Node"] = $PS["Web.DOM.Node"] || {};
  var exports = $PS["Web.DOM.Node"];
  var $foreign = $PS["Web.DOM.Node"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var parentNode = (function () {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($4) {
          return $3($foreign["_parentNode"]($4));
      };
  })();
  var nextSibling = (function () {
      var $14 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($15) {
          return $14($foreign["_nextSibling"]($15));
      };
  })();
  exports["parentNode"] = parentNode;
  exports["nextSibling"] = nextSibling;
  exports["insertBefore"] = $foreign.insertBefore;
  exports["appendChild"] = $foreign.appendChild;
  exports["removeChild"] = $foreign.removeChild;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Halogen.VDom.Driver"] = $PS["Halogen.VDom.Driver"] || {};
  var exports = $PS["Halogen.VDom.Driver"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Halogen_Aff_Driver = $PS["Halogen.Aff.Driver"];
  var Halogen_Aff_Driver_State = $PS["Halogen.Aff.Driver.State"];
  var Halogen_Component = $PS["Halogen.Component"];
  var Halogen_HTML_Core = $PS["Halogen.HTML.Core"];
  var Halogen_VDom_DOM = $PS["Halogen.VDom.DOM"];
  var Halogen_VDom_DOM_Prop = $PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Machine = $PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Thunk = $PS["Halogen.VDom.Thunk"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var substInParent = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.insertBefore(v)(v1.value0)(v2.value0));
              };
              if (v1 instanceof Data_Maybe.Nothing && v2 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(v)(v2.value0));
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
  };
  var removeChild = function (v) {
      return function __do() {
          var npn = Web_DOM_Node.parentNode(v.node)();
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (pn) {
              return Web_DOM_Node.removeChild(v.node)(pn);
          })(npn)();
      };
  };
  var mkSpec = function (handler) {
      return function (renderChildRef) {
          return function (document) {
              var getNode = Halogen_Aff_Driver_State.unRenderStateX(function (v) {
                  return v.node;
              });
              var done = function (st) {
                  if (st instanceof Data_Maybe.Just) {
                      return Halogen_VDom_Machine.halt(st.value0);
                  };
                  return Data_Unit.unit;
              };
              var buildWidget = function (spec) {
                  var buildThunk = Halogen_VDom_Thunk.buildThunk(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeHTML))(spec);
                  var renderComponentSlot = function (cs) {
                      var renderChild = Effect_Ref.read(renderChildRef)();
                      var rsx = renderChild(cs)();
                      var node = getNode(rsx);
                      return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(node, Data_Maybe.Nothing.value, patch, done));
                  };
                  var render = function (slot) {
                      if (slot instanceof Halogen_Component.ComponentSlot) {
                          return renderComponentSlot(slot.value0);
                      };
                      if (slot instanceof Halogen_Component.ThunkSlot) {
                          var step = buildThunk(slot.value0);
                          return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(step), new Data_Maybe.Just(step), patch, done));
                      };
                      throw new Error("Failed pattern match at Halogen.VDom.Driver (line 85, column 7 - line 90, column 75): " + [ slot.constructor.name ]);
                  };
                  var patch = function (st, slot) {
                      if (st instanceof Data_Maybe.Just) {
                          if (slot instanceof Halogen_Component.ComponentSlot) {
                              Halogen_VDom_Machine.halt(st.value0);
                              return renderComponentSlot(slot.value0);
                          };
                          if (slot instanceof Halogen_Component.ThunkSlot) {
                              var step$prime = Halogen_VDom_Machine.step(st.value0, slot.value0);
                              return Halogen_VDom_Machine.mkStep(new Halogen_VDom_Machine.Step(Halogen_VDom_Machine.extract(step$prime), new Data_Maybe.Just(step$prime), patch, done));
                          };
                          throw new Error("Failed pattern match at Halogen.VDom.Driver (line 98, column 22 - line 104, column 79): " + [ slot.constructor.name ]);
                      };
                      return render(slot);
                  };
                  return render;
              };
              var buildAttributes = Halogen_VDom_DOM_Prop.buildProp(handler);
              return {
                  buildWidget: buildWidget,
                  buildAttributes: buildAttributes,
                  document: document
              };
          };
      };
  };
  var renderSpec = function (document) {
      return function (container) {
          var render = function (handler) {
              return function (child) {
                  return function (v) {
                      return function (v1) {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return function __do() {
                                  var renderChildRef = Effect_Ref["new"](child)();
                                  var spec = mkSpec(handler)(renderChildRef)(document);
                                  var machine = Halogen_VDom_DOM.buildVDom(spec)(v);
                                  var node = Halogen_VDom_Machine.extract(machine);
                                  Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.appendChild(node)(Web_HTML_HTMLElement.toNode(container)))();
                                  return {
                                      machine: machine,
                                      node: node,
                                      renderChildRef: renderChildRef
                                  };
                              };
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return function __do() {
                                  Effect_Ref.write(child)(v1.value0.renderChildRef)();
                                  var parent = Web_DOM_Node.parentNode(v1.value0.node)();
                                  var nextSib = Web_DOM_Node.nextSibling(v1.value0.node)();
                                  var machine$prime = Halogen_VDom_Machine.step(v1.value0.machine, v);
                                  var newNode = Halogen_VDom_Machine.extract(machine$prime);
                                  Control_Applicative.when(Effect.applicativeEffect)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Unsafe_Reference.unsafeRefEq)(v1.value0.node)(newNode))(substInParent(newNode)(nextSib)(parent))();
                                  return {
                                      machine: machine$prime,
                                      node: newNode,
                                      renderChildRef: v1.value0.renderChildRef
                                  };
                              };
                          };
                          throw new Error("Failed pattern match at Halogen.VDom.Driver (line 159, column 5 - line 175, column 80): " + [ v1.constructor.name ]);
                      };
                  };
              };
          };
          return {
              render: render,
              renderChild: Control_Category.identity(Control_Category.categoryFn),
              removeChild: removeChild,
              dispose: removeChild
          };
      };
  };
  var runUI = function (component) {
      return function (i) {
          return function (element) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toDocument)(Control_Bind.bindFlipped(Effect.bindEffect)(Web_HTML_Window.document)(Web_HTML.window))))(function (document) {
                  return Halogen_Aff_Driver.runUI(renderSpec(document)(element))(component)(i);
              });
          };
      };
  };
  exports["runUI"] = runUI;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Example.Main"] = $PS["Example.Main"] || {};
  var exports = $PS["Example.Main"];
  var Audio_SoundFont = $PS["Audio.SoundFont"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Midi_Instrument = $PS["Data.Midi.Instrument"];
  var Editor_Container = $PS["Editor.Container"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Halogen_Aff_Util = $PS["Halogen.Aff.Util"];
  var Halogen_VDom_Driver = $PS["Halogen.VDom.Driver"];                
  var main = Halogen_Aff_Util.runHalogenAff(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Halogen_Aff_Util.awaitLoad)(function () {
      return Control_Bind.bind(Effect_Aff.bindAff)(Audio_SoundFont.loadRemoteSoundFonts([ Data_Midi_Instrument.AcousticGrandPiano.value ]))(function (instruments) {
          return Control_Bind.bindFlipped(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Halogen_VDom_Driver.runUI(Editor_Container.component(Effect_Aff_Class.monadAffAff))({
              instruments: instruments,
              initialAbc: Data_Maybe.Nothing.value
          })))(Halogen_Aff_Util.selectElement("#embed-ps-div"));
      });
  }));
  exports["main"] = main;
})(PS);
PS["Example.Main"].main();